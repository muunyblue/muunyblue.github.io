<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>もくもくブログ</title><link href="https://muunyblue.github.io/" rel="alternate"></link><link href="https://muunyblue.github.io/feeds/all.atom.xml" rel="self"></link><id>https://muunyblue.github.io/</id><updated>2021-12-16T01:41:01+09:00</updated><entry><title>普通のキーボード写真とBLEの話</title><link href="https://muunyblue.github.io/97885afd60c10c4a454c11e225763e04.html" rel="alternate"></link><published>2021-12-16T01:41:01+09:00</published><updated>2021-12-16T01:41:01+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2021-12-16:97885afd60c10c4a454c11e225763e04.html</id><summary type="html">&lt;p&gt;&lt;a href="https://adventar.org/calendars/6470"&gt;KEEB_PD Advent Calendar 2021&lt;/a&gt;の16日目の記事です。&lt;/p&gt;
&lt;p&gt;はじめまして、&lt;a href="https://twitter.com/_y_y_m_m_"&gt;yymm&lt;/a&gt;と申します。&lt;br /&gt;
BLE Micro Proを長いこと使っていて良さを感じているのでアドベントカレンダー参加しようと思い&lt;br /&gt;
意気揚々と何故かKEEB_PDのアドベントカレンダーに登録していました。&lt;/p&gt;
&lt;p&gt;写真を載せつつ&lt;a href="https://shop.yushakobo.jp/products/ble-micro-pro?variant=37665571340449"&gt;BLE Micro Pro&lt;/a&gt;の紹介をしていこうと思います。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/search?q=%23KEEB_PD%20filter%3Aimages&amp;amp;src=typed_query"&gt;#KEEB_PD&lt;/a&gt;は毎週見てて反応はしているけどROM専だったのでこれを機に参加したいなと思っています、&lt;br /&gt;
72週も続いているというのを知ってびっくりしましたこれからも楽しみにしています。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img alt="Iris rev.2 ble with coffee" src="images/iris.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;これは普通のスマートフォンで撮影したIris rev.2のBLE Micro Proを両側につけているので&lt;br /&gt;
&lt;strong&gt;実際に使用しているときのまま&lt;/strong&gt;の写真です。&lt;/p&gt;
&lt;p&gt;そう無線のメリットは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ふとキーボードの写真を撮ろうと思ったときにその場で配線とか気にせず作業も止めることなく撮影可能&lt;/li&gt;
&lt;li&gt;無線分割だとキーボードの間にコーヒー等の飲み物をｽｯ...とおけて便利&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Zen keyboard with coffee" src="https://pbs.twimg.com/media/DlFqdWxU8AA1VlS.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;こちらも普通のスマートフォンで撮影したZen keyboard rev.1です。&lt;/p&gt;
&lt;p&gt;同じように間にコーヒーを置けていますが、配線がごちゃついていてコーヒーをこぼしてしまう危険性を感じます。&lt;/p&gt;
&lt;p&gt;ちなみに光るキーボードは暗所で撮影すると普通のスマートフォンでもなんかいい感じすることができます。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/y_y_m_m/status/1459583632671068166"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;ということで無線にすればお使いのキーボードの写真がいつでも簡単に取れるということをご理解いただけたと思います、&lt;/p&gt;
&lt;p&gt;そしてお使いのキーボードを無線化するのは意外と簡単ということを紹介しようと思います。&lt;/p&gt;
&lt;h2 id="pro-micro"&gt;Pro Microを使用しているキーボードはそのまま無線化可能&lt;/h2&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://shop.yushakobo.jp/products/ble-micro-pro?variant=37665571340449"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;Pro Microとの互換性を意識しているのでPro Microを使用しているキーボードならただ置き換えるだけで大丈夫です。&lt;/p&gt;
&lt;p&gt;ただ電源を確保する必要があるのでその点だけ注意です。&lt;/p&gt;
&lt;p&gt;冒頭で紹介したキーボードはPCB背面にProMicroを取り付けるタイプなのですがケースを工夫して電池基盤を入るように調整しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Iris back" src="images/iris_back.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://shop.yushakobo.jp/products/ble-micro-pro-battery-board/"&gt;遊舎工房で売られている電池基盤&lt;/a&gt;は&lt;br /&gt;
かなり薄く設計されているので隙間に収めるか最悪ﾋﾟｮｺっとはみ出てても使うことはできます。&lt;/p&gt;
&lt;p&gt;とはいえはみ出てると悲しいので&lt;a href="https://sekigon-gonnoc.github.io/BLE-Micro-Pro/#/keyboard_list"&gt;無線化の実績のあるキーボード一覧&lt;/a&gt;から無線化をしてみるというのもありです。&lt;/p&gt;
&lt;h2 id="web"&gt;ファームウェアの書き込みをWebから行える&lt;/h2&gt;
&lt;p&gt;BLEに限らずWebから行える環境が最近はあると思いますが、BLE Micro ProもWebからセットアップ可能です。&lt;/p&gt;
&lt;p&gt;ドキュメントもあるのでしっかり読んでそのまま作業すれば問題なく書き込みまでできます、&lt;br /&gt;
もし詰まったりしたら&lt;a href="https://discordapp.com/invite/zXCss8T"&gt;Self Made Keyboard in Japan の Discord&lt;/a&gt;に#ble-micro-proチャンネルがあるのでサポートの動線があるのも安心です。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://sekigon-gonnoc.github.io/BLE-Micro-Pro/#/"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://sekigon-gonnoc.github.io/BLE-Micro-Pro/#/getting_started"&gt;自作キーボードキットを無線化する&lt;/a&gt;というセクションがあるので手持ちのBLE化されていないキーボードでも手順通りにWebのツールを操作していけば無線化できます。&lt;/p&gt;
&lt;p&gt;基本的にマニュアル通りで良いのですが、1点知っておくと便利なところがあって、&lt;br /&gt;
それはBLE Micro Proは&lt;a href="https://sekigon-gonnoc.github.io/BLE-Micro-Pro/#/cli"&gt;BLE関連のコマンド&lt;/a&gt;をシリアルポート経由で発行して状態を確認できる機能があります。&lt;/p&gt;
&lt;p&gt;シリアルポートの通信に詳しくないのでどうやってやるのかと思っていたのですが、&lt;br /&gt;
これがBLE Micro Proの作者である&lt;a href="https://sekigon-gonnoc.github.io/qmk_configurator"&gt;sekigonさんの用意したQMK Configurator&lt;/a&gt;を使うとWebからコマンドを発行できます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="QMK Configurator" src="images/qmk_configurator.png" /&gt;&lt;/p&gt;
&lt;p&gt;この画面のCommandから &lt;code&gt;adv&lt;/code&gt; コマンドや &lt;code&gt;show&lt;/code&gt; コマンド、 &lt;code&gt;del&lt;/code&gt; コマンド等が実行できます。&lt;br /&gt;
ペアリングがうまく行っているか確認したいときが多かったのでとても助かりました。&lt;/p&gt;
&lt;h2 id="_1"&gt;キーマップや設定の更新がファイルベースでできる&lt;/h2&gt;
&lt;p&gt;BLE Micro ProはPCにつなぐとUSBドライブとして認識されるので、そこに見えるファイルを直接編集することでキーマップや設定の変更がビルドいらずでできます。便利。&lt;/p&gt;
&lt;p&gt;&lt;img alt="usb device" src="images/usb.png" /&gt;&lt;/p&gt;
&lt;p&gt;入っているJSONファイルやTXTファイルを編集することで簡単に設定を変更できます。&lt;/p&gt;
&lt;p&gt;BLE Micro Proが公式対応していないキーボードでも一旦デフォルトのキーマップでファームに書き込んで、&lt;br /&gt;
そのあとに直接ファイルを編集してそのキーボードにあった設定に変更する必要があり、&lt;br /&gt;
その際にファイルベースで変更ができるので良さを感じます。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;ちょっと後半はKEED_PDぽくない内容になってしまいましたが、今後は無線化したキーボードの写真を作業の合間に撮っていく所存です。&lt;/p&gt;
&lt;p&gt;BLE化は今後もっと流行っても良いのではと思っているので、&lt;br /&gt;
この記事で少しでも興味を持っていただける方がいると嬉しいなと思います。&lt;/p&gt;
&lt;p&gt;この記事はIris rev.2 full BLEで書きました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keycap: DSA(BLUE) &amp;amp; DCS(WHITE) - Pimp My Keyboard&lt;/li&gt;
&lt;li&gt;Switch: Zilent V2 62g&lt;/li&gt;
&lt;li&gt;BLE Setting: Debounce=2, slave_latency=14&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Keyboard"></category></entry><entry><title>React Hooks: useReducer &amp; Context API with TypeScript</title><link href="https://muunyblue.github.io/8eb51d0a68e9373df41f88e5b551d4a3.html" rel="alternate"></link><published>2019-05-24T01:41:01+09:00</published><updated>2019-05-24T01:41:01+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2019-05-24:8eb51d0a68e9373df41f88e5b551d4a3.html</id><summary type="html">&lt;p&gt;最近React Hooksに入門してみていて、reduxを意識したuseReducerというAPIと&lt;br /&gt;
Context APIが気になったので素振りしてみました。&lt;/p&gt;
&lt;p&gt;あとFunctionalに書けるHooksとTypeScriptは相性が良いのではないかと思ったので&lt;br /&gt;
すべてTypeScriptで書いていきます。&lt;/p&gt;
&lt;h1 id="canvas-animation-framework"&gt;canvas animation framework&lt;/h1&gt;
&lt;p&gt;&lt;img alt="demo" src="https://raw.githubusercontent.com/yymm/hooks-canvas-sample/master/1000-particle-example.gif" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yymm/hooks-canvas-sample"&gt;yymm/hooks-canvas-sample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;素振りするにあたりお題があったほうが良いので、今回はcanvasでanimation framework的なものを作ることにしました。&lt;/p&gt;
&lt;p&gt;※ 動いているアニメーションはそのframeworkに乱数と円軌道を使った描画関数を適当にのせたものです。&lt;/p&gt;
&lt;h2 id="_1"&gt;仕組み&lt;/h2&gt;
&lt;p&gt;menuでrequestAnimationFrameを使用してアニメーションを開始、&lt;br /&gt;
Context APIを利用してframe等のデータをcanvasに渡してアニメーションを描画します。&lt;/p&gt;
&lt;p&gt;データはuseReducerとContext APIを使って管理、コンポーネントは&lt;br /&gt;
HooksのFunctional Componentで実装しています。&lt;/p&gt;
&lt;h1 id="store"&gt;storeの実装&lt;/h1&gt;
&lt;p&gt;useReducerとContext APIを使ったデータ層の仕組みをstoreと名付けて実装してみました。&lt;/p&gt;
&lt;p&gt;内部は大まかにuseReducerに使うReducer部分と、それらを束ねて提供するContext APIのProviderに分かれています。&lt;/p&gt;
&lt;h2 id="reducer"&gt;Reducer&lt;/h2&gt;
&lt;p&gt;useReducerの第一引数にはreducerを渡します、reducerの型は以下の通りです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt; &lt;span class="nt"&gt;Reducer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;prevState&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;action&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この型に合わせたreducerを作成します。型定義はReactのDefinitelyTypedを&lt;br /&gt;
見るとわかりますので定義ジャンプ機能で逐一確認すると良いです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IStore&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;startTime&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;frame&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;fps&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;spendTime&lt;/span&gt;: &lt;span class="kt"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ctx?&lt;/span&gt;: &lt;span class="kt"&gt;CanvasRenderingContext2D&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;frame&lt;/span&gt;: &lt;span class="kt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;fps&lt;/span&gt;: &lt;span class="kt"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;spendTime&lt;/span&gt;: &lt;span class="kt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;startTime&lt;/span&gt;: &lt;span class="kt"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;: &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IAction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;payload&lt;/span&gt;: &lt;span class="kt"&gt;IStore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;error?&lt;/span&gt;: &lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;: &lt;span class="kt"&gt;React.Reducer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IAction&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;見ての通りreducerはActionに入ってきたpayloadを素通しする手抜き実装です、&lt;br /&gt;
ActionTypeを定義してswitchする実装が正攻法です。Enumを使った実装パターンがあるのでそちらも以下に紹介します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;ActionType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;UPDATE_CANVAS_CTX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;UPDATE_CANVAS_CTX&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;UPDATE_FRAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;UPDATE_FRAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IAction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActionType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;payload&lt;/span&gt;: &lt;span class="kt"&gt;IStore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;: &lt;span class="kt"&gt;React.Reducer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IAction&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;ActionType.UPDATE_CANVAS_CTX&lt;/span&gt;:
      &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;ctx&lt;/span&gt;: &lt;span class="kt"&gt;action.payload.ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;ActionType.UPDATE_FRAME&lt;/span&gt;:
      &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;frame&lt;/span&gt;: &lt;span class="kt"&gt;action.payload.frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;default&lt;/span&gt;:
      &lt;span class="kt"&gt;throw&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="ne"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="provider-hoc"&gt;Provider HOC&lt;/h2&gt;
&lt;p&gt;Context APIのProviderをHOCとして実装するパターンが存在します。&lt;br /&gt;
これによってProviderの利用側がvalueを生成しないでよくなるので責務がきれいに分離されます。&lt;/p&gt;
&lt;p&gt;TypeScriptで書く場合は型を指定する必要がります、今回はuseReducerの戻り値をまとめたStoreWithActionという&lt;br /&gt;
型を作成してContextに入れています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;StoreWithAction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt;: &lt;span class="kt"&gt;IStore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;dispatch&lt;/span&gt;: &lt;span class="kt"&gt;React.Dispatch&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IAction&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StoreWithAction&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt;: &lt;span class="kt"&gt;initialStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StoreProvider&lt;/span&gt;: &lt;span class="kt"&gt;React.FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialStore&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;: &lt;span class="kt"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;: &lt;span class="kt"&gt;dispatch&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Store.Provider&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Context APIはHooksのAPIと組み合わせると大変有用です、&lt;br /&gt;
Contextを使用するコンポーネントの全てでリアクティブにデータを取得・更新することができるようになります。&lt;/p&gt;
&lt;p&gt;メモ: Contextに入れるdispatchの初期値は空の関数を使うことでTypeScriptのエラーを回避できました、&lt;br /&gt;
型が一致していないように思うので少し不安ですがProviderとして使われる際には必ずdispatch関数が入るので問題ないと思います。&lt;/p&gt;
&lt;h1 id="component"&gt;Componentの実装&lt;/h1&gt;
&lt;p&gt;アプリケーションのルートコンポーネントにあたるApp.tsxは以下のようになっています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kr"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="kr"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;react&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Canvas&lt;/span&gt; &lt;span class="kr"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./canvas&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Menu&lt;/span&gt; &lt;span class="kr"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./menu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StoreProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kr"&gt;from&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./store&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StoreProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Canvas&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Menu&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/StoreProvider&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでStoreProviderの子コンポーネントはContext APIを使ってstoreのデータにアクセスすることができます、非常にシンプル。&lt;/p&gt;
&lt;h2 id="menu"&gt;Menu&lt;/h2&gt;
&lt;p&gt;MenuコンポーネントではrequestAnimationFrameを発火してframeを+1していきます、&lt;br /&gt;
開始時間を記録しておくことでfpsも測定します(requestAnimationFrameは60fpsで動作しようとします)。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Menu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dispatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;React&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;requestID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setRequestID&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;React&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;animation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;spendTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;spendTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spendTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spendTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;requestID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;setRequestID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;requestID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;setRequestID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancelAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="n"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="n"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;TIME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;float2str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spendTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;float2str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="n"&gt;FPS&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="canvas"&gt;Canvas&lt;/h2&gt;
&lt;p&gt;Menuで更新されるframeを監視してアニメーションをします。&lt;br /&gt;
状態の更新を監視するにはuseEffectを使います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dispatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;React&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;canvasRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;React&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HTMLCanvasElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb nb-Type"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;React&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvasRef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;canvasRef&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;canvasRef&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="n"&gt;React&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;
        &lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;canvasRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;canvasWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;draw関数がcanvas描画の本体です。ここにframeによって変化するような描画関数を&lt;br /&gt;
仕込めばアニメーションが完成します。最初にあげたgifの例は以下のようなコードです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;drawParticles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;: &lt;span class="kt"&gt;IStore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;400&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;particles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;particle&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vframe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// velocity = 10 px/sec&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beginPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;particle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;
      &lt;span class="nx"&gt;particle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;vframe&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;180&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;particle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;particle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;
      &lt;span class="nx"&gt;particle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;vframe&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;180&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;particle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="nx"&gt;particle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
      &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;vframe&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;180&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;particle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size_arg&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startAng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endAng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;particle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;particle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startAng&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endAng&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Canvasコンポーネントのコードを見ると、useRefでCanvasのrefを取得しています。&lt;br /&gt;
HooksからCanvasを扱う場合はこの処理が必要になります。&lt;/p&gt;
&lt;p&gt;refから取得できるctxをstoreに入れるとdraw関数がctxを参照できて、&lt;br /&gt;
draw関数とCanvasコンポーネントの依存が分離されるので便利です。&lt;/p&gt;
&lt;h1 id="_2"&gt;まとめと感想&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;React単体でここまでreduxライクに書けるのはすごい&lt;/li&gt;
&lt;li&gt;HooksのAPIはシンプルで書きやすい&lt;/li&gt;
&lt;li&gt;APIはシンプルで柔軟に設計されているので実装者の設計力が試されている気がする&lt;/li&gt;
&lt;li&gt;HooksとTypeScriptの相性は良さそう&lt;/li&gt;
&lt;li&gt;ライブラリの型定義は参考になるのでgoto definitionしよう&lt;/li&gt;
&lt;li&gt;TypeScriptの型推論強い&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="context-api"&gt;Context APIの使いどころ&lt;/h2&gt;
&lt;p&gt;あまり深く考えずにバケツリレーを回避する目的でContext APIを使う発想は微妙で&lt;br /&gt;
本当に広くアクセスする必要のあるデータが必要なのか考えたほうが良いと思いました。&lt;/p&gt;
&lt;p&gt;グローバルに使えるデータは便利ですが、その分コードの見通しを悪くする可能性があります。&lt;br /&gt;
useReducerのみで事足りるケースかどうか見極めると良いと考えます。&lt;/p&gt;
&lt;p&gt;今回のようにコンポーネント間での役割分担を明確にする名目で使うパターンはありかもしれないと感じました、&lt;br /&gt;
他に用途があるとするとrouterを超えて共有する必要のあるデータ(Login情報やSession情報など)は&lt;br /&gt;
Contextに入れると良さそうな感じがします。&lt;/p&gt;
&lt;p&gt;Reduxもそうですが、銀の弾丸ではないのでしっかりと設計を考えて便利さやかっこよさに&lt;br /&gt;
囚われてオーバーな技術選定にならないようにしていきたさみをあらためて感じました。&lt;/p&gt;
&lt;p&gt;若干ポエムってしまいましたが、React単体でここまでできるのは肥大化しがちなbundleファイルを小さく保つ上でも良さを&lt;br /&gt;
感じたので使っていこうと思っています、あとTypeScriptは一度使うとJSに戻るのをためらいたくなる効果がまじである...すごい...&lt;/p&gt;
&lt;h1 id="url"&gt;参考URL&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;Introducing Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://levelup.gitconnected.com/usetypescript-a-complete-guide-to-react-hooks-and-typescript-db1858d1fb9c"&gt;useTypescript — A Complete Guide to React Hooks and TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@jrwebdev/react-hooks-in-typescript-88fce7001d0d"&gt;React Hooks in TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/oieduardorabelo/react-hooks-how-to-create-and-update-contextprovider-1f68"&gt;React Hooks: How to create and update Context.Provider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="React"></category><category term="Hooks"></category><category term="TypeScript"></category></entry><entry><title>普通のTwitter転職</title><link href="https://muunyblue.github.io/214cfbe603b7f9f9bc005d5f53f7a1d3.html" rel="alternate"></link><published>2019-01-23T21:41:01+09:00</published><updated>2019-01-23T21:41:01+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2019-01-23:214cfbe603b7f9f9bc005d5f53f7a1d3.html</id><summary type="html">&lt;p&gt;インフルを発症してだいぶ落ち着いてきたので転職エントリでも書いてみることにしました。&lt;/p&gt;
&lt;p&gt;よくありそうな受託開発の会社からスタートアップへの転職話です。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;私は大学の頃に物理学を選考していて、複雑怪奇な数式を見ると妙にテンションが上ってしまうような&lt;br /&gt;
性分であったので受託開発時代は主に数値計算系の業務をしていました。&lt;br /&gt;
使用していた主な言語は頻度順に、C、C++、Fortranです。&lt;/p&gt;
&lt;p&gt;ちなみに私は大学の頃すごく理解度が低いままC言語を書いてしまっていたので(最たる例はメモリ解放の意味を理解していない)、&lt;br /&gt;
入社して数カ月はめっちゃ苦しんでC言語とC++を覚え直しました。&lt;/p&gt;
&lt;p&gt;この経験から後輩にはちゃんと理解してほしいと思い後輩のサポートを進んでやるようにしていました &lt;del&gt;(新人教育にC言語を使うのどうなの...)&lt;/del&gt; 。&lt;/p&gt;
&lt;p&gt;仕事自体はとても楽しく話の合う先輩や後輩もいたので7年間も勤めました。&lt;br /&gt;
今も仲良くしたいと思える人々に出会えて大変幸運だったと思います。&lt;/p&gt;
&lt;p&gt;私は入社まもなくしてVimやLinux、Pythonに惹かれて独学で勉強し始めていて、&lt;br /&gt;
それらはもちろん業務を遂行する上で活かすことはできました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仕事でもほぼVimを使用 (途中からNeovim)&lt;/li&gt;
&lt;li&gt;MakefileをラッパーしたC言語用のUnitTestフレームワークを組み込んだPython製buildスクリプトの作成&lt;/li&gt;
&lt;li&gt;GitLab環境の構築・運用 (dockerを使用)&lt;/li&gt;
&lt;li&gt;GitLab CI (Windows/Linuxクロスプラットフォーム)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;など、先輩や後輩にも手を借りてかなり便利に活用できていました。社内インフラ業もすることがあったので&lt;br /&gt;
そちらもWindowsServerからLinux(Chef+Vagrant+VirtualBox)に移行するなどしました。&lt;/p&gt;
&lt;p&gt;だがしかし、後輩や一部年齢の近い先輩には共感を得られていましたが、&lt;br /&gt;
会社的には評価につながっている様子はなく、いまいち理解されていなかったように見えたので&lt;br /&gt;
技術の変化を受け入れる準備ができていない、または変化させたくなかったのかな...と今になって思います。&lt;/p&gt;
&lt;p&gt;仕事のほうも上記で書いたようにGitLabを使った運用をしていましたが、&lt;br /&gt;
結局最後に引き継ぐときにはGitLabから引き剥がさざるを得なくて微妙な気持ちになりました。&lt;/p&gt;
&lt;p&gt;あとは2人目の出産のため辞める前までの2年間程度、社長に直談判して自宅作業を&lt;br /&gt;
週に1,2日程度やらせていただくことができました(ホント社長に感謝してもしきれないくらい感謝)。&lt;/p&gt;
&lt;p&gt;がドチャクソ特例だったので周りの目がかなりつらくてしんどかったです...&lt;br /&gt;
（応援してくれる方もいたのでなんとか続けられました）。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;そんなこんなでちょうど1年前頃から転職活動を始めて去年の10月に転職しました。&lt;/p&gt;
&lt;p&gt;それがTwitter転職で雑に転職してぇ〜とつぶやいていたところ🍣食べに行こうぜと言われて、&lt;br /&gt;
いっぱい面接して...内定!という流れでした。&lt;/p&gt;
&lt;p&gt;他にもTwitterでお声掛け頂くこともありTiwtter転職すごい実在したという感想です。&lt;br /&gt;
アウトプットしていた甲斐があったなぁと感じました。&lt;/p&gt;
&lt;p&gt;エージェントに登録したりして&lt;br /&gt;
転職活動をするのがめっちゃめんどくて嫌だったのでTwitter転職をやろうと思ったのですが&lt;br /&gt;
まさか成功するとは思ってませんでした。&lt;/p&gt;
&lt;p&gt;趣味でGo、Rust、Nodejs諸々(React, Vuejs)で趣味プロジェクトや&lt;br /&gt;
社内ツールの作成をしていたので、前職とは全然職種の違うFinTech界隈の&lt;br /&gt;
Webフロントエンド寄りエンジニアとして転職できました。ReactとGoを使っています。&lt;/p&gt;
&lt;p&gt;が、とりあえず今慣れるのに必死です。リアルなWebサービスはこんなふうに動いているのか...&lt;br /&gt;
と日々勉強しています。&lt;/p&gt;
&lt;p&gt;あとチーム開発というのも初なのでかなり新鮮な毎日です、7年間ひとり開発だったので色々な人と&lt;br /&gt;
プロジェクトの話をしている時点でもうすでに新鮮です。&lt;/p&gt;
&lt;p&gt;という感じで普通に楽しく働いています。休み多いし、自宅作業も可能で自由度高く働けるのでとりあえず文句なしです。&lt;/p&gt;
&lt;p&gt;あ、文句があるとすると給与が前職と変わらず0.xぱんくし程度なのはなんとかして上げたいです。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Twitterでキーボード転職の話があったので書きますが、履歴書か職務経歴書に自作キーボードの&lt;br /&gt;
話を書いて自作キーボード(Helix)を持参して面接に臨んでいたので自作キーボードを見せて受かった&lt;br /&gt;
という可能性もあります。自作キーボードを持参して面接に望むのはもしかしたらありなのかもしれません。&lt;/p&gt;
&lt;p&gt;今は自社キーキャップ作成してみたりキーボード作成に取り組めそうな気配がありそうでいい感じです。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;退職エントリ書いて見直すと一体なんの意味があるのが謎になってきますね...&lt;/p&gt;
&lt;p&gt;とりあえず私のエンジニア人生第一章 完 したので第二章始まりました。よろしくお願いいたします。&lt;/p&gt;</summary><category term="Poem"></category></entry><entry><title>Zen Keyboard Build log</title><link href="https://muunyblue.github.io/3a1f85dfef891b2a3685ccb35efa807e.html" rel="alternate"></link><published>2018-08-22T13:41:01+09:00</published><updated>2018-08-22T13:41:01+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2018-08-22:3a1f85dfef891b2a3685ccb35efa807e.html</id><summary type="html">&lt;p&gt;&lt;img alt="Zen Keyboard" src="https://pbs.twimg.com/media/Dk7SEiLU8AAAqTr.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Zen Keyboard LED" src="https://pbs.twimg.com/media/DlFqdWxU8AA1VlS.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;LEDの輝きと黒の透過キーキャップを活かして中二ぽい感じに仕上げてみました。&lt;/p&gt;
&lt;p&gt;自分が感じたZen Keyboardの特徴です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;キー数は62keysで自作キーボードの中では過不足ない部類&lt;/li&gt;
&lt;li&gt;設計者が日本人でないため少し大きめ（親指の位置はErgoDoxと同様）&lt;/li&gt;
&lt;li&gt;バックライトが使える&lt;/li&gt;
&lt;li&gt;PCBのみで形成されている&lt;ul&gt;
&lt;li&gt;bottomのPCBプレートが最下面なので厚みが最小限に抑えられ薄い&lt;/li&gt;
&lt;li&gt;アクリルに比べると硬いので打鍵時にぐらつきなどが少なく安定している&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;個人的にZen(またはSol)をおすすめしたい層ですが、ErgoDoxを気に入って使っているが以下のような不満がある人におすすめしたいです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ちょっとキー数多すぎじゃないかと感じる&lt;/li&gt;
&lt;li&gt;ErgoDox分厚いなぁ、もっと薄くならないかなぁ&lt;/li&gt;
&lt;li&gt;リストレストを使っているがリストレスト自体でかいし幅取りすぎと感じる&lt;/li&gt;
&lt;li&gt;キーボード光らせたい&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_1"&gt;購入方法&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.rgbkb.net/products/zen-keyboard"&gt;Zen Keyboard - RGBKB.net&lt;/a&gt;で買うことができます。&lt;/p&gt;
&lt;p&gt;ニューヨークから送られてきたのですが、購入してから2週間程度で届いたので仕事が早くて安心です。&lt;/p&gt;
&lt;p&gt;キットに入ってないもの&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ProMicro(青or黒のクローンでも可)*2&lt;/li&gt;
&lt;li&gt;キースイッチ(バックライトがあるので透明なキースイッチ)*62&lt;/li&gt;
&lt;li&gt;キーキャップ&lt;/li&gt;
&lt;li&gt;2u PCB Mountスタビライザー&lt;/li&gt;
&lt;li&gt;TRRSケーブル(4極)&lt;/li&gt;
&lt;li&gt;Micro USBケーブル&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zenの後継にあたるSolのGBが2018年9月7日まで行われており、いますぐにZenがほしいわけでないならSolがおすすめです。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://www.rgbkb.net/products/the-sol-keyboard-pcb"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;詳細情報 =&amp;gt; &lt;a href="https://www.rgbkb.net/pages/announcing-sol-the-brightest-keyboard-on-earth"&gt;Announcing Sol, the brightest keyboard on earth - RGBKB.net&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Solはすごいです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OLED対応&lt;/li&gt;
&lt;li&gt;USB Type-C化(モゲ対策)&lt;/li&gt;
&lt;li&gt;LEDの量もZenより多い、1keyに1つ&lt;/li&gt;
&lt;li&gt;Undergrowまでついててめっちゃ光る（そのかわり給電をパワーアップさせるアダプターがないと全部光らないようなのでそちらも一緒にGBしてるようです）&lt;/li&gt;
&lt;li&gt;しかもロープロ対応&lt;/li&gt;
&lt;li&gt;割と安い(?)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_2"&gt;ビルド方法&lt;/h1&gt;
&lt;p&gt;本家ドキュメントが英語なので少し詳しめに書いていきます。自分が参考にした資料と動画は以下です。&lt;br /&gt;
- &lt;a href="https://legonut.gitbooks.io/zen-keyboard/content/"&gt;Zen Keyboard Build Guide&lt;/a&gt; (公式ドキュメント)&lt;br /&gt;
- &lt;a href="https://www.youtube.com/watch?v=1tDWJe_P5PQ"&gt;Zen Keyboard Build Log&lt;/a&gt; (動画)&lt;/p&gt;
&lt;p&gt;パーツがかなり小さく、各プレートははんだづけで完全に固定されてしまい組み立て後は修正不可能な状態になるので組み立て難易度は高めに感じました。&lt;/p&gt;
&lt;p&gt;参考までに作業時間は一気に作ってだいたい5,6時間程度でした。&lt;/p&gt;
&lt;h2 id="0"&gt;0. 組み立て前に&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;まずは&lt;a href="https://giant.gfycat.com/MindlessChillyHypacrosaurus.webm"&gt;この動画&lt;/a&gt;を見てください。&lt;/strong&gt;(webm形式なので対応していないブラウザでは見れないかもです)&lt;/p&gt;
&lt;p&gt;この動画は公式ドキュメントの&lt;a href="https://legonut.gitbooks.io/zen-keyboard/content/chapter1/final-assembly.html"&gt;Final assembly&lt;/a&gt;にリンクされている動画なのですが何故かSoldering(はんだづけ)の章のあとの章なので見逃す可能性が高いです、めっちゃイメージが湧くので組み立て前に見ましょう。必ず見ましょう。&lt;/p&gt;
&lt;p&gt;あと、各部品(ダイオード、LED、抵抗、3叉のピン)は左右で1つずつ余る(計2つ余る)分量しか入っていないので故障がないように、温調はんだごてを使用し温度を適切に保つようにしたほうが良いです。(自分は基本270℃、LEDだけ220℃あたりでやりました、温度で故障しないでできました)&lt;/p&gt;
&lt;p&gt;以下説明に使う画像はProMicro取り付けの画像を除き左右の区別はつけていません、しかしProMicro以外は左右対称ですので問題ないはずです。&lt;/p&gt;
&lt;h2 id="1-middle"&gt;1. Middleプレートにダイオードをはんだづけ&lt;/h2&gt;
&lt;p&gt;Middleプレートはサイズが他よりひと回り小さく四角い穴が空いているプレートになります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;そしてすべてのパーツは上面にはんだづけします。&lt;/strong&gt;(以下の写真がMiddleプレート左手側の上面です)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Middleプレート" src="https://pbs.twimg.com/media/Dk5JYkVUYAAi8NO.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;ダイオードはSMD(表面実装)になります。向きは&lt;strong&gt;取り付ける部分の両脇にガイド線(白)があり、線が長くなっているほうにダイオードの線が刻まれている部分(カソード)がくるように取り付けます。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ダイオードの向き" src="https://pbs.twimg.com/media/Dk5JZm-V4AAdKOi.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;写真では光の加減と小さすぎてわかりづらいですが白の線が長くなっているほうにダイオードのカソードがきています。&lt;/p&gt;
&lt;p&gt;ちなみに白のPCBを買うとガイド線は黒になります。&lt;/p&gt;
&lt;p&gt;SMDダイオードはんだづけは片方のランドに予備ハンダしてからピンセットで予備ハンダした部分を溶かしながらつけるのが個人的にはおすすめです(参考にした動画もその方法ではんだづけしているので見てみると良いかもです)。&lt;/p&gt;
&lt;h2 id="2-middlepromicro"&gt;2. MiddleプレートにProMicroを取り付ける&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;ProMicroはMiddleプレートの上面につけます。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ProMicroの表裏の向きは左と右で異なります。&lt;strong&gt;左側はProMicroの部品がついている面が上、右側はProMicroの平らで何もついていない面が上になります。&lt;/strong&gt;&lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;Middleプレート下面はBottomプレートと接しますので下面をはんだづけする際ははんだを盛りすぎないように注意してください。&lt;/p&gt;
&lt;p&gt;はんだごてでピンを熱しながらそこにはんだを流し込むと良いとドキュメントに書いてあります。温調はんだごてを使っている場合は少し高めの温度に設定してやると良いかもしれません。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img alt="左のProMicro" src="https://pbs.twimg.com/media/DlL7sAgUYAAlaIw.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;左のProMicroは付属のピンヘッダの黒い部分を使いません、&lt;strong&gt;そのまま裏面の平らな面とMiddleプレートを密着させるように取り付けます。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;取り付けるとMiddleプレートの下面に黒い部分とあまりのピンが結構はみ出るのでペンチで黒い部分を取り除き、ニッパーでピンを切り落とします。&lt;/p&gt;
&lt;p&gt;&lt;img alt="右のProMicro" src="https://pbs.twimg.com/media/DlL7rNGU0AI3Q9s.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;右のProMicroはピンヘッダの黒い部分をPCBとProMicroの間にはさみます。&lt;strong&gt;MiddleプレートとProMicroの間にピンヘッダの黒い部分でスペースができるように取り付けます。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;取り付けるとMiddleプレート下面にピンがはみ出ますのでニッパーで切り落とします。&lt;/p&gt;
&lt;p&gt;取り付けたらProMicroの3Dプリンタカバーがはまるか確認します、黒のProMicroを使用しましたが上部にはみ出たピンヘッダを少しニッパーでカットすればしっかりはまりました。&lt;/p&gt;
&lt;h2 id="3-middletrrs"&gt;3. MiddleプレートにTRRSジャックを取り付ける&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Middleプレートの上面&lt;/strong&gt;にTRRSジャックを取り付けます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="TRRSジャック" src="https://pbs.twimg.com/media/DlL7213U4AASVSq.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;ここまで取り付けたらダイオードの向きに間違いがないか確認すると良いです。&lt;/p&gt;
&lt;p&gt;ProMicroが取り付けられているので一旦Zenのファームウェアを書き込んで導通チェックをしましょう。ファームウェアの書き込み方について簡単にですがこの記事の一番最後に書いてあります。&lt;/p&gt;
&lt;h2 id="4-middle"&gt;4. Middleプレート下面のジャンパ&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Middleプレート下面&lt;/strong&gt;のProMicroを取り付けた真裏(PCB下面)をガイド線に従ってジャンパします。ジャンパするランド間に少し距離があるので先程カットしたProMicroのピンヘッダの切れ端を使うと良いです。右側のピンヘッダの切れ端がちょうど良い長さでした。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ピンヘッダの切れ端" src="https://pbs.twimg.com/media/DlL71XQU0AAVIYi.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;ガイド線がある部分をジャンパします。切れ端をガイド線部分のランドの間に置いてはんだを盛っていきます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="ジャンパ" src="https://pbs.twimg.com/media/DlL72ALU8AAsQ4W.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;公式のBuild Guideで何故かVCCのところにもはんだを盛っていたのですが必要なのか不明です。(なんか不安なので自分は盛りました)&lt;/p&gt;
&lt;h2 id="5-bottomled"&gt;5. BottomプレートにLEDと抵抗を取り付ける&lt;/h2&gt;
&lt;p&gt;取り付けるパーツの中では難易度が一番高いです、抵抗がすごく小さいので必要な人はルーペがあったほうが良いかもしれません。&lt;/p&gt;
&lt;p&gt;&lt;img alt="LEDと抵抗https://pbs.twimg.com/media/Dk5QHrEUYAACrWG.jpg" src="https://pbs.twimg.com/media/Dk5QHrEUYAACrWG.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;抵抗には上下左右どちらも向きはありませんが、&lt;strong&gt;LEDには向きがあります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LEDの切れ込みが入っている部分をLEDを付ける部分の内側にある四角いガイド線の書けている部分に合わせて取り付けます。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;抵抗が小さすぎて大変ですが以下のようなはんだづけの技をDiscordのSelf-Made Keyboardチャンネルで教えていただきましたので参考にすると良いと思います。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://www.youtube.com/watch?v=MYlIxjXj-Ik"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;自分は完成後に伝授してもらったので一箇所ておくれてしまいました・・・&lt;/p&gt;
&lt;h2 id="6-led"&gt;6. LED動作確認&lt;/h2&gt;
&lt;p&gt;MiddleプレートとBottomプレートは3叉のピンでつなぐのですが、通信し合う部分はTRRSケーブルのすぐ近くの穴になります。&lt;/p&gt;
&lt;p&gt;この部分に3pinのピンヘッダを指してMiddleプレートとBottomプレートをつないで電源をいれるとLEDの動作確認ができます。&lt;/p&gt;
&lt;p&gt;はんだで完全につなぐわけではないのでちょっとした反動で途切れてしまいますが、全点灯するか確認して点灯しなければ間違いを探します。&lt;/p&gt;
&lt;p&gt;LEDの光る順番ですが、TRRSケーブルから一番近いLEDから始まり上部に行きそこからぐるっと親指キー部分まで一周するような順番になっています。&lt;/p&gt;
&lt;p&gt;一箇所違うとそこからさきは光らないのでその順番を頼りに修正していくと良いかと思います。&lt;/p&gt;
&lt;p&gt;3.に書いたダイオードの動作確認とLEDの動作確認がしっかりできてから次のステップに進んでください。以降のステップに進むと修正が難しくなってきます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="点灯の様子" src="https://pbs.twimg.com/media/DlMEwPnUcAAcPMS.jpg" /&gt;&lt;/p&gt;
&lt;h2 id="7-middle3"&gt;7. Middleプレートに3叉のピンを取り付ける&lt;/h2&gt;
&lt;p&gt;Middleプレートにはんだづけして固定するのですが、まずはBottomプレートに長い方が下になるように3叉のピンを差し込みます。&lt;/p&gt;
&lt;p&gt;(ピンを差し込む箇所はいっぱいあるので全部使う必要はないと公式ドキュメントに書いてありますがせっかくなので自分は全部使いました。)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bottomプレートにピンを差し込む" src="https://pbs.twimg.com/media/Dk5oL4pU4AAPPrh.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;差し込んだらMiddleプレートを重ねます。差し込んだら上面からピンをMiddleプレートにはんだづけします。&lt;/p&gt;
&lt;p&gt;このとき重ねたMiddleプレートとBottomプレートの下にはみ出たピンより少し高いくらいの台を置かないとピンからBottomプレートが抜けてしまうので注意です、自分は場合はペンチを下に敷いてはんだづけしました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Middleプレートにピンをはんだづけ" src="https://pbs.twimg.com/media/DlMExL3U8AA2ani.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;このときTRRSケーブルに一番近い部分のピンは必ず3箇所はんだづけをしてください。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;はんだづけしたらBottomプレートを外して、ペンチでピンについた黒い部分を取ります。以下の画像ははんだづけ後黒い部分を取り除いている最中のMiddleプレート下面です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="はんだづけ後のMiddleプレート下面" src="https://pbs.twimg.com/media/Dk5oRnIVsAIqCHV.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;自分はTRRSケーブルに近いピン以外は2箇所だけのはんだづけにしました。&lt;/p&gt;
&lt;h2 id="8-middle"&gt;8. Middleプレートにスタビライザーを取り付ける&lt;/h2&gt;
&lt;p&gt;親指キー部分にスタビライザーを取り付けます。参考にした動画では両面テープで取り付けているように見えるのですが自分はそのままつけました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="スタビライザー" src="https://pbs.twimg.com/media/Dk57mgmV4AEVTns.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;何か作法(部品と干渉しないようにするなど)があるかもしれないので各自調べたほうが良いかもしれません。&lt;/p&gt;
&lt;h2 id="9"&gt;9. スイッチを取り付ける&lt;/h2&gt;
&lt;p&gt;Topプレートにスイッチをはめ込み、Middleプレートと合体します。一番外側のスイッチは1uのサイズか1.5uのサイズが選ぶことができます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Topプレート" src="https://pbs.twimg.com/media/Dk57nkBU0AAMIqd.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;上の画像ではまっているスイッチはTopプレートにはめ込むのが大変なので先にはめ込みました。&lt;/p&gt;
&lt;p&gt;下の画像にあるように、それ以外の外側と親指のスイッチは簡単にはまったのでMiddleプレートにはめ込んでからつけました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Middleプレートと合体" src="https://pbs.twimg.com/media/Dk57oqWU0AEvP5t.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;自分の場合、スイッチが5pinだったので先にTopプレートにほどんどを取り付けてからのほうがはめ込みやすかったです。&lt;/p&gt;
&lt;p&gt;TopプレートとMiddleプレートがしっかり合体したのが確認できればスイッチをMiddleプレートにはんだづけします。&lt;/p&gt;
&lt;h2 id="10-bottom"&gt;10. Bottomプレートと合体&lt;/h2&gt;
&lt;p&gt;Middleプレートにつけた3叉のピンをBottomプレートに通して合体します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="合体" src="https://pbs.twimg.com/media/Dk58J4mU4AEV8Yv.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;自分の場合、できる限りピタッとくっつけたいですが完全にぴったりとはいきませんでした。できるだけ近い状態でピンをはんだづけして固定しました。&lt;/p&gt;
&lt;p&gt;はんだづけが完了したらはみ出たピンをニッパーできれいにカットします。&lt;/p&gt;
&lt;p&gt;&lt;img alt="完成" src="https://pbs.twimg.com/media/Dk58LATUwAIjkKg.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;USBケーブルをつないで光ってスイッチがちゃんと動作するのを確認します。&lt;/p&gt;
&lt;h2 id="11"&gt;11. キーキャップをつけて完成&lt;/h2&gt;
&lt;p&gt;キースイッチはKBDfansで以下のキーキャップを購入しました。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://kbd.fans/collections/keycaps/products/front-side-printed-backlit-keycaps-104-87-iso-ansi-layout-translucidus-backlit-keycaps-for-corsair-strafe-k65-k70-logitech-g710"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;ZenはLEDがついているので透過するタイプのキーキャップを選びました、しかも側面印字でRealforceに憧れを抱いていた自分にとっては良きものでした。&lt;/p&gt;
&lt;h1 id="_3"&gt;ファームウェア書き込み&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/qmk/qmk_firmware/tree/master/keyboards/zen"&gt;Zen Keyboard - qmk/qmk_firmware&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;QMKにZenのファームウェアがあるので書き込めば良いのですが、Zenにはリセットスイッチがありません。&lt;/p&gt;
&lt;p&gt;初回は手動でProMicroのRSTとGRDをショート(導通線でつなぐ)させる必要があります。&lt;/p&gt;
&lt;p&gt;毎回手動ショートさせるのが面倒なので初回の書き込み時にキー配列に"RESET"を入れるのを忘れないようにします。&lt;/p&gt;
&lt;p&gt;qmk_firmwareをローカルにgit cloneまたはコピーして以下のコマンドで書き込みします(詳細はきっと他に詳しい情報があるので割愛)。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make zen/rev1:default:avrdude
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;defaultキーマップにはレイヤーが2つしかなく少し簡易的なので、"qmk_firmware/keyboards/zen/keymaps"にあるxyverzが多めのレイヤーを用意しているのでそちらをベースにしても良いかもしれません。&lt;/p&gt;
&lt;p&gt;あと最近リファクタリングが入っているので古いqmk_firmwareを使っている人は更新推奨です。&lt;/p&gt;
&lt;p&gt;参考までに自分のキーマップは以下です。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/yymm/my-zen-profile"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;個人的にconfig.hに"#define MASTER_RIGHT"を追加して右側をMasterにするのがおすすめです、理由は右のほうがモゲにくくProMicroが取り付けられているからです。&lt;/p&gt;</summary><category term="Keyboard"></category><category term="Zen"></category></entry><entry><title>Minidoxビルドログ</title><link href="https://muunyblue.github.io/4bfbd52f4e8466dc12aaf30b7e057b66.html" rel="alternate"></link><published>2018-08-17T13:41:01+09:00</published><updated>2018-08-17T13:41:01+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2018-08-17:4bfbd52f4e8466dc12aaf30b7e057b66.html</id><summary type="html">&lt;p&gt;まっしろMinidoxを作りました。かわいい。&lt;/p&gt;
&lt;p&gt;&lt;img alt="White Minidox" src="https://pbs.twimg.com/media/DknbeqPUYAEm4cM.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;ちょっと前に&lt;a href="https://booth.pm/ja/items/718976"&gt;Boothで販売していたMinidoxのPCB&lt;/a&gt;を購入していまたのですがやっと組み立て追わったのでビルドログを残しておきます。&lt;/p&gt;
&lt;h1 id="_1"&gt;組み立て編&lt;/h1&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/y_y_m_m/status/1025401830723936256"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;基本的に&lt;a href="https://imgur.com/a/vImo6#Rfd586V"&gt;Minidox Build log/guide&lt;/a&gt;を見て組み立てればokなので、個人的に気をつけた点のみ書いていきます。&lt;/p&gt;
&lt;p&gt;英語がわからない場合はGoogle翻訳に突っ込むとなんとなくわかったので英語がよくわからない場合でも上記のBuild log/guideで問題ないと思います。&lt;/p&gt;
&lt;h2 id="_2"&gt;ダイオード折り曲げ&lt;/h2&gt;
&lt;p&gt;ダイオードの足をPCBに指定されているに折り曲げる必要があるのですが手で地道に折り曲げていくのは苦痛なのでいっぺんに折り曲げる方法を紹介します。&lt;/p&gt;
&lt;p&gt;折り曲げ幅はPCBを重ねて4枚分の幅なので今から組み立てるMinidoxのPCB2枚とPCB幅くらいの何かを2つ用意します。&lt;/p&gt;
&lt;p&gt;ちょうどZen KeyboardのPCBがあったので私はそれを使いました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="pcb folding" src="https://pbs.twimg.com/media/DjpYxdOU8AEuYy-.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;間のPCB2枚分を隙間にしておくとダイオードがぴったりはまって調子良いです。&lt;/p&gt;
&lt;h2 id="promicro"&gt;ProMicroの向き&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;左右で裏表が逆になります。&lt;/strong&gt;Build log/guideの画像は左側のみしか載せていないので注意です。&lt;/p&gt;
&lt;p&gt;あと、&lt;strong&gt;ProMicroはSwitchをハンダ付けしてからPCBにハンダ付けします。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先にProMicroの足をハンダ付けするのですがそのままの勢いでProMicro本体までハンダ付けしてしまわないように注意です。&lt;/p&gt;
&lt;h1 id="_3"&gt;ケース編&lt;/h1&gt;
&lt;p&gt;ケースはアクリルサンドイッチでなく3Dプリンタケースにしました。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/pjones/minidox-case"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;モデリング経験はないのでここにあるデータをそのまま使いました。必要なファイルは以下になります。(coverなしの場合)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stls/case/case-left.stl&lt;/li&gt;
&lt;li&gt;stls/case/case-right.stl&lt;/li&gt;
&lt;li&gt;stls/top/top-left.stl&lt;/li&gt;
&lt;li&gt;stls/top/top-right.stl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作成はDMM.makeにしてみました。注文方法は上記のstlファイルをDMM.makeにアップロードして確認メールを正常に受け取ったら注文するだけです。材質は一番安いナイロンのナチュラルカラーにしました。&lt;/p&gt;
&lt;p&gt;一番安い素材でもこのサイズのケースになると合計で15,000円近くなるので3Dプリンタを自宅に欲しくなりました。&lt;/p&gt;
&lt;p&gt;届いたケースの写真です。だいたい1週間程度で届きました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="case" src="https://pbs.twimg.com/media/Dkxk21OUYAEHoiU.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="top" src="https://pbs.twimg.com/media/Dkxk3crUwAIvFfp.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;発注直後あたりに薄くて壊れやすい箇所があるけど大丈夫？ってメールが届いたのでそのままお願いしますというやり取りが1回ありました。&lt;/p&gt;
&lt;p&gt;実際に結構薄っぺらい箇所がありますが問題なく仕上がっていました、すごい。&lt;/p&gt;
&lt;h2 id="pcb"&gt;ケースとPCBの干渉&lt;/h2&gt;
&lt;p&gt;残念ながら内側を少し削らないとケースにちゃんと収まりません。ちょっと写真が分かりづらいかもですが削った箇所の写真です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="shave1" src="https://pbs.twimg.com/media/Dkxk4NBUwAEHsV_.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="shave2" src="https://pbs.twimg.com/media/Dkxk4w6UUAE3MCI.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;ちょうど良い道具がなかったのでニッパーとカッターでガリガリ削りました・・・結構削りやすいので彫刻刀やサンドペーパーで削るときれいに削れるのではないかと思います。&lt;/p&gt;
&lt;p&gt;削る箇所ですが、Switch足(ハンダ付けしてない部分)がケース内側のPCBが乗るでっぱり部分にあたってしまう箇所があるのでそこを削りました。蛍光ペンとかでSwitch足に軽く色をつけて載せてみると干渉箇所がよくわかります。&lt;/p&gt;
&lt;p&gt;Switchの足を削る手もあったのですがPCBを傷つけそうなのでやめました。&lt;/p&gt;
&lt;h2 id="pjonesminidox-case"&gt;pjones/minidox-case&lt;/h2&gt;
&lt;p&gt;このケースに関して気になったこと一覧です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ケースはネジ止めできサイズはM3です&lt;/li&gt;
&lt;li&gt;ネジはなくても割と安定してはまります&lt;/li&gt;
&lt;li&gt;リセットスイッチは薄型でコンパクトなものでないと取り付けられません&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.co.jp/uxcell-uxcell-%E3%82%BF%E3%82%AF%E3%83%88%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81-%E8%A7%A6%E8%A6%9A%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81-%E7%9E%AC%E9%96%93-%E3%83%96%E3%83%A9%E3%83%83%E3%82%AF-3-5mm%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%AE%E7%9B%B4%E5%BE%84-6mmx6mmx4-3mm-50%E5%80%8B/dp/B076GXYKKX"&gt;これ&lt;/a&gt;はだめ&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.co.jp/uxcell-SPST-%E3%82%BF%E3%82%AF%E3%83%88%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81-SMT-%E7%9E%AC%E6%99%82%E7%9A%84%E3%81%AA-5x5x1-5mm-20%E5%80%8B%E5%85%A5/dp/B00OK6D912/ref=sr_1_21?ie=UTF8&amp;amp;qid=1534299688&amp;amp;sr=8-21&amp;amp;keywords=%E3%82%BF%E3%82%AF%E3%83%88%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81"&gt;こっち&lt;/a&gt;は試してないですが大丈夫かも&lt;/li&gt;
&lt;li&gt;一度ファームウェアを焼いてしまえばキー配列にリセットボタンをつけられる無理につけなくても良いかもしれません(初回は手動リセットになりますが・・・)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PCBに直接Switchを乗せるPCBマウントの取り付け方になるのでSwitchは5pinを購入する必要があります&lt;/li&gt;
&lt;li&gt;ナイロン素材は滑るのでゴム足が必要です&lt;/li&gt;
&lt;li&gt;上蓋とキーが干渉することがあり、上蓋の一部をかち割りたくなったりします&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_4"&gt;キー配列&lt;/h1&gt;
&lt;p&gt;まだ試行段階ですが以下のようになっています。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/yymm/my-minidox-profile"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;この記事もMinidoxで書いていますが明らかにキー数が足りてない感が否めません・・・せめてCrkbdくらい欲しくなります。&lt;/p&gt;
&lt;p&gt;明らかにキー数がなりないのでLayer以外のQMKの機能を活用したくなってきます、いくつか使った機能を紹介します。&lt;/p&gt;
&lt;h2 id="mod-tap"&gt;Mod Tap&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/qmk/qmk_firmware/blob/master/docs/feature_advanced_keycodes.md#mod-tap"&gt;Mod Tap - qmk_firmware&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mod Tapとは長押しするとCtrlやShiftのようなModifierキー(修飾キー)になって短くタップすると指定した任意キーになるという機能です。&lt;/p&gt;
&lt;p&gt;個人的には、CtrlとTab、AltとEsc、などを組み合わせるのが便利です。以下keycodeです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// CtrlとTab&lt;/span&gt;
&lt;span class="n"&gt;CTL_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KC_TAB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// AltとEsc&lt;/span&gt;
&lt;span class="n"&gt;ALT_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KC_ESC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tab待ち受け時間はconfig.hに設定を追加すると調整できます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#ifdef TAPPING_TERM&lt;/span&gt;
&lt;span class="cp"&gt;#undef TAPPING_TERM&lt;/span&gt;
&lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="c1"&gt;// TAPPING_TERM&lt;/span&gt;
&lt;span class="cp"&gt;#define TAPPING_TERM 200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="lt"&gt;LT&lt;/h2&gt;
&lt;p&gt;Mod TapのLayer版です。以下、LOWERとSpaceの例です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// LOWERとSpace&lt;/span&gt;
&lt;span class="n"&gt;LT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_LOWER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;KC_SPC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;LTを使う際の注意は、SAFE_RANGEからラベリングされているcustom_keycodeの"LOWER"という変数ではなく、Oからラベリングされているlayer_numberの"_LOWER"の変数を使います。&lt;/p&gt;
&lt;h1 id="switch-zilent-78g"&gt;Switch: Zilent 78g&lt;/h1&gt;
&lt;p&gt;遊舎工房産の元気なZilentです。&lt;/p&gt;
&lt;p&gt;&lt;img alt="zilent minidox" src="https://pbs.twimg.com/media/Djr1nG9VsAAw44P.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;個人的に前からSilent軸はすごく気になっていて遊舎工房さんで扱い始めて簡単に試すことができ嬉しいです。&lt;/p&gt;
&lt;p&gt;(というか国内でキースイッチが爆速で買えるの本当に凄い・・・)&lt;/p&gt;
&lt;p&gt;感想ですが、Zilentめっちゃ静かです。静かすぎてびっくりしています。今回Minidoxにつけたのは一番重い78gなのでなおさら静かなのかもしれません。&lt;/p&gt;
&lt;p&gt;静音リングをましましにつけていた自分にとってはぴったりな軸でした!&lt;/p&gt;
&lt;p&gt;一番軽いのも買ったので試しにつけてみた絵です。水色かわいい。かわいい。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/y_y_m_m/status/1025602161634201601"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;軽いのも良さそうでしたがなんとなく白黒で揃えたかったので、また別のキーボードに乗せることにしました。&lt;/p&gt;
&lt;p&gt;ZilentはTactileのSilent軸ですが、LinearのSilent軸も気になるのでKBDfansでGateron赤Silentが売っているので何かの機会に購入したいなぁと思っています。&lt;/p&gt;
&lt;h1 id="keycaps"&gt;白Keycaps&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://talpkeyboard.stores.jp/"&gt;TALP KEYBOARD&lt;/a&gt;で注文しました。&lt;/p&gt;
&lt;p&gt;DSAの白です、最近XDAもキーキャップも扱いだしていて気になります。1.5uのMacぽい印字のあるキーキャップも欲しかったのですが売り切れていたのでそっちはKBDfansで注文しました。&lt;/p&gt;
&lt;p&gt;ここまで来るとわかりますが、minidoxの素材は&lt;strong&gt;ほぼすべて日本で手に入っています。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;国内で自作キーボードのパーツがほぼほぼ買えるってかなりすごいと思います。しかもすぐ届く。自作キーボードの時代きてますね。&lt;/p&gt;
&lt;h1 id="_5"&gt;ケーブル&lt;/h1&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://www.amazon.co.jp/gp/product/B07BJZFQ7N/ref=oh_aui_detailpage_o00_s00"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;Minidoxは4極のケーブルを使います。せっかくなので白いケーブルを買いました。&lt;/p&gt;
&lt;h1 id="minidox"&gt;Minidox所感&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;小さくてかわいい&lt;/li&gt;
&lt;li&gt;とにかく小さい、小さすぎる&lt;/li&gt;
&lt;li&gt;とにかくキー数足りない、少なすぎる、36キーって・・・&lt;/li&gt;
&lt;li&gt;ErgoDoxでキー数多すぎって思ってたけどこれはやりすぎでは・・・&lt;/li&gt;
&lt;li&gt;3Dプリンタケース良いかも&lt;/li&gt;
&lt;li&gt;Silent軸は本当に静かなので良い&lt;/li&gt;
&lt;li&gt;Helixユーザー的にはもう少し高さが低いほうが良いなぁと感じる&lt;/li&gt;
&lt;li&gt;特に意味はないが手元にLEDテープがあるので光らせたい&lt;/li&gt;
&lt;li&gt;写真がうまく撮れてないのでそのうち写真差し替えるかも&lt;/li&gt;
&lt;li&gt;Zen Keyboardがそろそろ作れそうなので次はZenのビルドログ書きます&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Keyboard"></category><category term="Minidox"></category></entry><entry><title>Neovim/Vim8で快適Vue.js開発(Vue Language Server)</title><link href="https://muunyblue.github.io/520bae6649b42ff5a3c8c58b7fcfc5a9.html" rel="alternate"></link><published>2018-01-16T10:32:01+09:00</published><updated>2018-01-16T10:32:01+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2018-01-16:520bae6649b42ff5a3c8c58b7fcfc5a9.html</id><summary type="html">&lt;p&gt;&lt;a href="https://muunyblue.github.io/48dd34fa4a5fc8e0045aba1952e1818e.html"&gt;VimでLanguage Serverを活用する(Rust, Vue.js)&lt;/a&gt;で中途半端にしていたVue.js開発がほぼ完成したのでまとめます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="vls" src="images/vls.gif" /&gt;&lt;/p&gt;
&lt;p&gt;これでVSCode+Veturと同等にVue.js開発ができます。&lt;/p&gt;
&lt;h1 id="languageclient-neovim"&gt;LanguageClient-neovim&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/autozimu/LanguageClient-neovim"&gt;autozimu/LanguageClient-neovim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LSPのクライアントにはこれを使います。&lt;br /&gt;
最近ずっと更新を追っていますが&lt;a href="https://github.com/autozimu/LanguageClient-neovim/issues/35#issuecomment-350525383"&gt;去年の12月&lt;/a&gt;にPythonからRust化しています。&lt;br /&gt;
そこからはnextブランチで活発に開発(2,3日でリリース)が進んでいます。&lt;br /&gt;
なので割と不安定でupdateするとうまく動かなかったりします。が次のバージョンで治ることが多いので2,3日待つと良いです。&lt;/p&gt;
&lt;p&gt;(20180117現在最新ではうまく動かなくてv0.1.27 7d0a5ccを使っています。vim-plugなら'commit': '7d0a5cc', dein.vimなら'rev': '7d0a5cc'を指定しています。)&lt;/p&gt;
&lt;p&gt;Rustで生成されたバイナリはCIで回しているdocker上で生成されていてそれぞれの環境用のバイナリがtagに追加される仕組みになっています。&lt;br /&gt;
install.shでそれぞれの環境にあったバイナリがインストールされる仕組みになっています。&lt;br /&gt;
今日もTravis CIが遅いからかCircle CIを使うようにしていたりしていて開発は活発です。&lt;/p&gt;
&lt;p&gt;特徴は以下の通り&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LSPの仕様網羅&lt;/li&gt;
&lt;li&gt;ALEによるLintサポート&lt;/li&gt;
&lt;li&gt;deoplete.nvim or nvim-completion-managerによる補完&lt;/li&gt;
&lt;li&gt;Vim8サポート(vim-hug-neovim-rpcを利用)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_1"&gt;最小構成&lt;/h1&gt;
&lt;p&gt;この最小構成は割と汎用的でLSPの部分と各言語用のプラグイン部分を置き換えれば他のLanguage Serverを持つ言語の開発にも使えます。&lt;/p&gt;
&lt;h2 id="vim-plug"&gt;vim-plug&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/junegunn/vim-plug"&gt;junegunn/vim-plug&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vim-plug自体のインストール方法はREADMEにあります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;autozimu/LanguageClient-neovim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; {
    \ &lt;span class="s1"&gt;&amp;#39;branch&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;next&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    \ &lt;span class="s1"&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;bash install.sh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    \ }
Plug &lt;span class="s1"&gt;&amp;#39;Shougo/deoplete.nvim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;:UpdateRemotePlugins&amp;#39;&lt;/span&gt; }
Plug &lt;span class="s1"&gt;&amp;#39;w0rp/ale&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;posva/vim-vue&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; for deoplete.nvim&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:deoplete#enable_at_startup &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; for LanguageClient-neovim&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:LanguageClient_serverCommands &lt;span class="p"&gt;=&lt;/span&gt; {
    \ &lt;span class="s1"&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;: [&lt;span class="s1"&gt;&amp;#39;vls&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
    \ }
&lt;span class="c"&gt;&amp;quot; not stop completion $ &amp;amp; /&lt;/span&gt;
&lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;iskeyword&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;$
&lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;iskeyword&lt;/span&gt;&lt;span class="p"&gt;+=-&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="deinvim"&gt;dein.vim&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/Shougo/dein.vim"&gt;Shougo/dein.vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こちらもREADMEにインストール方法が書いてあります。&lt;br /&gt;
installer.shの引数に、'~/.vim/bundle'を指定しています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;compatible&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nocompatible&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;runtimepath&lt;/span&gt;&lt;span class="p"&gt;+=~&lt;/span&gt;&lt;span class="sr"&gt;/.vim/&lt;/span&gt;bundle&lt;span class="sr"&gt;/repos/&lt;/span&gt;github.&lt;span class="k"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/Shougo/&lt;/span&gt;dein.&lt;span class="k"&gt;vim&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; dein#load_state&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.vim/bundle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#begin&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.vim/bundle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.vim/bundle/repos/github.com/Shougo/dein.vim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;autozimu/LanguageClient-neovim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; {
    \ &lt;span class="s1"&gt;&amp;#39;rev&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;next&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    \ &lt;span class="s1"&gt;&amp;#39;build&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;bash install.sh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    \ }&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Shougo/deoplete.nvim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;w0rp/ale&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;posva/vim-vue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;call&lt;/span&gt; dein#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#save_state&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;

&lt;span class="k"&gt;filetype&lt;/span&gt; plugin indent &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="nb"&gt;syntax&lt;/span&gt; enable

&lt;span class="c"&gt;&amp;quot; for deoplete.nvim&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:deoplete#enable_at_startup &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; for LanguageClient-neovim&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:LanguageClient_serverCommands &lt;span class="p"&gt;=&lt;/span&gt; {
    \ &lt;span class="s1"&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;: [&lt;span class="s1"&gt;&amp;#39;vls&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
    \ }
&lt;span class="c"&gt;&amp;quot; not stop completion $ &amp;amp; /&lt;/span&gt;
&lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;iskeyword&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt;$
&lt;span class="k"&gt;setlocal&lt;/span&gt; &lt;span class="nb"&gt;iskeyword&lt;/span&gt;&lt;span class="p"&gt;+=-&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;私の設定は以下になります、dein.vimでtomlファイルでプラグインをロードする構成になっています。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/yymm/.dotfiles/tree/master/config/nvim"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h1 id="vue-language-server-vls"&gt;vue-language-server (VLS)&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install -g vue-language-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでNeovimでVueファイルを編集すれば、冒頭にあるgifのような補完やLintができるようになります。&lt;/p&gt;
&lt;h1 id="optional-snippet"&gt;Optional: Snippet&lt;/h1&gt;
&lt;p&gt;LanguageClientのSnippetはdeopleteの普通の補完候補に回ってしまいうまくいきません。&lt;br /&gt;
neosnippetを使用します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; vim-plug&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;Shougo/neosnippet.vim&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;Shougo/neosnippet-snippets&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; dein.vim&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Shougo/neosnippet.vim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Shougo/neosnippet-snippets&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="vue-snippet" src="images/vue-snippet.gif" /&gt;&lt;/p&gt;
&lt;p&gt;最近のPRで対応したので補完されなかったらアップデートすると良いです。&lt;/p&gt;
&lt;h1 id="optional-vim8"&gt;Optional: Vim8対応&lt;/h1&gt;
&lt;p&gt;Vim8のときだけ&lt;a href="https://github.com/roxma/vim-hug-neovim-rpc"&gt;roxma/vim-hug-neovim-rpc&lt;/a&gt;を使います。&lt;br /&gt;
&lt;a href="https://github.com/roxma/vim-yarp"&gt;roxma/vim-yarp&lt;/a&gt;はdeoplete用です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; vim-plug&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nvim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;roxma/nvim-yarp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;roxma/vim-hug-neovim-rpc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; dein.vim&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nvim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  Plug &lt;span class="s1"&gt;&amp;#39;roxma/nvim-yarp&amp;#39;&lt;/span&gt;
  Plug &lt;span class="s1"&gt;&amp;#39;roxma/vim-hug-neovim-rpc&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/roxma/vim-hug-neovim-rpc"&gt;vim-hug-neovim-rpc&lt;/a&gt;はリポジトリを見てわかるようにEXPERIMENTALなので使うか否かは個人の判断に委ねます。&lt;/p&gt;
&lt;h1 id="optional-additional-setting"&gt;Optional: Additional setting&lt;/h1&gt;
&lt;p&gt;deopleteとneosnippet、LanguageClient-neovimの設定です。&lt;/p&gt;
&lt;p&gt;tab補完とC-kでSnippet補完ができます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; deoplete.vim&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:deoplete#enable_at_startup &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; &amp;lt;TAB&amp;gt;: completion.&lt;/span&gt;
&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;expr&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;TAB&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      \ pumvisible&lt;span class="p"&gt;()&lt;/span&gt; ? &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-n&amp;gt;&amp;quot;&lt;/span&gt; :
      \ &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;check_back_space&lt;span class="p"&gt;()&lt;/span&gt; ? &lt;span class="s2"&gt;&amp;quot;\&amp;lt;TAB&amp;gt;&amp;quot;&lt;/span&gt; :
      \ deoplete#manual_complete&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:check_back_space&lt;span class="p"&gt;()&lt;/span&gt; abort &lt;span class="c"&gt;&amp;quot;{{{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;col&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="k"&gt;col&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; getline&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;[&lt;span class="k"&gt;col&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;]  &lt;span class="p"&gt;=~&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\s&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;&amp;quot;}}}

&lt;span class="c"&gt;&amp;quot; &amp;lt;S-TAB&amp;gt;: completion back.&lt;/span&gt;
&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;expr&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;S&lt;span class="p"&gt;-&lt;/span&gt;TAB&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  pumvisible&lt;span class="p"&gt;()&lt;/span&gt; ? &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-p&amp;gt;&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-h&amp;gt;&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; &amp;lt;BS&amp;gt;: close popup and delete backword char.&lt;/span&gt;
&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;expr&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;BS&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; deoplete#smart_close_popup&lt;span class="p"&gt;()&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-h&amp;gt;&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; &amp;lt;CR&amp;gt;: close popup and save indent.&lt;/span&gt;
&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;r&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;=&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;my_cr_function&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:my_cr_function&lt;span class="p"&gt;()&lt;/span&gt; abort
  &lt;span class="k"&gt;return&lt;/span&gt; deoplete#cancel_popup&lt;span class="p"&gt;()&lt;/span&gt; . &lt;span class="s2"&gt;&amp;quot;\&amp;lt;CR&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; neosnippet.vim&lt;/span&gt;
imap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;neosnippet_expand_or_jump&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;smap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;neosnippet_expand_or_jump&lt;span class="p"&gt;)&lt;/span&gt;
xmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;neosnippet_expand_target&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:neosnippet#enable_snipmate_compatibility &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:neosnippet#enable_completed_snippet &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:neosnippet#expand_word_boundary &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; LanguageClient-neovim&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:LanguageClient_serverCommands &lt;span class="p"&gt;=&lt;/span&gt; {
    \ &lt;span class="s1"&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;: [&lt;span class="s1"&gt;&amp;#39;vls&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
    \ }
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; K :&lt;span class="k"&gt;call&lt;/span&gt; LanguageClient_textDocument_hover&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;gd&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; LanguageClient_textDocument_definition&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;F2&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="k"&gt;call&lt;/span&gt; LanguageClient_textDocument_rename&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vim自体の設定は各人にお任せしますが一応設定例を紹介します =&amp;gt; &lt;a href="https://github.com/yymm/.dotfiles/blob/master/config/nvim/options.rc.vim"&gt;options.rc.vim&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="optional-context_filetypevim"&gt;Optional: context_filetype.vim&lt;/h1&gt;
&lt;p&gt;context_filetype.vimを使用するとLC以外の本来deopleteが出す補完候補もでるようになりますが&lt;br /&gt;
併用する補完する場合、少しトリッキーなことをしなければなりません。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:LanguageClient_serverCommands &lt;span class="p"&gt;=&lt;/span&gt; {
    \ &lt;span class="s1"&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;: [&lt;span class="s1"&gt;&amp;#39;vls&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
    \ &lt;span class="s1"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;: []&lt;span class="p"&gt;,&lt;/span&gt;
    \ &lt;span class="s1"&gt;&amp;#39;javascript&amp;#39;&lt;/span&gt;: []&lt;span class="p"&gt;,&lt;/span&gt;
    \ &lt;span class="s1"&gt;&amp;#39;css&amp;#39;&lt;/span&gt;: []&lt;span class="p"&gt;,&lt;/span&gt;
    \ }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;空の設定を追加することでcontext_filetype.vimと併用できます。&lt;br /&gt;
補完候補が二重になるケースもありますが、Snippet補完などが出るので便利な場面もあります。&lt;/p&gt;
&lt;p&gt;Ref: &lt;a href="https://github.com/Shougo/deoplete.nvim/issues/609"&gt;https://github.com/Shougo/deoplete.nvim/issues/609&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;かなりトリッキーですが、javascript部分に別のLanguage Serverから補完を流しこんだりもできました。&lt;br /&gt;
context_filetypeすごい・・・&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:LanguageClient_serverCommands &lt;span class="p"&gt;=&lt;/span&gt; {
    \ &lt;span class="s1"&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;: [&lt;span class="s1"&gt;&amp;#39;vls&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
    \ &lt;span class="s1"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;: []&lt;span class="p"&gt;,&lt;/span&gt;
    \ &lt;span class="s1"&gt;&amp;#39;css&amp;#39;&lt;/span&gt;: []&lt;span class="p"&gt;,&lt;/span&gt;
    \ &lt;span class="s1"&gt;&amp;#39;javascript&amp;#39;&lt;/span&gt;: [&lt;span class="s1"&gt;&amp;#39;javascript-typescript-stdio&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
    \ &lt;span class="s1"&gt;&amp;#39;typescript&amp;#39;&lt;/span&gt;: [&lt;span class="s1"&gt;&amp;#39;javascript-typescript-stdio&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
    \ }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こうすると、scriptの部分に&lt;a href="https://github.com/sourcegraph/javascript-typescript-langserver"&gt;javascript-typescript-langserver&lt;/a&gt;の補完を効かせることもできます。&lt;/p&gt;
&lt;p&gt;本来意図している使い方ではない気しかしないので動作の保証はできませんが動いています。。。&lt;/p&gt;
&lt;p&gt;あと地味に同時に編集するjavascriptファイルやtypescriptファイルにもLanguageClientが適用されるので地味に便利です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="context_filetype.vim" src="images/context.gif" /&gt;&lt;/p&gt;</summary><category term="Vim"></category><category term="Neovim"></category><category term="Vue.js"></category></entry><entry><title>VimでLanguage Serverを活用する(Rust, Vue.js)</title><link href="https://muunyblue.github.io/48dd34fa4a5fc8e0045aba1952e1818e.html" rel="alternate"></link><published>2017-12-23T00:56:58+09:00</published><updated>2017-12-23T00:56:58+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-12-23:48dd34fa4a5fc8e0045aba1952e1818e.html</id><summary type="html">&lt;p&gt;遅刻しましたが &lt;a href="https://qiita.com/advent-calendar/2017/vim2"&gt;Vim2 Advent Calendar 2017&lt;/a&gt; 22日目の記事です。&lt;/p&gt;
&lt;p&gt;VSCodeを使っていると知らない間にお世話になっていたりするLanguage Server Protcol(LSP)ですが、便利なので少しずつVimでも活用してみています。&lt;/p&gt;
&lt;p&gt;実際に最近使っているRustとVue.jsの例を紹介をします。&lt;/p&gt;
&lt;p&gt;2018/01 Vue.jsのほうをまとめ直しました =&amp;gt; &lt;a href="https://muunyblue.github.io/520bae6649b42ff5a3c8c58b7fcfc5a9.html"&gt;Neovim/Vim8で快適Vue.js開発(Vue Language Server)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;※ Neovimでしか動作検証してません・・・使っているプラグインはVim対応してるので多分Vimでも動きます&lt;/p&gt;
&lt;h1 id="_1"&gt;プラグイン構成&lt;/h1&gt;
&lt;p&gt;補完とLinterが欲しいので以下のプラグインを入れます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LanguageClient-neovim&lt;/li&gt;
&lt;li&gt;deoplete.nvim&lt;/li&gt;
&lt;li&gt;neosnippet&lt;/li&gt;
&lt;li&gt;ale&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プラグインマネージャーなお好きなものを使うと良いですが、dein.vimでtomlで設定を読んでいる場合以下のようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Shougo/context_filetype.vim&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Shougo/deoplete.nvim&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;depends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;context_filetype.vim&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;on_i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;hook_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;let g:deoplete#enable_at_startup = 1&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Shougo/neosnippet.vim&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;depends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;context_filetype.vim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;on_event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;InsertCharPre&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;on_ft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;snippet&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;autozimu/LanguageClient-neovim&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;depends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;deoplete.nvim&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;on_ft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;rust&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;./install.sh&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;hook_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;set hidden&lt;/span&gt;
&lt;span class="s"&gt;let g:LanguageClient_serverCommands = {&lt;/span&gt;
&lt;span class="s"&gt;    \ &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;vue&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;: [&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;vls&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;],&lt;/span&gt;
&lt;span class="s"&gt;    \ &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;rust&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;: [&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;rustup&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;nightly&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;rls&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;],&lt;/span&gt;
&lt;span class="s"&gt;    \ }&lt;/span&gt;
&lt;span class="s"&gt;let g:LanguageClient_autoStart = 1&lt;/span&gt;
&lt;span class="s"&gt;nnoremap &amp;lt;silent&amp;gt; K :call LanguageClient_textDocument_hover()&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;nnoremap &amp;lt;silent&amp;gt; gd :call LanguageClient_textDocument_definition()&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;nnoremap &amp;lt;silent&amp;gt; &amp;lt;F2&amp;gt; :call LanguageClient_textDocument_rename()&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w0rp/ale&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;今回の話に無関係な設定は消してあります、全設定が知りたい人は↓&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/yymm/.dotfiles/tree/master/config/nvim"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h1 id="languageclient-neovim"&gt;LanguageClient-neovim&lt;/h1&gt;
&lt;p&gt;あまりVimでLSPを使っている人を見たことがないのでデファクトがわからないのですが、勝手にこれをデファクトだと思って使っています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://langserver.org/"&gt;Langserver.org&lt;/a&gt;で紹介されていて全チェック入ってるので全機能使える&lt;/li&gt;
&lt;li&gt;ドキュメントを見る限りVimでもNeovimでも動く&lt;/li&gt;
&lt;li&gt;deoplete.nvimとaleと自動で連携するので便利&lt;/li&gt;
&lt;li&gt;あと多くの部分がRustで書かれていてｶｯｺｲｲ・・・&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同様のプラグインにvim-lspやvim-lscもありますが試していないので、ユーザーの方いたら意見を聞いてみたいです。&lt;/p&gt;
&lt;h1 id="rust"&gt;Rust&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang-nursery/rls"&gt;RLS&lt;/a&gt;を使います。&lt;/p&gt;
&lt;p&gt;完全に便利なのでvim-racerから完全に乗り換えました。&lt;/p&gt;
&lt;p&gt;以下RLSのインストール方法です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% rustup update
% rustup component add rls-preview --toolchain nightly
% rustup component add rust-analysis --toolchain nightly
% rustup component add rust-src --toolchain nightly
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;rustupが入っていない場合は&lt;a href="https://www.rustup.rs/"&gt;ここ&lt;/a&gt;にあるコマンドでインストールします。&lt;/p&gt;
&lt;p&gt;LSPの前にRustを書くときはrust.vimを入れておく必要があります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;rust-lang/rust.vim&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;on_ft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;rust&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;hook_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rustfmt_autosave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;rustfmtを入れて自動で整形するのがおすすめです。&lt;/p&gt;
&lt;p&gt;これでVimを起動すると最高のRust開発環境が待っています。&lt;/p&gt;
&lt;h1 id="vuejs"&gt;Vue.js&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/vuejs/vetur/tree/master/server"&gt;VLS&lt;/a&gt;を使います。&lt;/p&gt;
&lt;p&gt;VLSはVSCodeでVue.js書いたことがある人ならお世話になっているVetur内部のLanguage Serverです。&lt;/p&gt;
&lt;p&gt;単体でインストールできるので下記のコマンドで導入します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install vue-language-server -g
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;deoplete.nvimでvueファイルのような複数言語の混ざったファイルはcontext/_filetype.vimで判定して補完しています。&lt;/p&gt;
&lt;p&gt;vueファイルには対応していなかったので&lt;a href="https://github.com/Shougo/context_filetype.vim/pull/33"&gt;PR&lt;/a&gt;を出して対応しました。&lt;/p&gt;
&lt;p&gt;ハイライトには&lt;a href="https://github.com/posva/vim-vue"&gt;posva/vim-vue&lt;/a&gt;を使います。&lt;/p&gt;
&lt;p&gt;これで万事うまくいけばよかったのですが・・・&lt;/p&gt;
&lt;p&gt;補完がうまく効いていないのが現状です。aleはちゃんと効きます。deoplete.nvimの本来の補完(html,js,css)は効くのでなんとか開発はできます。&lt;/p&gt;
&lt;p&gt;せっかくのアドベントカレンダーでうまく動かない...では残念なので&lt;a href="https://github.com/roxma/nvim-completion-manager"&gt;nvim-completion-manager&lt;/a&gt;を使ってみました。&lt;/p&gt;
&lt;p&gt;deoplete.nvimの部分をnvim-completion-manager(ncm)に置き換えます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;roxma/nvim-completion-manager&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;on_ft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;on_i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;hook_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;inoremap &amp;lt;expr&amp;gt; &amp;lt;CR&amp;gt; (pumvisible() ? &amp;quot;\&amp;lt;c-y&amp;gt;\&amp;lt;cr&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;CR&amp;gt;&amp;quot;)&lt;/span&gt;
&lt;span class="s"&gt;imap &amp;lt;expr&amp;gt; &amp;lt;CR&amp;gt;  (pumvisible() ?  &amp;quot;\&amp;lt;c-y&amp;gt;\&amp;lt;Plug&amp;gt;(expand_or_nl)&amp;quot; : &amp;quot;\&amp;lt;CR&amp;gt;&amp;quot;)&lt;/span&gt;
&lt;span class="s"&gt;imap &amp;lt;expr&amp;gt; &amp;lt;Plug&amp;gt;(expand_or_nl) (cm#completed_is_snippet() ? &amp;quot;\&amp;lt;C-U&amp;gt;&amp;quot;:&amp;quot;\&amp;lt;CR&amp;gt;&amp;quot;)&lt;/span&gt;
&lt;span class="s"&gt;inoremap &amp;lt;c-c&amp;gt; &amp;lt;ESC&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;inoremap &amp;lt;expr&amp;gt; &amp;lt;Tab&amp;gt; pumvisible() ? &amp;quot;\&amp;lt;C-n&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;Tab&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;inoremap &amp;lt;expr&amp;gt; &amp;lt;S-Tab&amp;gt; pumvisible() ? &amp;quot;\&amp;lt;C-p&amp;gt;&amp;quot; : &amp;quot;\&amp;lt;S-Tab&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/y_y_m_m/status/944042507662323712"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;scaffoldやjs補完は効いています。ただ、ncmのcontextの解釈が完全でないためHTML部分で効く補完が弱いです。&lt;/p&gt;
&lt;p&gt;この記事を書きながらncmでは動くなとつぶやいていたらShougoさんがやってきました。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/ShougoMatsu/status/944043865811574784"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/ShougoMatsu/status/944048033393553409"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;Issueあげるアドバイスをもらったので近日中に時間を作ってやります。&lt;/p&gt;
&lt;p&gt;正直deoplete.nvimが好きなのでncmに乗り換えるより、deoplete.nvimで最高のVue.js開発環境にしていきたいので頑張りたいです。&lt;/p&gt;
&lt;p&gt;Vimが最高のVue.js開発環境になったらまた記事を書こうと思います。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Language Server Protcolは補完やLint以外にもrenameや定義参照など便利な機能があるので他の言語も積極的に導入を試みたいと思っています。&lt;/p&gt;</summary><category term="Vim"></category><category term="Neovim"></category><category term="Rust"></category><category term="Vue.js"></category></entry><entry><title>rustifyでWebAssembly - ライフゲームを作る</title><link href="https://muunyblue.github.io/35d58f24d7a7701719c983a1ef1979b1.html" rel="alternate"></link><published>2017-12-11T14:32:15+09:00</published><updated>2017-12-11T14:32:15+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-12-11:35d58f24d7a7701719c983a1ef1979b1.html</id><summary type="html">&lt;p&gt;&lt;a href="https://muunyblue.github.io/8eec1a372e8a99076315db9ea4d24b2c.html"&gt;rustifyで簡単WebAssemblyしてみる&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;続編です、もう少し実践的なライフゲームを作ってみました。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/yymm/rustify-game-of-life"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h1 id="demo"&gt;Demo&lt;/h1&gt;
&lt;p&gt;&lt;img alt="emmo" src="https://github.com/yymm/rustify-game-of-life/raw/master/demo.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Electonで動かしてますが普通にブラウザでも動きます。&lt;/p&gt;
&lt;p&gt;前の記事は試してみただけだったので少し詳しくまとめてみます。&lt;/p&gt;
&lt;h1 id="rustify"&gt;rustifyとは&lt;/h1&gt;
&lt;p&gt;borwserifyのtransformでrustコードをwasmに変換するものです。&lt;/p&gt;
&lt;p&gt;js内にインラインで書いたrustをwasmに変換することもできるので手軽に利用することもできます。&lt;/p&gt;
&lt;p&gt;何をやっているかというと、wasmを生成してwasm-gcを噛ませて元のjsファイルのrustの部分をwasmで置き換えるということをやっています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% rustc +nightly --target wasm32-unknown-unknown &amp;lt;file&amp;gt; --crate-type&lt;span class="o"&gt;=&lt;/span&gt;cdylib --out-dir &amp;lt;outdir&amp;gt;
% wasm-gc &amp;lt;file&amp;gt; &amp;lt;out_file&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;実行しているコマンドはこれだけなので、wasmをfetchやfsでreadFileSyncしてもほぼ同じです。&lt;/p&gt;
&lt;h1 id="rustify_1"&gt;rustifyができそうなこと&lt;/h1&gt;
&lt;p&gt;rustifyはjsのプロジェクトに対して一部分をrust+wasmに置き換えるようなことができそうです。&lt;/p&gt;
&lt;p&gt;webpackなどで行うメインのビルド前に、rustifyで変換をかけてからwebpackビルドに回すみたいなことは簡単にできるので、もともとあるjsプロジェクトの高速化に使えるのでは・・・という感想です。&lt;/p&gt;
&lt;h1 id="_1"&gt;メモリ共有&lt;/h1&gt;
&lt;p&gt;ライフゲームを作るにあたって配列データをwasmとjsで共有する必要があります。emscriptenを使えばModule._mallocを使えるのですがwasm32-unknown-unknownでは使えません。&lt;/p&gt;
&lt;p&gt;正解の方法はわからなかったのでBox\&amp;lt;T&gt;でヒープに確保したarrayの生ポインタを返すことで実現してみました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rust&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rustify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;wasm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rust&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="sb"&gt;const ROW: usize = 10;&lt;/span&gt;
&lt;span class="sb"&gt;const COL: usize = 10;&lt;/span&gt;

&lt;span class="sb"&gt;#[no_mangle]&lt;/span&gt;
&lt;span class="sb"&gt;pub fn allocate() -&amp;gt; *mut [bool; ROW * COL] {&lt;/span&gt;
&lt;span class="sb"&gt;    let tmp = [true; ROW * COL];&lt;/span&gt;
&lt;span class="sb"&gt;    let mut buf = Box::new(tmp);&lt;/span&gt;
&lt;span class="sb"&gt;    unsafe { &amp;amp;mut *buf }&lt;/span&gt;
&lt;span class="sb"&gt;}&lt;/span&gt;

&lt;span class="sb"&gt;#[no_mangle]&lt;/span&gt;
&lt;span class="sb"&gt;pub fn get_element(i: usize, ptr: *mut bool, len: usize) -&amp;gt; bool {&lt;/span&gt;
&lt;span class="sb"&gt;    let buf: &amp;amp;[bool] = unsafe { std::slice::from_raw_parts(ptr, len) };&lt;/span&gt;
&lt;span class="sb"&gt;    if i &amp;lt; 0 || i &amp;gt; len - 1 { false } else { buf[i] }&lt;/span&gt;
&lt;span class="sb"&gt;}&lt;/span&gt;
&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="nx"&gt;WebAssembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instantiate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;allocate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allocate&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;getElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get_element&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;100&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allocate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Creating WASM module failed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;js側で生ポインタから値を取り出す方法がわからなかったのでgetElementしています。&lt;/p&gt;
&lt;p&gt;この方法だとサイズを動的に確保できないのが残念なので時間があれば改良したいです。&lt;/p&gt;
&lt;p&gt;メモリの解放はwasm-gcがやってくれると信じて使います。&lt;/p&gt;
&lt;h1 id="_2"&gt;開発しぐさ&lt;/h1&gt;
&lt;p&gt;rustのプロジェクトをベースにしてviewディレクトリにnode.jsのプロジェクトを作成して開発しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── Cargo.toml
├── src
│   ├── lib.rs
│   ├── lifegame.rs
│   ├── main.rs
│   └── xorshift.rs
└── view
    ├── build.js
    ├── index.html
    ├── lifegame.js
    ├── main.js
    └── package.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;wasmにするのに必要な部分(lib.rs)とrustだけでも動くロジック部分(lib.rs以外)を切り分けで開発しました(ファイル名は何でもいいです)。&lt;/p&gt;
&lt;p&gt;wasmのみに必要な部分(lib.rs)はロジック部分とは本質的に無関係なのでインターフェースだけ決めて、ロジック部分ができるまではダミーデータを使いました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# view部分のビルド&lt;/span&gt;
% &lt;span class="nb"&gt;cd&lt;/span&gt; view
% ./node_modules/.bin/browserify -t rustify lifegame.js &amp;gt; build.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ロジック部分のRustには#[test]があるので今回のロジックの核であるライフゲーム部分は先に簡単なtestを書いて動作を確認しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% cargo &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ロジック部分ができたらダミデータを置き換えて完成です。&lt;/p&gt;
&lt;h1 id="_3"&gt;ライフゲーム本体&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Lifegame&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;room&lt;/span&gt;: &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Lifegame&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;: &lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;: &lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;Lifegame&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Lifegame&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;: &lt;span class="nc"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;: &lt;span class="nc"&gt;col&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;room&lt;/span&gt;: &lt;span class="nc"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_vec&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;room&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_next_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_next_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;: &lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_of_living&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                             &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                             &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                             &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                             &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                             &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                             &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                             &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_of_living&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;room&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;get_cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;room&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rust結構書きやすいしコンパイラも賢いので本当に好きです。がまだ雰囲気で書いているので間違っているかもしれません。&lt;/p&gt;
&lt;h1 id="_4"&gt;もっと遊びたい&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://aochagavia.github.io/blog/rocket---a-rust-game-running-on-wasm/"&gt;Rocket - A Rust game running on WASM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この記事を見てしゅごいとなったのでもっと遊びたくなりました。&lt;/p&gt;
&lt;p&gt;もともとPistonで作っていたゲームをwasm+canvas(html)で置き換えた話のようです。&lt;/p&gt;
&lt;p&gt;あとこの前extern crateができないと思っていたのですがrustcでなくcargoを使えばできることもわかったのでできることの幅も広がりそうです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% cargo build --target wasm32-unknown-unknown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;正直jsはあまり洗練されたプログラミング言語ではないのでrustを使ってwebのロジックを書けるのは魅力的です。&lt;/p&gt;
&lt;p&gt;実用するにはどうすればいいのか考えながらもう少し遊んでいきたいです。&lt;/p&gt;</summary><category term="Rust"></category><category term="WebAssembly"></category></entry><entry><title>rustifyで簡単WebAssemblyしてみる</title><link href="https://muunyblue.github.io/8eec1a372e8a99076315db9ea4d24b2c.html" rel="alternate"></link><published>2017-12-05T16:45:31+09:00</published><updated>2017-12-05T16:45:31+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-12-05:8eec1a372e8a99076315db9ea4d24b2c.html</id><summary type="html">&lt;p&gt;WebAssembly(以下WASM)には興味があって遊んでみたいと思っていたら、rustifyという便利な魔法が先日GitHubに現れたので使ってみました。&lt;/p&gt;
&lt;p&gt;続編のほうが詳しいです =&amp;gt; &lt;a href="https://muunyblue.github.io/35d58f24d7a7701719c983a1ef1979b1.html"&gt;rustifyでWebAssembly - ライフゲームを作る&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ElectronでWASMを使ってランダムウォークをしてみます。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/yymm/rustify-random-walk"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h1 id="_1"&gt;準備&lt;/h1&gt;
&lt;p&gt;Node.js環境をnvmで、Rust環境をrustupで準備します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% nvm install --lts
% rustup update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;rustifyを使うための準備です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% rustup target add wasm32-unknown-unknown --toolchain nightly
% cargo install --git https://github.com/alexcrichton/wasm-gc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rustのブロジェクトを作ります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% cargo init random_walk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Node.jsのプロジェクトも作ります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; random_walk
% mkdir view
% npm init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Browserifyとrustify、Electronのインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% npm install browserify rustify electron
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_2"&gt;サンプル動作&lt;/h1&gt;
&lt;p&gt;まずElectronの準備をします。&lt;/p&gt;
&lt;p&gt;https://github.com/electron/electron/blob/master/docs/tutorial/quick-start.md&lt;/p&gt;
&lt;p&gt;ここを参考にindex.htmlとmain.jsを作ります。&lt;/p&gt;
&lt;p&gt;index.htmlはcanvasタグとscriptタグでbuild.jsを読み込むように変更します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Random Walk&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;canvas&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;canvas&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;build.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;.
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次にrustifyするrender.jsを作ります。&lt;/p&gt;
&lt;p&gt;https://github.com/browserify/rustify&lt;/p&gt;
&lt;p&gt;サンプルコードのExternalで作ります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rust&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rustify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;wasm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rust&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;add-one.rs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;WebAssembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instantiate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add_one&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;41&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;68&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Creating WASM module failed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;viewフォルダにadd-one.rsを作ります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#[no_mangle]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;add_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;browserifyでWASM入りのbuild.jsに変換します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; view
% ./node_modules/.bin/browserify -t rustify render.js &amp;gt; build.js
% ./node_modules/.bin/electron .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DevToolsに42と69が表示されていれば成功。&lt;/p&gt;
&lt;h1 id="_3"&gt;ランダムウォークを作る&lt;/h1&gt;
&lt;p&gt;必要なのは乱数だけです。&lt;/p&gt;
&lt;p&gt;Rustの乱数はrandクレートですが、extern crateするとrustifyでエラーが出てしまったので実装します。&lt;/p&gt;
&lt;p&gt;手軽なのはXorShiftなので検索してｽｯと実装します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;::&lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;XorShift&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;: &lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;: &lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;: &lt;span class="kt"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XorShift&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;XorShift&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XorShift&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="mi"&gt;123456789&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;: &lt;span class="mi"&gt;362436069&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;: &lt;span class="mi"&gt;521288629&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;: &lt;span class="mi"&gt;88675123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;u32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_w&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;gen_norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;f64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;u32&lt;/span&gt;::&lt;span class="n"&gt;MAX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;面倒なのでseedは固定です。0~1に正規化された乱数のほうが判定しやすいのでgen_norm関数を用意しました。&lt;/p&gt;
&lt;p&gt;wasmからstructを読み込む方法がわからなかったのでstatic mutのXorShiftを用意してそれから乱数を取り出す関数を作りました。先程のファイルの末尾に以下を追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xorshift&lt;/span&gt;: &lt;span class="nc"&gt;XorShift&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XorShift&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;: &lt;span class="mi"&gt;123456789&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;: &lt;span class="mi"&gt;362436069&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;: &lt;span class="mi"&gt;521288629&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;: &lt;span class="mi"&gt;88675123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#[no_mangle]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;f64&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;unsafe&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xorshift&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gen_norm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;あとはこの乱数を使ってCanvas上にぽちぽちプロットしていけば完成です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rust&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rustify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wasm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rust&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../src/xorshift.rs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;WebAssembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instantiate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;canvas&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;
    &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// start from center&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt;
    &lt;span class="c1"&gt;// unit of step&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;us&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;us&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;us&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.75&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;us&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;us&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;us&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;us&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Creating WASM module failed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これをrandom_walk.jsというファイル名で保存して以下のコマンドを実行します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% &lt;span class="nb"&gt;cd&lt;/span&gt; view
% ./node_modules/.bin/browserify -t rustify random_walk.js &amp;gt; build.js
% ./node_modules/.bin/electron .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="random walk" src="https://gyazo.com/5667e89638de43bb3825fc5eab2581ac.png" /&gt;&lt;/p&gt;
&lt;p&gt;ぽちぽち動いていれば完成。&lt;/p&gt;
&lt;p&gt;rustify、らくらくwasm体験できるのでもう少し遊んでみたさが高まりました。&lt;/p&gt;</summary><category term="rust"></category><category term="WebAssembly"></category></entry><entry><title>VC++と和解する</title><link href="https://muunyblue.github.io/2e255d2d6bf9bb33030246d31f1a79ca.html" rel="alternate"></link><published>2017-10-12T15:27:59+09:00</published><updated>2017-10-12T15:27:59+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-10-12:2e255d2d6bf9bb33030246d31f1a79ca.html</id><summary type="html">&lt;iframe id="vc++"
    title="vc++"
    width="100%"
    height="600px"
    src="https://goo.gl/HQbPeS"&gt;
&lt;/iframe&gt;

&lt;p&gt;VC++のコンソールアプリケーションが自動生成するファイルについてとMSBuildの話である。&lt;/p&gt;
&lt;p&gt;Intelコンパイラなどのサードパーティコンパイラを使用することについても書いてある。&lt;/p&gt;</summary><category term="C++"></category></entry><entry><title>FlaskとVue.jsを組み合わせて使う</title><link href="https://muunyblue.github.io/0b7acbba52fb92b2e9c818f7f56bac99.html" rel="alternate"></link><published>2017-10-01T15:45:59+09:00</published><updated>2017-10-01T15:45:59+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-10-01:0b7acbba52fb92b2e9c818f7f56bac99.html</id><summary type="html">&lt;p&gt;&lt;a href="https://flaskvuejs.herokuapp.com/"&gt;&lt;img alt="" src="https://gyazo.com/e4eef5fccd7dd141ad7955fadd873e8b.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://flaskvuejs.herokuapp.com/" title="flask-vue.js demo"&gt;flask-vue.js demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/yymm/flask-vuejs" title="yymm/flask-vuejs: Example &amp;amp; Tips, Flask with Vue.js."&gt;yymm/flask-vuejs: Example &amp;amp; Tips, Flask with Vue.js.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FlaskとVue.jsを組み合わせて使うサンプルリポジトリを作っています。&lt;/p&gt;
&lt;p&gt;Vue.jsは小さく始めることが出来るので、サーバサイドのテンプレートエンジンと抱き合わせて使うことも可能です。&lt;/p&gt;
&lt;p&gt;巷ではSPAやSSRが流行っていますが個人的にはシンプルで好きです。&lt;/p&gt;
&lt;h1 id="delimiter"&gt;Delimiterの変更&lt;/h1&gt;
&lt;p&gt;デフォルトではFlaskのテンプレートエンジンJinja2とVue.jsのDelimiterは同じものを使用していて上手く動かせません。&lt;/p&gt;
&lt;p&gt;ですが、FlaskもVue.jsもDelimiterを変更できます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomFlask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;jinja_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jinja_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;jinja_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;block_start_string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;block_end_string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;variable_start_string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;((&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;variable_end_string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;))&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;comment_start_string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;comment_end_string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CustomFlask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;delimiters&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[[&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;]]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello Vue!&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こうすると、FlaskとVue.jsを共存させることができます。&lt;/p&gt;
&lt;p&gt;具体的には以下のようなHTML(Jinja2テンプレート)になります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;layout.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;script&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;script src=&amp;quot;https://unpkg.com/vue/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;div id=&amp;quot;example&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;h2&amp;gt;Delimiters changing!&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;p&amp;gt;Jinja2: ((message))&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  &amp;lt;p&amp;gt;Vue: [[message]]&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;var example = new Vue({&lt;/span&gt;
&lt;span class="x"&gt;  el: &amp;quot;#example&amp;quot;,&lt;/span&gt;
&lt;span class="x"&gt;  delimiters: [&amp;quot;[[&amp;quot;, &amp;quot;]]&amp;quot;],&lt;/span&gt;
&lt;span class="x"&gt;  data: {&lt;/span&gt;
&lt;span class="x"&gt;    message: &amp;quot;Hello Vue!&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;
&lt;span class="x"&gt;})&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/yymm/flask-vuejs/blob/master/templates/layout.html" title="flask-vuejs/layout.html at master · yymm/flask-vuejs"&gt;layout.html&lt;/a&gt;はこちら。&lt;/p&gt;
&lt;p&gt;わりと簡単に共存できます。&lt;/p&gt;
&lt;p&gt;実際にアプリを作ってみると、どのデータをサーバサイドにレンダリングさせるかVue.jsでレンダリングさせるかの判断がなかなか難しいです。&lt;/p&gt;
&lt;p&gt;フロントエンドフレームワークのSSRを使用すればそれで悩む心配はなさそうですが、構成が大袈裟になりがちなのでこういうシンプルな土台を使うのも一考かもしれません。&lt;/p&gt;
&lt;h1 id="delimitersingle-file-components"&gt;Delimiterを変更しなくてもSingle File Componentsを使えば解決&lt;/h1&gt;
&lt;p&gt;Single File Componentsを使えばVue.jsの管理するDOMをvueファイル内に押し込めるのでわざわざDelimiterを変更することなく共存できます。&lt;/p&gt;
&lt;p&gt;しかしただとはいきません。&lt;/p&gt;
&lt;p&gt;Single File Componentsを使うにはコンパイル(Webpackなど)が必要になります。&lt;/p&gt;
&lt;p&gt;Delimiterを変更する場合では、cdnやコンパイル済みvue.jsをscriptタグで読んで使っていますがこれができなくなります。&lt;/p&gt;
&lt;p&gt;フロントエンドをコンパイルする労力を割くかどうかは時と場合によると思いますが、他のVue.jsプラグインやnpmパッケージを使うときなどはフロントエンドをコンパイルする構成にしても良いのかもしれません。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;SPAやSSRが流行っている中この構成は時代を逆行している感がありますが、このまえIssueがきてnuxt.jsの話もでていて少なからずこういう構成も検討されるケースがあるのだなと思いブログに書いてみました。&lt;/p&gt;
&lt;p&gt;もともとVue0時代に自分のために作ったリポジトリなのですが、ポチポチと星がついてVue2対応したらIssueも来たりしてVue.js人気を感じました。&lt;/p&gt;
&lt;p&gt;Vue2.5が出たらTypeScriptにも対応する予定なので、誰かの役に立てばいいなぁと思います。&lt;/p&gt;
&lt;p&gt;Webの未来がどうなるのかさっぱりですが、好きな技術を探して楽しんでいきたいです。&lt;/p&gt;</summary><category term="Python"></category><category term="Flask"></category><category term="Vue.js"></category></entry><entry><title>OpenMPによるfor文の並列化</title><link href="https://muunyblue.github.io/f4f4a06c589ea53edf4a9b18e70bbd40.html" rel="alternate"></link><published>2017-09-21T15:45:59+09:00</published><updated>2017-09-21T15:45:59+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-09-21:f4f4a06c589ea53edf4a9b18e70bbd40.html</id><summary type="html">&lt;p&gt;OpenMPには、forの並列化とsectionによる並列化がありますが、forの並列化のみを扱います。&lt;/p&gt;
&lt;p&gt;OpenMPに関する仕様に関しては、&lt;a href="http://www.cc.u-tokyo.ac.jp/support/kosyu/03/kosyu-openmp_c.pdf" title="kosyu-openmp_c.pdf"&gt;kosyu-openmp_c.pdf&lt;/a&gt;を読んで勉強します、よくまとまっているのであとあとリファレンスとしても使えます。&lt;/p&gt;
&lt;p&gt;以下、&lt;a href="https://www.isus.jp/products/c-compilers/32-openmp-traps/" title="C++ 開発者が陥りやすい OpenMP* の 32 の罠 | iSUS"&gt;C++ 開発者が陥りやすい OpenMP* の 32 の罠 | iSUS&lt;/a&gt;を参考に情報をまとめます。&lt;/p&gt;
&lt;h1 id="_1"&gt;書き方とコンパイル&lt;/h1&gt;
&lt;p&gt;簡単なOpenMPを使用したコードで説明します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef _OPENMP&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;omp.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef _OPENMP&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp parallel for&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef _OPENMP&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp critical&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Thread No: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;まず、OpenMPを使用するために"omp.h"というヘッダファイルを使用します。"omp.h"はコンパイル時にOpenMPが有効になっていない場合、コンパイルエラーになるのでOpenMPが有効な場合に使用できるマクロ"_OPENMP"がある時のみ読み込むようにします。後述する"#pragma omp"の部分はOpenMPが有効でない場合は無視されるので"_OPENMP"による#ifdefガードは必須ではありません。静的解析ツールなどを使用するとWarningが出る場合があるので、場合によってはOpenMPコード部分にはすべて#ifdefガードを付け足ほうが良いかもしれません。&lt;/p&gt;
&lt;p&gt;main関数内でfor文を並列化しています。記法は"#pragma omp"から始まる指示句（指示句と言った場合OpenMPの命令を指すことにします）を使用します。for文を並列化する場合はfor文の直前に"#pragma omp parallel for"をつけるだけで並列化されます。&lt;/p&gt;
&lt;p&gt;このコードの場合、出力は並列化されているので順番は保証されません。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Thread No: 0
Thread No: 3
Thread No: 1
Thread No: 4
Thread No: 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;"#pragma omp critical"はprintfで使用する共有のリソース（標準出力）で競合が起こらないためにつけています。&lt;/p&gt;
&lt;p&gt;以下のコード例では見やすさのためifdefの記述を省略します。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;OpenMPはVisual Studio 2005以降、gcc 4.2以降、intel compiler 12.1以降で使えます（使用可能なバージョンについてここでは説明しません）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio: [Projects (プロジェクト）] &amp;gt; [Properties (プロパティ）] &amp;gt; [Configuration Properties (構成プロパティ）] &amp;gt; [C/C++] &amp;gt; [Language (言語）] から有効にする&lt;/li&gt;
&lt;li&gt;gcc: -fopenmpをつける&lt;/li&gt;
&lt;li&gt;intel compiler: -openmpをつける&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_2"&gt;競合状態&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://ja.wikipedia.org/wiki/%E7%AB%B6%E5%90%88%E7%8A%B6%E6%85%8B" title="競合状態 - Wikipedia"&gt;競合状態&lt;/a&gt;が発生すると同じ入力を与えても同じ出力が保証できなくなります。これは簡単に起こせます、以下のコードは同じ結果を返すとは限りません。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;omp.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp parallel for&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;global val: %f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これはすべての変数に目が行き届くシンプルな例なので競合状態が起こるのは明白ですが、実際の関心事ではforループ内で複雑なデータ構造を扱う場合もあるため意図せず競合状態が発生するケースがあります。&lt;/p&gt;
&lt;h1 id="_3"&gt;競合状態の回避&lt;/h1&gt;
&lt;p&gt;クリティカルセッション（#pragma omp critical)とアトミック操作（#pragma omp atomic)、リダクション（記法は後述）を使用することで上記のような競合状態の回避ができます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;omp.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;critical_session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp parallel for&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp critical&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;global val: %f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp parallel for&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp atomic&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;global val: %f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;reduction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp parallel for reduction(+:global)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;global val: %f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;critical_session&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;reduction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_4"&gt;クリティカルセッションとアトミック&lt;/h1&gt;
&lt;p&gt;OpenMPでは"#pragma omp critical"と"#pragma omp atomic"がクリティカルセッションとアトミック操作になります。&lt;/p&gt;
&lt;p&gt;クリティカルセッションは、処理を1スレッドに制限します。アトミック操作は直後の一文を競合を起こさないで安全に変数の値を更新することを保証します。&lt;/p&gt;
&lt;p&gt;変数の値を更新する場合はアトミックを使用するほうが効率が良いです。標準出力などの利用や関数呼び出しを使用する場合はアトミックで保証できないのでクリティカルセッションを利用します。&lt;/p&gt;
&lt;p&gt;他にロックを利用することもできますが特別な理由がない限りは使いません。この理由にはロックを使うことによるコードの複雑性の回避、ロックを使うことによるバグ（デッドロックなど）の回避、速度（アトミック&amp;gt;クリティカルセッション&amp;gt;ロックの順でアトミックが一番高速）の問題があります。&lt;/p&gt;
&lt;h1 id="_5"&gt;アトミックとリダクション&lt;/h1&gt;
&lt;p&gt;演算処理と直後の一文にしか使えませんが、アトミックやクリティカルセクションと置き換えることができます。&lt;/p&gt;
&lt;p&gt;リダクションは各スレッドでの計算結果をループ終了後にマージします。&lt;/p&gt;
&lt;p&gt;つまり、アトミックの場合はスレッド間で共有されたメモリに対して更新を行いますが、リダクションの場合はスレッドごとにメモリを作成します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;omp.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp parallel for&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ithread&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;omp_get_thread_num&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;atomic[%d]: %p&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ithread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp atomic&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;global val: %f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;reduction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp parallel for reduction(+:global)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ithread&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;omp_get_thread_num&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;reduction[%d]: %p&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ithread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;global val: %f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;reduction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;atomic[0]: 0x7fff8a6c9500
atomic[0]: 0x7fff8a6c9500
atomic[1]: 0x7fff8a6c9500
atomic[2]: 0x7fff8a6c9500
atomic[3]: 0x7fff8a6c9500
global val: 2.847222
reduction[0]: 0x7fff8a6c90b8
reduction[0]: 0x7fff8a6c90b8
reduction[3]: 0x7f115bd8e938
reduction[1]: 0x7f115c18f938
reduction[2]: 0x7f1153ffe938
global val: 2.847222
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;reductionのほうが変数のメモリ領域を必要としますが、途中でスレッドをとめることがないためatomicより高速に思えます。実際に簡単な例で測定してみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;omp.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define LOOP_NUM 1000&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp parallel for&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LOOP_NUM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp atomic&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;global val: %f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;reduction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp parallel for reduction(+:global)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LOOP_NUM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;global val: %f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;measure_and_print_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;omp_get_wtime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;omp_get_wtime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s: TIME %f(sec)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;measure_and_print_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;atomic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;measure_and_print_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;reduction&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reduction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;global val: 3.287867
atomic: TIME 0.010829(sec)
global val: 3.287867
reduction: TIME 0.001302(sec)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;このケースではreductionを使用するほうが高速に動作しています。場合によっては差は埋まるかもしれませんが、reductionのほうが高速と思っていて良さそうです。ただしこの例だけでは必ずしもredutionが高速とは保証できません。&lt;/p&gt;
&lt;h1 id="_6"&gt;変数の取り扱い&lt;/h1&gt;
&lt;p&gt;競合状態とその回避について説明しましたが、アトミック、クリティカルセクション、リダイレクションのどれを使ってもパフォーマンスは落ちるためほんとうに必要なとき以外は使用を控えたほうが良いです。&lt;/p&gt;
&lt;p&gt;for並列化セクション内で使う変数はスレッドごとにメモリを割り当てることができます。&lt;/p&gt;
&lt;p&gt;基本的にはfor文内のローカル変数として宣言すると良いのですが、private,fastprivate,lastprivate指示節を使って今まで使っていた変数もスレッド内ローカルで使うこともできます。&lt;/p&gt;
&lt;p&gt;ちなみにforで使用するインデックス変数はforの外で宣言する場合もfor内で宣言する場合もどちらもスレッドごとにメモリが割り当てられます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;omp.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;private_v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;omp_set_num_threads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp parallel for private(private_v)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#pragma omp critical&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Thread No: %d | global: %p | private: %p | local: %p&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;omp_get_thread_num&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;private_v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Thread No: 0 | global: 0x7fff5c389600 | private: 0x7fff5c3891bc | local: 0x7fff5c3891b8
Thread No: 2 | global: 0x7fff5c389600 | private: 0x7f651fa6b93c | local: 0x7f651fa6b938
Thread No: 1 | global: 0x7fff5c389600 | private: 0x7f651fe6c93c | local: 0x7f651fe6c938
Thread No: 0 | global: 0x7fff5c389600 | private: 0x7fff5c3891bc | local: 0x7fff5c3891b8
Thread No: 2 | global: 0x7fff5c389600 | private: 0x7f651fa6b93c | local: 0x7f651fa6b938
Thread No: 1 | global: 0x7fff5c389600 | private: 0x7f651fe6c93c | local: 0x7f651fe6c938
Thread No: 0 | global: 0x7fff5c389600 | private: 0x7fff5c3891bc | local: 0x7fff5c3891b8
Thread No: 1 | global: 0x7fff5c389600 | private: 0x7f651fe6c93c | local: 0x7f651fe6c938
Thread No: 3 | global: 0x7fff5c389600 | private: 0x7f651f66a93c | local: 0x7f651f66a938
Thread No: 3 | global: 0x7fff5c389600 | private: 0x7f651f66a93c | local: 0x7f651f66a938
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ただし、private,fastprivate,lastprivateの使用にはいくつか注意点があります。&lt;/p&gt;
&lt;h2 id="_7"&gt;共通の注意点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;指定する変数は参照型であってはならない&lt;/li&gt;
&lt;li&gt;インスタンスを指定する場合はコピーコンストラクタの定義が必要&lt;/li&gt;
&lt;li&gt;オブジェクトのメンバーを指定することはできない&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="private"&gt;privateの注意点&lt;/h2&gt;
&lt;p&gt;privateで指定した変数は初期化されていません。必ずfor文内で初期化して使います。&lt;/p&gt;
&lt;p&gt;privateで使用する変数は、for並列化セクションに入る前で使用されていない値であればfor内のローカル変数として宣言するほうが読みやすさの観点から良いと考えます。&lt;/p&gt;
&lt;h2 id="fastprivatelastprivate"&gt;fastprivateとlastprivate&lt;/h2&gt;
&lt;p&gt;fastprivateは並列化処理開始時の値が各スレッドの値にコピーされます。for並列化セクションに入る前の値を使いたいときに有効です。&lt;/p&gt;
&lt;p&gt;lastprivateは並列化の最後のスレッドの持つ値が元の変数に代入されます。for並列化ではどのスレッドの値が入ってくるか実行されるまでわからないので値が自明な場合ではない限りあまり使用しないほうが良いでしょう。&lt;/p&gt;
&lt;h1 id="openmp"&gt;紹介していないOpenMPの機能&lt;/h1&gt;
&lt;p&gt;atomic, critical, reduction, privateを紹介しましたが、OpenMPにはほかにもいろいろな機能があります。&lt;/p&gt;
&lt;p&gt;これらはfor文に関するいくつかの機能です、sectionsによる並列化などほかにも機能があるので紹介していない機能を以下に列挙します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sections&lt;/li&gt;
&lt;li&gt;single&lt;/li&gt;
&lt;li&gt;master&lt;/li&gt;
&lt;li&gt;barrier&lt;/li&gt;
&lt;li&gt;ordered&lt;/li&gt;
&lt;li&gt;flush&lt;/li&gt;
&lt;li&gt;threadprivate&lt;/li&gt;
&lt;li&gt;schedule&lt;/li&gt;
&lt;li&gt;nowait&lt;/li&gt;
&lt;li&gt;if&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あとAPIについてもあまり触れていません。ロックの使用はOpenMPのAPI経由になります。&lt;/p&gt;
&lt;p&gt;OpenMPは使い方に熟知していないとうまく使いこなせないだけでなくバグを生み出しがちでパフォーマンスを引き出すこともできなくなります。&lt;/p&gt;
&lt;p&gt;本記事はfor並列化に絞ってあえて少ない機能でまとめてあります、OpenMPは不用意に特定の難しいバグを埋め込んでしまう可能性が高いので気を付けて使うと良いでしょう。&lt;/p&gt;
&lt;h1 id="_8"&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://www.cc.u-tokyo.ac.jp/support/kosyu/03/kosyu-openmp_c.pdf" title="kosyu-openmp_c.pdf"&gt;kosyu-openmp_c.pdf&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日本語記事の中では一番詳しいと思われる&lt;/li&gt;
&lt;li&gt;仕様を網羅しているので読むのは必須&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.isus.jp/products/c-compilers/32-openmp-traps/" title="C++ 開発者が陥りやすい OpenMP* の 32 の罠 | iSUS"&gt;C++ 開発者が陥りやすい OpenMP* の 32 の罠 | iSUS&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アンチパターンとその解決について丁寧に書かれている&lt;/li&gt;
&lt;li&gt;OpenMPのAPIについて一通り知っていないと内容を正確には理解できない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://rest-term.com/technote/index.php/OpenMP" title="OpenMP - Tech Note"&gt;OpenMP - Tech Note&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;そこそこまとまった記事&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://tech.ckme.co.jp/openmp.shtml" title="OpenMPの使い方：tech.ckme.co.jp"&gt;OpenMPの使い方：tech.ckme.co.jp&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;セクションについて&lt;/li&gt;
&lt;li&gt;スケジューリングについて&lt;/li&gt;
&lt;li&gt;API（omp_get_max_threadsなど）について&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://ja.wikipedia.org/wiki/OpenMP" title="OpenMP - Wikipedia"&gt;OpenMP - Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本的な内容（紹介に近い）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://jp.xlsoft.com/documents/intel/compiler/525J-001.pdf" title="01_OpenMP_osx.indd - 525J-001.pdf"&gt;01_OpenMP_osx.indd - 525J-001.pdf&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenMP 4.5の公式ドキュメント&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.openmp.org/wp-content/uploads/openmp-examples-4.5.0.pdf" title="openmp-examples-4.5.0.pdf"&gt;openmp-examples-4.5.0.pdf&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OpenMP topic 2: Loop parallelism&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://pages.tacc.utexas.edu/~eijkhout/pcse/html/omp-loop.html" title="OpenMP topic 2: Loop parallelism"&gt;OpenMP topic 2: Loop parallelism&lt;/a&gt;&lt;/p&gt;</summary><category term="C"></category><category term="C++"></category></entry><entry><title>LocalStorageで誰でも安全にMarkdownでスライドやメモ作れるサービス作ったよ</title><link href="https://muunyblue.github.io/823b2d10224a6a29f91fc7c0f46f1b8e.html" rel="alternate"></link><published>2017-09-21T12:58:03+09:00</published><updated>2017-09-21T12:58:03+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-09-21:823b2d10224a6a29f91fc7c0f46f1b8e.html</id><summary type="html">&lt;h1 id="locks"&gt;Locks&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://yymm.github.io/locks/#/"&gt;&lt;img alt="" src="https://github.com/yymm/locks/raw/master/screenshot/locks.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;スライド作るときPowerPointやKeynoteでも良いけどインストールされてないとか好みじゃないとかMarkdownで書きたいときあります。&lt;/p&gt;
&lt;p&gt;でもWebサービスとかだと外部のサーバにデータ乗るかもしれないし機密情報とかのせられない・・・みたいなときに使うツールということで作りました。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://yymm.github.io/locks/#/"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;ここにアクセスするだけで誰でも使えます。LocalStorageを使っているのでデータが自分のPC外に出てしまう心配はありません。&lt;/p&gt;
&lt;p&gt;その代わりにPCやブラウザが変わると同じデータを参照することは出来ないので注意です(今後、Syncサーバを置いてデータ共有する機能も実装しようと考えています)。&lt;/p&gt;
&lt;p&gt;エディタのテーマやコードハイライトのテーマ、Markdownのテーマがたくさん選べるのである程度お好みのデザインで作れます。&lt;/p&gt;
&lt;p&gt;Locks自体にスライドやメモを公開する機能があるので一応配布用途にも使えます(本文は圧縮されてURLに乗っている形式です)。&lt;/p&gt;
&lt;p&gt;今後も開発を続けていく予定です、興味が出た方ぜひ使ってみて下さい。&lt;/p&gt;
&lt;h1 id="_1"&gt;機能紹介&lt;/h1&gt;
&lt;p&gt;細かい機能は、&lt;a href="https://goo.gl/Pdtdy3"&gt;What's about Locks?&lt;/a&gt;にまとまっていますので大まかな紹介です。&lt;/p&gt;
&lt;h2 id="_2"&gt;基本機能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;データが漏れない(LocalStorageに保存、通信もしない)&lt;/li&gt;
&lt;li&gt;LocalStorage容量確認&lt;/li&gt;
&lt;li&gt;オフライン動作&lt;/li&gt;
&lt;li&gt;リアルタイムプレビュー&lt;/li&gt;
&lt;li&gt;オートセーブ&lt;/li&gt;
&lt;li&gt;エディタテーマ&lt;/li&gt;
&lt;li&gt;コードハイライトテーマ&lt;/li&gt;
&lt;li&gt;Markdownテーマ&lt;/li&gt;
&lt;li&gt;絵文字補完&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LocalStorageを使っているので割りと機能が豊富でもサクサク動きます。&lt;/p&gt;
&lt;p&gt;LocalStorageの容量はブラウザによってまちまちなので容量を表示するようにしています、最大5MBにしていますがブラウザによって違うのであくまで目安ですが...&lt;/p&gt;
&lt;h2 id="_3"&gt;公開機能&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://goo.gl/F3WPQ8"&gt;公開機能のデモ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こういう感じに自由に公開できます。&lt;/p&gt;
&lt;p&gt;本文を圧縮したものをURLに乗っけて公開しています。必然的にURLが長くなるのでGoogleにURLを短縮してもらっています。&lt;/p&gt;
&lt;p&gt;配布したい資料を作るときには便利ですが、本文をURLに乗っけるので長さの制限があります。&lt;/p&gt;
&lt;p&gt;正確な値はわかりませんが10000kBを超えるとダメのようです。&lt;/p&gt;
&lt;h2 id="textlint"&gt;TextLint&lt;/h2&gt;
&lt;p&gt;&lt;img alt="textlint demo" src="https://gyazo.com/40f85726a25942f4319bcdf0e3d90916.gif" /&gt;&lt;/p&gt;
&lt;p&gt;TextLintを利用することもできます。ブラウザでうまく動かすことができなかったので今はサーバとやり取りする方法になっています。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/textlint/textlint/issues/299" title="@textlint/browser · Issue #299 · textlint/textlint"&gt;@textlint/browser · Issue #299 · textlint/textlint&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こういうIssueも上がっていたので期待しつつ現状はこのままで様子を見てブラウザで動かしたい気持ちです。&lt;/p&gt;
&lt;p&gt;サンプルサーバのソースを公開しているのでHerokuにのせて使うと良いです。ルール増やしたい方はforkして増やすと良いです。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/yymm/locks-textlint-server"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;使い方&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;サーバをHerokuなどにデプロイ&lt;/li&gt;
&lt;li&gt;トップページでshiftを押しながらclickするとメニューが出てきます&lt;/li&gt;
&lt;li&gt;TextLintのServer URLにデプロイしたサーバのURLを書いてenter&lt;/li&gt;
&lt;li&gt;正しく接続されるとルール一覧が出てくるので有効にするとエディタページでLintが効きます&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="_4"&gt;今後&lt;/h1&gt;
&lt;p&gt;とりあえずSync機能を作る予定です。これもHerokuなどにサーバを置いてそこのデータを貯めるようにします。&lt;/p&gt;
&lt;p&gt;最終的にブログ吐けるようにしていきたいと考えています、GitHub Pagesにデプロイする方式にする予定ですがぼちぼち開発を続けていこうと思います。&lt;/p&gt;
&lt;p&gt;リポジトリはこちら&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/yymm/locks"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;</summary><category term="Vue"></category><category term="JavaScript"></category><category term="CSS"></category></entry><entry><title>CodeMirrorでEmoji AutoCompleteをする</title><link href="https://muunyblue.github.io/502317c9b4695a9476eb981d5fdf43a8.html" rel="alternate"></link><published>2017-09-07T09:43:03+09:00</published><updated>2017-09-07T09:43:03+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-09-07:502317c9b4695a9476eb981d5fdf43a8.html</id><summary type="html">&lt;p&gt;":"に続けて打ち込むと自動で補完してくれるようになります。&lt;/p&gt;
&lt;p&gt;&lt;img alt="demo" src="https://gyazo.com/68de503622f29ed4213c201a75b870c1.gif" /&gt;&lt;/p&gt;
&lt;p&gt;EmojiリストはGitHub APIから取得しています。&lt;/p&gt;
&lt;h1 id="_1"&gt;必要なパッケージ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;CodeMirror&lt;/li&gt;
&lt;li&gt;show-hint addonのコードを編集するのでソースコードが必要&lt;/li&gt;
&lt;li&gt;Axios&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;パッケージの読み込み方法は各自におまかせします(scriptタグでもビルドツールでも構いません)。&lt;/p&gt;
&lt;h1 id="_2"&gt;やり方&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// sample data&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;emojiList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abc:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;axz:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bee:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;beam:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bleach:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;emojiComplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;CodeMirror&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showHint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCursor&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTokenAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentWord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTokenAt&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;filteredList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;emojiList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentWord&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filteredList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;filteredList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CodeMirror&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CodeMirror&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;currentWord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentWord&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;completeSingle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;change&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;emojiComplete&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ひとまずemoji画像のないシンプルな例です。cmはCodeMirrorインスタンスです。&lt;/p&gt;
&lt;p&gt;CodeMirrorのchangeイベントにshowHintを仕込んで実現しています。&lt;/p&gt;
&lt;p&gt;showHintの中身が肝です。&lt;/p&gt;
&lt;p&gt;最初の4行はshowHintを書く際の決まり文句のようなものでカーソル位置や対象の単語情報を変数に記録しています。&lt;/p&gt;
&lt;p&gt;while文内では、単語を一文字ずつ遡っていって":"が見つかったら補完候補を絞り込んで、補完候補が存在する場合は表示するようにしています。&lt;/p&gt;
&lt;p&gt;showHintの戻り値は、補完のリストと補完する位置を指定します。位置は今の位置から単語終了位置までになります。&lt;/p&gt;
&lt;p&gt;これで自動的に":"のあとに文字を入れると補完候補が表示されます。&lt;/p&gt;
&lt;p&gt;showHint関数に指定している、completeSingle: falseは必須です。細かい理由はわかりませんがこれがないと無限ループするようです。&lt;/p&gt;
&lt;p&gt;emojiListが末尾に":"が付いて不格好なのは、補完完了時に末尾の":"まで補完されるようにしているからですがこれは回避できます、これは以下の内容で説明します。&lt;/p&gt;
&lt;h2 id="emoji"&gt;Emojiのリスト取得&lt;/h2&gt;
&lt;p&gt;GitHub APIにEmoji一覧を取得するAPIがあるので利用します。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developer.github.com/v3/emojis/" title="Emojis | GitHub Developer Guide"&gt;Emojis | GitHub Developer Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先程の例のemojiListをapiで取得したものに置き換えれば完全なリストになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://api.github.com/emojis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mf"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Error...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;emojiList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;emojiList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;:`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="emoji_1"&gt;Emoji画像の表示&lt;/h2&gt;
&lt;p&gt;show-hint addonの補完候補には文字列しか表示できません。&lt;/p&gt;
&lt;p&gt;実際にCodeMirrorの&lt;a href="https://github.com/codemirror/CodeMirror/blob/master/addon/hint/show-hint.js"&gt;addon/hint/show-hint.js&lt;/a&gt;を見てみると、文字列リスト or {text: str, displayText: str}のリストを指定する仕様になっています。&lt;/p&gt;
&lt;p&gt;画像を表示させるようにshow-hint.jsを書き換えます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;      if (cur.render) cur.render(elt, data, cur);
&lt;span class="gd"&gt;-     else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));&lt;/span&gt;
&lt;span class="gi"&gt;+     else elt.innerHTML = cur.displayText&lt;/span&gt;
      elt.hintId = i;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/codemirror/CodeMirror/blob/master/addon/hint/show-hint.js#L219"&gt;219行目&lt;/a&gt;あたりです。&lt;/p&gt;
&lt;p&gt;displayTextで指定する補完候補表示をinnerHTMLで表示できるようにしました。&lt;/p&gt;
&lt;p&gt;{text: str, displayText: str}のリストでの補完候補の指定は、textは実際に補完する際に使われる文字列でdisplayTextが補完候補を表示するときに使われる文字列になるので、emojiListを以下のようにします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://api.github.com/emojis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mf"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Error...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;emojiList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;emojiList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;:`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;displayText&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sb"&gt;`&amp;lt;img width=&amp;quot;15&amp;quot; height=&amp;quot;15&amp;quot; src=&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;&amp;quot; alt=&amp;quot;icon&amp;quot; async&amp;gt;&amp;lt;/img&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;displayTextをGitHub APIで取得した画像を小さくしたもの + Emoji名の形にします。&lt;/p&gt;
&lt;p&gt;これで冒頭のGifキャプチャーのように表示されるようになります。&lt;/p&gt;
&lt;p&gt;かなりの量の画像を取得するのでimgタグにはasyncオプションをつけています。&lt;/p&gt;
&lt;h1 id="_3"&gt;完全なコード&lt;/h1&gt;
&lt;p&gt;書き換えたshow-hint.jsを使用する必要があるので注意。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CodeMirror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* Dom Element */&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Options&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;// Emoji Complete&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://api.github.com/emojis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mf"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Error...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;emojiList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;emojiList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;:`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;displayText&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sb"&gt;`&amp;lt;img width=&amp;quot;15&amp;quot; height=&amp;quot;15&amp;quot; src=&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;&amp;quot; alt=&amp;quot;icon&amp;quot; async&amp;gt;&amp;lt;/img&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;emojiComplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;CodeMirror&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showHint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCursor&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTokenAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentWord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTokenAt&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;filteredList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;emojiList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentWord&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filteredList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;filteredList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CodeMirror&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CodeMirror&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Pos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;currentWord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentWord&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;completeSingle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;change&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;emojiComplete&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_4"&gt;参考記事&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/mizchi/items/15441d0e285f86125b0a" title="CodeMirrorでAutoCompleteする - Qiita"&gt;CodeMirrorでAutoCompleteする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codemirror.net/doc/manual.html#addons" title="CodeMirror: User Manual"&gt;CodeMirror: User Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/40015901/how-to-customize-autocomplete-function-of-the-codemirror" title="javascript - How to customize autocomplete function of the CodeMirror - Stack Overflow"&gt;javascript - How to customize autocomplete function of the CodeMirror - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/22699024/codemirror-autocomplete-options-not-setting-right"&gt;css - CodeMirror - AutoComplete "options" not setting right - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="JavaScript"></category></entry><entry><title>玉葱醤油をご存知だろうか?</title><link href="https://muunyblue.github.io/76b605730bd2606bbcb290f1244dac9a.html" rel="alternate"></link><published>2017-09-07T09:11:30+09:00</published><updated>2017-09-07T09:11:30+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-09-07:76b605730bd2606bbcb290f1244dac9a.html</id><summary type="html">&lt;p&gt;うまいのでみんな買うと良い。&lt;/p&gt;
&lt;h1 id="_1"&gt;玉葱醤油とは&lt;/h1&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="http://www.jakitamirai.or.jp/nousankakouhintop/kakouhin01/"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;玉葱醤油とは、北海道北見市で作られている醤油である。&lt;/p&gt;
&lt;p&gt;すごく細かい玉葱が入っており気持ちトロッとしている。&lt;/p&gt;
&lt;p&gt;おいしい。&lt;/p&gt;
&lt;h1 id="_2"&gt;どうやって食べる&lt;/h1&gt;
&lt;p&gt;醤油なので色々な方法があると思うが個人的にハマってしまった手法を紹介する。&lt;/p&gt;
&lt;p&gt;以下で紹介する手法は、玉葱醤油が合い過ぎて他の醤油だと物足りなくなり玉葱醤油でしか食べられなくなってしまったので危険。&lt;/p&gt;
&lt;h2 id="_3"&gt;卵かけご飯&lt;/h2&gt;
&lt;p&gt;うまい&lt;/p&gt;
&lt;h2 id="_4"&gt;アボカド&lt;/h2&gt;
&lt;p&gt;アボカドを切って玉葱醤油をかけてるだけなのに・・・&lt;/p&gt;
&lt;p&gt;アボカドはもう普通の醤油では食べないことを決意するに至った。&lt;/p&gt;
&lt;h2 id="_5"&gt;チャーハン&lt;/h2&gt;
&lt;p&gt;おいしい&lt;/p&gt;
&lt;h2 id="_6"&gt;焼きおにぎり&lt;/h2&gt;
&lt;p&gt;マヨネーズをちょっとかけて玉葱醤油をかけて焼くだけ。&lt;/p&gt;
&lt;p&gt;朝食に重宝されている。&lt;/p&gt;
&lt;h2 id="_7"&gt;豆腐&lt;/h2&gt;
&lt;p&gt;かけるだけおいしい&lt;/p&gt;
&lt;h1 id="_8"&gt;みんな買おう&lt;/h1&gt;
&lt;p&gt;北海道に行かなくても買えるので大丈夫。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://item.rakuten.co.jp/hokubei-shop/34969/"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;楽天で売ってるのでお買い求めやすい。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="http://www.ohobura.com/product/1540"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;こちらは1000mlのものやギフトが売られている、大量に摂取したいときや玉葱醤油をもっと広めたいときに有効。&lt;/p&gt;
&lt;h1 id="_9"&gt;最後に&lt;/h1&gt;
&lt;p&gt;玉葱醤油を作っている北見は私の地元。&lt;/p&gt;
&lt;p&gt;北見を離れた自分に玉葱醤油を送ってくれたことに感謝しかない。&lt;/p&gt;</summary><category term="Sho-yu"></category></entry><entry><title>Neovim + deoplete.nvimでVue + TypeScriptの補完ができるようになりました</title><link href="https://muunyblue.github.io/a7ce4026f43a4491f1284bb38d96f440.html" rel="alternate"></link><published>2017-08-10T11:42:03+09:00</published><updated>2017-08-10T11:42:03+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-08-10:a7ce4026f43a4491f1284bb38d96f440.html</id><summary type="html">&lt;p&gt;nvim-typescriptを使用する方法ではできなかったので出来るように頑張りました。&lt;/p&gt;
&lt;p&gt;(他に代替出来る方法を教えていただいたの最後の方で紹介します。)&lt;/p&gt;
&lt;p&gt;&lt;img alt="demo" src="https://user-images.githubusercontent.com/1256685/29148673-f6238c3a-7da9-11e7-84ee-f075adba0390.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Vueファイル内で、html, typescript, cssの補完が良い感じに効くようになりました。&lt;/p&gt;
&lt;h1 id="_1"&gt;やり方&lt;/h1&gt;
&lt;p&gt;deoplete.vimとcontext_filetype.vim、nvim-typescriptを使用します。&lt;/p&gt;
&lt;p&gt;dein.vimでプラグイン管理をする場合の最小構成は以下です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;compatible&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nocompatible&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;runtimepath&lt;/span&gt;&lt;span class="p"&gt;+=~&lt;/span&gt;&lt;span class="sr"&gt;/.vim/&lt;/span&gt;bundle&lt;span class="sr"&gt;/repos/&lt;/span&gt;github.&lt;span class="k"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/Shougo/&lt;/span&gt;dein.&lt;span class="k"&gt;vim&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; dein#load_state&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.vim/bundle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#begin&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.vim/bundle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Shougo/dein.vim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;posva/vim-vue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Shougo/context_filetype.vim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;  &amp;quot;call dein#add(&amp;#39;osyo-manga/vim-precious&amp;#39;)&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Shougo/deoplete.nvim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; {
  \ &lt;span class="s1"&gt;&amp;#39;hook_add&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;let g:deoplete#enable_at_startup = 1&amp;#39;&lt;/span&gt;
  \ }&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mhartington/nvim-typescript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; {
  \ &lt;span class="s1"&gt;&amp;#39;hook_add&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;let g:nvim_typescript#vue_support = 1&amp;#39;&lt;/span&gt;
  \ }&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;call&lt;/span&gt; dein#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#save_state&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;

&lt;span class="k"&gt;filetype&lt;/span&gt; plugin indent &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="nb"&gt;syntax&lt;/span&gt; enable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;nvim-typescriptを使うにはまだ"npm i -g typescript"する必要があるのでそこは注意です。&lt;/p&gt;
&lt;h1 id="_2"&gt;やったこと&lt;/h1&gt;
&lt;p&gt;context_filetype.vimとnvim_typescriptをVue対応させました。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/Shougo/context_filetype.vim/pull/33"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/mhartington/nvim-typescript/pull/71"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;あとはdeoplete.nvim本体もShougoさんに修正した頂きました。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/Shougo/deoplete.nvim/issues/526"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;PRとかIssue出してから反映されるのが素早くて素晴らしかったです、感謝です。&lt;/p&gt;
&lt;h1 id="_3"&gt;他の方法&lt;/h1&gt;
&lt;p&gt;色々画策しているうちに、この方法以外にもVimでVue + TypeScriptする方法はあると教えていただきました。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/Hchan_mgn/status/894834184195162113"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;LanguageClientを使う方法です、Vue.jsの公式にLanguageServerProtcolの実装があるとは知らなかったのでびっくりでした。&lt;/p&gt;
&lt;p&gt;VeturはVue公式なのでVueに特化した補完が聞きそうなのでこちらのほうが便利かも？&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/Quramy/status/894743968147165184"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;これはtuquyomiを使う方法です、Vimでも動きそうなのでNeovimが使えない環境ではこちらが良さそう。&lt;/p&gt;</summary><category term="Vue"></category><category term="TypeScript"></category></entry><entry><title>Vue.jsで縦横拡張可変グリッド</title><link href="https://muunyblue.github.io/0b01c7d68feb22290f3b0da91bef689d.html" rel="alternate"></link><published>2017-07-31T02:10:52+09:00</published><updated>2017-07-31T02:10:52+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-07-14:0b01c7d68feb22290f3b0da91bef689d.html</id><summary type="html">&lt;p&gt;CodePenエディタのような可変グリッドで、拡張可能なグリッドがほしかったので作ってみました。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/yymm/grid.vue"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img alt="demo" src="https://github.com/yymm/grid.vue/raw/master/capture.gif" /&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;詳しい話&lt;/h1&gt;
&lt;p&gt;templateでは可変グリッドのCSS書くのが大変になったのでrenderを使ったりして色々勉強になりました。という話です。&lt;/p&gt;
&lt;h2 id="_2"&gt;可変グリッド&lt;/h2&gt;
&lt;p&gt;ロジックは、&lt;a href="https://github.com/sparklinlabs/resize-handle" title="sparklinlabs/resize-handle: Robust resize handles / splitters for your HTML5 apps and websites"&gt;sparklinlabs/resize-handle: Robust resize handles / splitters for your HTML5 apps and websites&lt;/a&gt;をまるっと参考にしました。&lt;/p&gt;
&lt;p&gt;CSSはflexboxを使っていて、リサイズイベントはJavaScriptで以下のような感じで制御してます&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;リサイズバーのmousedownイベント発火&lt;/li&gt;
&lt;li&gt;サイズを変える要素を特定、初期値記録&lt;/li&gt;
&lt;li&gt;キャプチャーを制限 or イベントの対象をwindowオブジェクトに&lt;/li&gt;
&lt;li&gt;mousemoveとmouseupイベントを追加&lt;/li&gt;
&lt;li&gt;mousemoveでサイズ変更&lt;/li&gt;
&lt;li&gt;mouseupでmousemoveとmouseupイベント削除&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本家のソースコードは上下左右に対応した汎用的なコードなのですが、今回作ったものは決め打ちのハードコードになっています。&lt;/p&gt;
&lt;h2 id="cssflexbox"&gt;CSS(flexbox)&lt;/h2&gt;
&lt;p&gt;縦横グリッドなので、flex(column)&amp;gt;flex(row)の入れ子になってます。&lt;/p&gt;
&lt;p&gt;実際にはグリッド内の要素にも適用しているので、flex(column)&amp;gt;flex(folumn)&amp;gt;flex(row)&amp;gt;flex(row)になっています。&lt;/p&gt;
&lt;p&gt;今回やって思ったのは、flexboxはネストして使うと便利ということでした。&lt;/p&gt;
&lt;p&gt;普段からCSSをもりもり書いているわけではないのでflexboxはトップレベルに近いところで使うと勝手に思っていたのですが、ネストするとスッキリするケースもあるので複雑になりすぎない程度にはネストさせると良いと思いました。&lt;/p&gt;
&lt;h2 id="_3"&gt;レイアウト&lt;/h2&gt;
&lt;p&gt;参考にした可変グリッドがグリッド要素とリサイズバーが同レベルに並んでいる構成になっているのですが、v-forを使うとどうしてもroot要素が必要になるので同じDOM構成にならないという問題がありました。&lt;/p&gt;
&lt;p&gt;どういうことかというと、こうしたい&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;grid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;resizer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;grid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;resizer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;けど、v-forでやるとこうなります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- v-forで増える要素 --&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;grid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;resizer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- v-forで増える要素 --&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;grid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;resizer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DOMの描画をもっと細かく制御したいと思ってたら、Vue.jsにはrender関数という低レイヤでDOM描画を扱える関数があるのでtemplateの代わりにそちらを使いました。&lt;/p&gt;
&lt;p&gt;今回のような$dataのリストに対してリストの間に別のDOMを挟み込みたいというような込み入った構造を作りたいときに、このようなレイヤの低めなAPIが提供されているのは良いなぁと思いました。当たり前かもしれませが、$dataと紐付いたDOMは$dataと連動して書き換えられます。&lt;/p&gt;
&lt;p&gt;デメリットとしてはコード量がtemplateを使用する時と比べてかなり増えます、10倍くらいになった気がします。&lt;/p&gt;
&lt;h2 id="_4"&gt;問題点ぽいところ&lt;/h2&gt;
&lt;p&gt;要素を追加するときは良い感じのサイズで追加されてほしいのでflexboxで追加してるのですが、リサイズするときはflexから外して固定サイズにしてるので、リサイズ前とリサイズ後で挙動が変わってしまいますが今のところ解決策を思いついてないのでそのままです。&lt;/p&gt;</summary><category term="Vue.js"></category><category term="CSS"></category></entry><entry><title>艦これ2017冬イベE-1甲 伊26 Mマス掘り</title><link href="https://muunyblue.github.io/25d9e7c1134b5a3744cd1dea4072d6a2.html" rel="alternate"></link><published>2017-03-01T00:58:16+09:00</published><updated>2017-03-01T00:58:16+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-02-24:25d9e7c1134b5a3744cd1dea4072d6a2.html</id><summary type="html">&lt;p&gt;伊26ほしいです。伊26がほしいです。&lt;/p&gt;
&lt;p&gt;Iマスでも掘れますがIマスまで行くのに時間かかるのでMマスで掘ることにしてみました。&lt;/p&gt;
&lt;p&gt;401やUが欲しい場合はIマスに行きましょう。&lt;/p&gt;
&lt;h1 id="_1"&gt;編成&lt;/h1&gt;
&lt;p&gt;A勝利時は何も落ちない場合がほとんどなので、S勝利じゃないとドロップしない気がします。&lt;/p&gt;
&lt;p&gt;戦艦は含めることができないので、ヲ級改flagshipを倒すために雷巡の開幕魚雷と夜戦を使います。&lt;/p&gt;
&lt;p&gt;&lt;img alt="編成" src="https://i.gyazo.com/1d096829ee8477166c206ff7a13342b2.png" /&gt;&lt;/p&gt;
&lt;p&gt;後述する基地航空隊とこの編成でS勝利安定しています。制空値は盛り気味なのでもう少し少なくても良いかもしれません。&lt;/p&gt;
&lt;p&gt;3回に1回くらいバケツを使う程度の被害です。&lt;/p&gt;
&lt;p&gt;ダメージよりも疲労がたまりやすいので軽空母と秋月型、雷巡の替えがいると快適に回せそうです。&lt;/p&gt;
&lt;p&gt;&lt;img alt="資材消費" src="https://i.gyazo.com/b20076ddbe25330aa3f768f32e436676.png" /&gt;&lt;/p&gt;
&lt;p&gt;ボーキサイトは40程度です。&lt;/p&gt;
&lt;h1 id="_2"&gt;基地航空隊&lt;/h1&gt;
&lt;p&gt;いろいろ試しましたが以下の隊をIマス集中が一番安定して資材消費が割と少ないです。&lt;/p&gt;
&lt;p&gt;&lt;img alt="基地航空隊" src="https://i.gyazo.com/1231523e0cb7c9a0632b62e819176f0a.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="基地航空隊資材消費" src="https://i.gyazo.com/fa30b6107bf8bb140af9a3026d4629d5.png" /&gt;&lt;/p&gt;
&lt;p&gt;基地航空隊も疲労がたまるので、疲労がたまったら休息にし、第二航空隊を出すようにします。&lt;/p&gt;
&lt;h1 id="_3"&gt;掘り終了&lt;/h1&gt;
&lt;p&gt;相当な数掘りましたが伊26は出なかったので死亡しました。&lt;/p&gt;</summary><category term="KanColle"></category></entry><entry><title>Vimで始める型付きPython3開発</title><link href="https://muunyblue.github.io/6afd3a1bbb557f8e05f45ded7bf96836.html" rel="alternate"></link><published>2017-01-23T01:52:28+09:00</published><updated>2017-01-23T01:52:28+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-01-23:6afd3a1bbb557f8e05f45ded7bf96836.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/675774830708de1e6282eaa2ecc577dd.gif" /&gt;&lt;/p&gt;
&lt;p&gt;型付きPythonは静的型解析ツールであるmypyによる検査と、jediによる補完が効くという開発に役立つ便利な恩恵があります。&lt;/p&gt;
&lt;p&gt;実行時には(まだ)型の恩恵はないですが始めるには十分な恩恵だと感じたので始めてみました。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;venvとmypyを使うので、Python3と言ってもPython3.5(現在の最新版)を使います。&lt;/p&gt;
&lt;p&gt;スタイルチェックにはflake8を使用します。&lt;/p&gt;
&lt;h1 id="vimneovim"&gt;Vim(Neovim)の準備&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:echo has(&amp;#39;python&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:echo has(&amp;#39;python3&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;コマンドが1を返すことを確認します。もし0の場合は、Pythonを有効にします(有効にする方法は"vim python 有効"で検索)。&lt;/p&gt;
&lt;h1 id="python35"&gt;Python3.5のインストール&lt;/h1&gt;
&lt;p&gt;※Python3.6も出るみたいなので適宜その時の最新版をインストールしてください&lt;/p&gt;
&lt;p&gt;パッケージマネージャーでインストールするとPython3.5が入って便利かつ簡単です。&lt;/p&gt;
&lt;p&gt;macOS&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install python3
$ python3 --version
&lt;span class="m"&gt;3&lt;/span&gt;.5.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ubuntu16.04&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% sudo apt-get install python3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c"&gt;% python3 --version&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Windows&lt;/p&gt;
&lt;p&gt;パッケージマネージャがあるのかもしれませんが詳しくないので、インストーラからPython3.5をインストールします。&lt;/p&gt;
&lt;h1 id="_1"&gt;必要なパッケージのインストール&lt;/h1&gt;
&lt;p&gt;UbuntuとWindowsでは管理者権限が必要になるので、それぞれsudoをつける、管理者権限でcmdを起動してください。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip3 install -U flake8 mypy-lang jedi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;それぞれ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flake8はスタイルチェッカー&lt;/li&gt;
&lt;li&gt;mypyは静的型解析&lt;/li&gt;
&lt;li&gt;jediは補完エンジン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;です。&lt;/p&gt;
&lt;p&gt;mypyは型付きPythonに必須のツールです。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/python/mypy" title="python/mypy: Optional static typing for Python 2 and 3 (PEP484)"&gt;python/mypy: Optional static typing for Python 2 and 3 (PEP484)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;後述するsyntasticやneomakeと組み合わせて使うとファイル編集時に型チェックができてとても良いです。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/python/typeshed" title="python/typeshed: Collection of library stubs for Python, with static types"&gt;typeshed&lt;/a&gt;にてライブラリや3rd-partyパッケージの型にも対応しようとしていて今後の発展に注目です。&lt;/p&gt;
&lt;p&gt;(たとえばFlaskは現在対応中のようです(help wanted by Guido...) =&amp;gt; &lt;a href="https://github.com/python/typeshed/issues/28" title="Stub for flask · Issue #28 · python/typeshed"&gt;Stub for flask · Issue #28 · python/typeshed&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;次にflake8ですが、スタイルチェッカーにはpylintやhackingなどがありますがflake8を選びました。理由は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flake8で十分と感じた&lt;/li&gt;
&lt;li&gt;flake8だけでも割りと遅いので併用したくない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということでflake8単体で使っています。&lt;/p&gt;
&lt;p&gt;しかもsyntasticを使用した場合、非同期に実行されないのでスタイルチェッカーが重いと結構なストレスになりそうです。&lt;/p&gt;
&lt;h1 id="venv"&gt;環境構築(venv)&lt;/h1&gt;
&lt;p&gt;デフォルトでvenvが同梱されているのでそちらを使います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir progect
$ pyvenv project
$ &lt;span class="nb"&gt;cd&lt;/span&gt; project
$ &lt;span class="nb"&gt;source&lt;/span&gt; bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;activateファイルにfishスクリプトも用意されているのですが、"$(var)"を使っていてエラーになるので該当部分を"(var)"に修正すれば動きます。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;pyvenvコマンドをすると色々ファイルが作られるのでgitignoreしたくなります。&lt;/p&gt;
&lt;p&gt;GitHub公式のgitignoreを使うと良いです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/github/gitignore/blob/master/Python.gitignore" title="gitignore/Python.gitignore at master · github/gitignore"&gt;gitignore/Python.gitignore at master · github/gitignore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/github/gitignore/blob/master/Global/VirtualEnv.gitignore" title="gitignore/VirtualEnv.gitignore at master · github/gitignore"&gt;gitignore/VirtualEnv.gitignore at master · github/gitignore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この2つを組み合わせればPythonのgitignoreは多くのケースで十分そうです。&lt;/p&gt;
&lt;p&gt;後者の方は&lt;a href="http://qiita.com/katsew/items/5cade12fa743a2f31f25" title="グローバルで.gitignoreを適応する - Qiita"&gt;Globalのgitignore&lt;/a&gt;に入れると良いようです。&lt;/p&gt;
&lt;h1 id="neovimvim"&gt;Neovim/Vimの設定&lt;/h1&gt;
&lt;p&gt;flake8とmypyのスタイルチェックをSyntasticまたはNeomakeで行い、jediで補完します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/ed444e6bcf1f5b7071eff9cfbf76601e.png" /&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;型チェック &amp;amp; スタイルチェック&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/vim-syntastic/syntastic" title="vim-syntastic/syntastic: Syntax checking hacks for vim"&gt;syntastic&lt;/a&gt;または&lt;a href="https://github.com/neomake/neomake" title="neomake/neomake: Async :make and linting framework for Neovim/Vim"&gt;neomake&lt;/a&gt;を使って、ファイル保存時にチェックします。&lt;/p&gt;
&lt;p&gt;インストール方法は各プラグインマネージャなどに従って下さい。&lt;/p&gt;
&lt;p&gt;Python用の設定は以下のように書きます。&lt;/p&gt;
&lt;p&gt;syntastic↓&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let g:syntastic_python_checkers = [&amp;#39;python&amp;#39;, &amp;#39;flake8&amp;#39;, &amp;#39;mypy&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;neomake↓&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let g:neomake_python_enabled_makers = [&amp;#39;python&amp;#39;, &amp;#39;flake8&amp;#39;, &amp;#39;mypy&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考までに私の設定です。プラグインマネージャにはdein.vimを使ってtomlファイルでプラグインを管理しています、Neovimのときはneomake、Vimのときはsyntasticを使っています。&lt;/p&gt;
&lt;p&gt;(neomakeはNeovim専用ではなくVim8.0.0027以降であれば使えます)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;neomake/neomake&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;has(&amp;#39;nvim&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;hook_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;autocmd! BufEnter,BufWritePost * Neomake&lt;/span&gt;
&lt;span class="na"&gt;let g:neomake_python_enabled_makers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;[&amp;#39;python&amp;#39;, &amp;#39;flake8&amp;#39;, &amp;#39;mypy&amp;#39;]&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;vim-syntastic/syntastic&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!has(&amp;#39;nvim&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;hook_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;let g:syntastic_always_populate_loc_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;let g:syntastic_check_on_open&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;let g:syntastic_check_on_wq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;
&lt;span class="na"&gt;&amp;quot; for Python&lt;/span&gt;
&lt;span class="na"&gt;let g:syntastic_python_checkers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;[&amp;#39;python&amp;#39;, &amp;#39;flake8&amp;#39;, &amp;#39;mypy&amp;#39;]&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_3"&gt;補完&lt;/h2&gt;
&lt;p&gt;jediをneocomplete.vimとdeoplete.nvimから利用する方法を紹介します。&lt;/p&gt;
&lt;p&gt;jediはType Hintsがついてると型に応じてメソッド名などを補完するのでかなり便利です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/675774830708de1e6282eaa2ecc577dd.gif" /&gt;&lt;/p&gt;
&lt;p&gt;neocomplete.vimとdeoplete.nvimのインストール方法については省略します。&lt;/p&gt;
&lt;h3 id="neocompletevim"&gt;neocomplete.vim&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/davidhalter/jedi-vim" title="davidhalter/jedi-vim: Using the jedi autocompletion library for VIM."&gt;davidhalter/jedi-vim: Using the jedi autocompletion library for VIM.&lt;/a&gt;をプラグインを追加して以下の設定をします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;autocmd&lt;/span&gt; &lt;span class="n"&gt;FileType&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setlocal&lt;/span&gt; &lt;span class="n"&gt;omnifunc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;jedi&lt;/span&gt;&lt;span class="c1"&gt;#completions&lt;/span&gt;
&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;jedi&lt;/span&gt;&lt;span class="c1"&gt;#completions_enabled = 0&lt;/span&gt;
&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;jedi&lt;/span&gt;&lt;span class="c1"&gt;#auto_vim_configuration = 0&lt;/span&gt;
&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;neocomplete&lt;/span&gt;&lt;span class="c1"&gt;#force_omni_input_patterns.python = &amp;#39;\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考: &lt;a href="http://kozo2.hatenablog.com/entry/2014/01/22/050714" title="jedi-vimとneocomplete.vimを併用する際に行っておきたい設定 - kozo2's blog"&gt;jedi-vimとneocomplete.vimを併用する際に行っておきたい設定 - kozo2's blog&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="deopletenvim"&gt;deoplete.nvim&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/zchee/deoplete-jedi" title="zchee/deoplete-jedi: deoplete.nvim source for Python"&gt;zchee/deoplete-jedi: deoplete.nvim source for Python&lt;/a&gt;をプラグインに追加します。&lt;/p&gt;
&lt;p&gt;venvを使うのでグローバルにインストールされているPythonへのパスの設定が必要です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let g:python_host_prog = &amp;#39;/full/path/to/neovim2/bin/python&amp;#39;
let g:python3_host_prog = &amp;#39;/full/path/to/neovim3/bin/python&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="preview"&gt;Previewが邪魔な人向け&lt;/h3&gt;
&lt;p&gt;jediを使っているとPreviewがでてきて邪魔という方が多く見受けられます、Vimの機能なのでVim側の設定で変えられます。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Shougo/deoplete.nvim/issues/298" title="Leave the preview window always closed · Issue #298 · Shougo/deoplete.nvim"&gt;Previewを出さない&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set completeopt-=preview
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/Shougo/deoplete.nvim/issues/115" title="Close preview window after completion? · Issue #115 · Shougo/deoplete.nvim"&gt;補完終了時に自動で閉じる&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;autocmd&lt;/span&gt; &lt;span class="nv"&gt;InsertLeave&lt;/span&gt;,&lt;span class="nv"&gt;CompleteDone&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;pumvisible&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;pclose&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;など良い感じに設定すると良いです。&lt;/p&gt;
&lt;h1 id="_4"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;型の恩恵は実行時には(まだ)ないですが、静的型チェッカー(mypy)、jediによる補完と開発に置ける恩恵はなかなかのものだと思うのでおすすめです。&lt;/p&gt;
&lt;p&gt;紹介した方法は新しいPython1つしかインストールしてないので、古いバージョンでのデバック作業などが必要になった場合に困りそうですがそれはまた必要になってから考えようかと思ってます。とりあえず現状はCIするときにtoxで各バージョンのテストを走らせることで確認しています。&lt;/p&gt;</summary><category term="Python"></category><category term="Vim"></category><category term="Neovim"></category></entry><entry><title>ErgoDoxを混合軸にした話</title><link href="https://muunyblue.github.io/f0bbf5fb2b067fda7b491dc2307411e4.html" rel="alternate"></link><published>2017-01-19T00:44:25+09:00</published><updated>2017-01-19T00:44:25+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-01-18:f0bbf5fb2b067fda7b491dc2307411e4.html</id><summary type="html">&lt;p&gt;&lt;a href="http://qiita.com/advent-calendar/2016/ergodox" title="ErgoDox Advent Calendar 2016 - Qiita"&gt;ErgoDox Advent Calendar 2016&lt;/a&gt;の25日目の記事になります。もう1月ですがなぜか25日だけ空いていたので飛び込み参加しました。&lt;/p&gt;
&lt;p&gt;もともとGREETECH赤軸だったのですが、GATERONの緑軸を購入してまぜまぜしました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://pbs.twimg.com/media/C17ogQmUkAAZQ9i.jpg" /&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;経緯&lt;/h1&gt;
&lt;p&gt;MX軸は初めてというのもあって、はじめはこんなもんかーと思って使っていたのですが、半年くらい使うと不満が出てきました。&lt;/p&gt;
&lt;h2 id="_2"&gt;底打ちがつらい&lt;/h2&gt;
&lt;p&gt;ErgoDox購入前は軽いほうが疲れないと思っていたのですが、MX軸のキーストロークは(キーキャップやO-ringである程度調整できますが)割と深いので意外と疲れることに気づきました。&lt;/p&gt;
&lt;p&gt;あとは、軽くて深く押し込んでしまうのでキーが戻るときの音が大きくなります。せっかくO-ringをつけて底打ち時の音は軽減しても戻るときに音が出てしまうのでどんまいな感じがしました。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;実際に使ってみた結果、黒軸+O-ringがかなり静音なので静音好きな方におすすめです。赤軸よりO-ring効果がある感じがします。&lt;/p&gt;
&lt;p&gt;しかし重いので底打ちする勢いでタイピングしてると指の疲弊を感じます、なぞるようにタイピングしないとな感じですが、テンションの上がったときとかはつい強めに打ち込んでしまうので謎に疲れます。慣れが必要そうです。&lt;/p&gt;
&lt;h2 id="enter"&gt;親指Enterが雑&lt;/h2&gt;
&lt;p&gt;セパレートしてないキーボード使っていると親指はSpaceバーを強打する用途が多いのであまり繊細な入力を要求されていませんが、Enterは割りと繊細に使われることが多いので、親指Enterをするとなかなかつらい誤爆してしまうことが多かったです、例えば&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意図しないコマンドの発火&lt;/li&gt;
&lt;li&gt;IME変換確定Enterのつもりが勢い余って改行&lt;/li&gt;
&lt;li&gt;上記の現象でslackに誤投稿&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などで、チャタってるわけではないのに二度打ちしてしまっていることが多くてツラミが溜まっていました。&lt;/p&gt;
&lt;p&gt;というわけで、親指には重くてフィードバックのある軸のほうが向いてそうという結論になりました。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;実際に緑軸親指Enterを試した結果ですが、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ｶﾁｯとなるので確実に1回クリックしたという感触がある安心感&lt;/li&gt;
&lt;li&gt;実際に入力されるｶﾁｯの前に一番重いところがあるので思い留まれる(&lt;a href="http://www.wasdkeyboards.com/mechanical-keyboard-guide" title="WASD Keyboards Mechanical Keyboard Guide"&gt;軸の特性&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;と良い感じです、青軸だと軽すぎるので雑な親指の持ち主は思い留まれないこともありそうなので緑軸がおすすめです。&lt;/p&gt;
&lt;p&gt;緑軸はうるさいというデメリットがありますが、実際うるさいです。O-ring付けたので底打ち時の音は軽減されていますがｶﾁｯ音はなります。&lt;/p&gt;
&lt;p&gt;音はどうしようもないので緑軸の数をできるだけ減らす方向で軸を交換しました。&lt;/p&gt;
&lt;h1 id="_3"&gt;軸交換&lt;/h1&gt;
&lt;p&gt;ErgoDoxのはんだを取らないで軸だけを交換する話は、以前参加した&lt;a href="https://eventdots.jp/column/2" title="ErgoDox users meet up - dots.［ドッツ］"&gt;ErgoDox users meet up&lt;/a&gt;で聞いていて、&lt;a href="http://okapies.hateblo.jp/entry/2016/12/03/010105" title="ErgoDox の壊れたキースイッチを交換する - Okapies' Archive"&gt;ErgoDox の壊れたキースイッチを交換する - Okapies' Archive&lt;/a&gt;でもさらに詳しい情報があったのでとても心強かったです。&lt;/p&gt;
&lt;p&gt;今回はGREETECH⇔GATERONをしましたが、GREETECH,GATERON,CHERRYは相互に交換できるみたいです。&lt;/p&gt;
&lt;h2 id="gateron"&gt;GATERON緑軸購入&lt;/h2&gt;
&lt;p&gt;緑軸なんて手に入れるのめんどいんだろうなぁ、、とMassdrop待ちを覚悟していたのですがなんと国内で手に入りました。(20170118現在、緑軸80個があと1つあります)&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="http://store.shopping.yahoo.co.jp/dhzfwcmb3iso3a5g3oehjpny3a/z5fgjgg5jr.html"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;yahooポイントを駆使して80個1500円で手に入れました。最高です。&lt;/p&gt;
&lt;p&gt;この方、ErgoDoxのBamboo Caseなどを安く出店しててすごい欲しくなりましたが売り切れていました。&lt;/p&gt;
&lt;p&gt;今回は使わなかったMassdropですが、バネのみとかも売られているという情報もあるのでMassdrop漁りすると面白そうです。&lt;/p&gt;
&lt;h2 id="_4"&gt;緑軸と赤軸の混合&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="https://pbs.twimg.com/media/C17ohQmUUAA2yIl.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;緑軸のバネを赤軸につければ、黒軸のような重みのある軸が作れます(疑似黒軸)&lt;/p&gt;
&lt;p&gt;反対に赤軸のバネを緑軸につければ、青軸のような軽い軸が作れます(疑似青軸)&lt;/p&gt;
&lt;p&gt;というわけで緑軸を買うと、赤軸、緑軸、疑似黒軸、疑似青軸が使えるようになります。&lt;/p&gt;
&lt;p&gt;個人的に緑軸は気に入っていて、簡単には入力ポイントまで押せないので誤入力が防げてる感じがあります、疑似青軸も試してみましたが割りとｽｯと入力ポイントまで押せてしまうので緑買って良かったです。&lt;/p&gt;
&lt;h2 id="_5"&gt;作業の様子&lt;/h2&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/y_y_m_m/status/819348163337207809"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;ほとんどのキーを置き換えましたが、&lt;a href="http://okapies.hateblo.jp/entry/2016/12/03/010105" title="ErgoDox の壊れたキースイッチを交換する - Okapies' Archive"&gt;この記事&lt;/a&gt;のおかげか3時間程度で終わりました。&lt;/p&gt;
&lt;p&gt;クリップがこんな形で役に立つとは思わなかったです。&lt;/p&gt;
&lt;p&gt;ちなみに道具は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;キーキャップ引き抜き工具&lt;/li&gt;
&lt;li&gt;ペンチ*2&lt;/li&gt;
&lt;li&gt;小さめのクリップ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で十分でした。&lt;/p&gt;
&lt;h1 id="_6"&gt;結果&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="https://pbs.twimg.com/media/C2aU5SQUkAImT4-.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/1eb5eaa393a72d9eae342a72eacb65e5.png" /&gt;&lt;/p&gt;
&lt;p&gt;緑は緑軸、疑似青軸、黒っぽいところは疑似黒軸、赤は赤軸(変更なし)。&lt;/p&gt;
&lt;p&gt;基本的にキーストロークを浅く+静音にする目的でO-ringを2つ付けていますが、印字してある白のキーキャップはプロファイルが高低差のあるDCSなので、黒が濃い部分(数字のキー)は背が高いのでO-ringを3つ、黒が薄い部分(数字の下の列)は背が低いのでO-ringを1つにしています。&lt;/p&gt;
&lt;p&gt;キープロファイル(キーの高さ)ですが、DSA(全部同じ高さ)を良いと思っていたのですが、リストレスト(GRIFITI)を使い始めてからはDCS(高低差がある)のほうがタイピングがしやすいので、以前のカラフルなDSAのキーキャップから変更しました。&lt;/p&gt;
&lt;p&gt;親指で押すところの黒軸周辺が全部クリッキーな軸にしてあるのは、誤って黒軸部分以外をクリックしたときに即気づけるようにそうしてあります。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;買えてみて1週間位使っていますが結構快適でだいたい思惑通りな感じです。&lt;/p&gt;
&lt;p&gt;緑軸のクリッキーな打キー感最高だなぁと思いながら親指を使えてて楽しいです。&lt;/p&gt;
&lt;p&gt;またしばらく使ってみて改善欲求が出るかもしれないですが、当面これで楽しくプログラミングができそうです。&lt;/p&gt;
&lt;p&gt;あと、アドベントカレンダーで&lt;a href="https://gist.github.com/yymm/0ccbe5f129e10c72b978" title="Ergodox買おうの会"&gt;Ergodox買おうの会&lt;/a&gt;のリンクが貼られててありがたい気持ちになりました。"会"と言いつつ社内の誰も乗ってくれなかったので誰かの役に立っていればとても嬉しいです。&lt;/p&gt;</summary><category term="ErgoDox"></category></entry><entry><title>Isomorphic Javascript 開発話 in 2016 (Koa + React + Material-UI)</title><link href="https://muunyblue.github.io/7792b558ca0c76d24d695582021ac501.html" rel="alternate"></link><published>2017-01-18T00:59:13+09:00</published><updated>2017-01-18T00:59:13+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-01-17:7792b558ca0c76d24d695582021ac501.html</id><summary type="html">&lt;p&gt;去年(2016年8月頃)、社内で使う電話帳blacklistアプリをIsomorphic Javascriptで作りながらWikiにまとめていた開発話が面白い感じになっていたのでその転載です。&lt;/p&gt;
&lt;p&gt;GitLab上で開発していたのでJavascript以外にもGitLab CIの話もあります。&lt;/p&gt;
&lt;h1 id="_1"&gt;開発話&lt;/h1&gt;
&lt;p&gt;Reactを使用して楽をしたいので、開発言語はNode.jsを選択。&lt;/p&gt;
&lt;p&gt;versionは新しいものを使っていこうと思うので、v6.3.0を使っていきます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir blacklist
$ &lt;span class="nb"&gt;cd&lt;/span&gt; blacklist
$ npm init
$ git init
$ vim .gitignore &lt;span class="c1"&gt;# https://gist.github.com/pmq20/2887714&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;全てESで書けるのでisomorphicということになる。&lt;/p&gt;
&lt;p&gt;Node.jsの問題はここから使用するツールをいろいろ選択肢ないとなところ...&lt;/p&gt;
&lt;p&gt;まずは、定番ぽいものを選択してboilerplateを作成していく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;サーバサイド =&amp;gt; Koa&lt;/li&gt;
&lt;li&gt;フロントエンド =&amp;gt; React&lt;/li&gt;
&lt;li&gt;コンパイラ =&amp;gt; Babel&lt;/li&gt;
&lt;li&gt;モジュール管理 =&amp;gt; Webpack&lt;/li&gt;
&lt;li&gt;ビルド =&amp;gt; Gulp(この手のbuildツール使いたくない...)&lt;/li&gt;
&lt;li&gt;テスト =&amp;gt; Mocha&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ｳｯ。。。。ｵｵｽｷﾞ。。。。。&lt;/p&gt;
&lt;h1 id="boilerplate"&gt;Boilerplate&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://qiita.com/masato/items/b4fff7e885f78cd96edb" title="ES6で書くIsomorphicアプリ入門 - Part1: リソース - Qiita"&gt;ES6で書くIsomorphicアプリ入門 - Part1: リソース - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;このリンクからわかるように様々な人が色んなboilerplateを作成していて、しかも割りと複雑で控えめに言って地獄。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/dozoisch/koa-react-full-example" title="dozoisch/koa-react-full-example: Full example using Koa, React, Passport, Mongoose, Webpack, Mocha, Babel"&gt;dozoisch/koa-react-full-example: Full example using Koa, React, Passport, Mongoose, Webpack, Mocha, Babel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今回は必要ないもの多すぎる気がするけど参考に眺めてみると...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;npmコマンドで諸々のことができるようなのでgulpは死亡。&lt;/li&gt;
&lt;li&gt;webpackが開発サーバ建てれるようなのでwebpackの調査&lt;/li&gt;
&lt;li&gt;.babelrcという設定ファイルがあるようなのでbabelの調査&lt;/li&gt;
&lt;li&gt;eslint使うの良さそう&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;いろいろ大変そうだが以下の記事が最高だと感じたので全面的に参考にしていく。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.joanboixados.com/building-a-boilerplate-for-a-koa-redux-react-application-including-webpack-mocha-and-sass/" title="Building a boilerplate for a Koa, Redux, React application including Webpack, Mocha and SASS"&gt;Building a boilerplate for a Koa, Redux, React application including Webpack, Mocha and SASS&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="setup-server-side-koa"&gt;setup server-side (koa)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save koa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とりあえず一番シンプルなKoaを書いてみます。&lt;/p&gt;
&lt;p&gt;./server.js&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;koa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;koa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;koa&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello from koajs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Koaはシンプルな機能のみを提供していて、必要な機能はmiddlewareを追加していくアーキテクチャになっているので、APIサーバを書く予定なのでまずはrouterを追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save koa-route
&lt;span class="o"&gt;(&lt;/span&gt;$ npm install --save koa-cors&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Koa単体だと、Cross Origin Resource Sharing (CORS)の対策がないのでAPIサーバを実装する場合には入れたほうが良い。&lt;/p&gt;
&lt;p&gt;テンプレートエンジンと静的ファイルも使いたいので、必要なパッケージを追加します。&lt;/p&gt;
&lt;p&gt;(参考: &lt;a href="http://yosuke-furukawa.hatenablog.com/entry/2013/12/26/125351" title="koa入門 - from scratch"&gt;koa入門 - from scratch&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save koa-static co-views
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これらのmiddle wareを使ってserver.jsを書きなおします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;koa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;koa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;koa-route&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;koa-static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;views&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;co-views&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;koa&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// View&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;views&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/views&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="c1"&gt;// API&lt;/span&gt;


&lt;span class="c1"&gt;// Static&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/app/dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="setup-front-end-babelwebpackreact"&gt;setup front-end (babel/webpack/react)&lt;/h2&gt;
&lt;p&gt;ディレクトリ構成は以下のようにする方針で行きます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── app
│   ├── dist
│   │   └── bundle.js
│   └── src
│       └── main.js
├── package.json
├── server.js
├── views
│   └── index.html
└── webpack.config.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;まずWebpackの準備をします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save webpack
$ npm install --save-dev webpack-dev-server 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最初のwebpack.config.jsを書いてみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;./app/src/main.js&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/app/dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;publicPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bundle.js&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;devServer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;contentBase&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./app/dist&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;publicPathは、&lt;a href="http://www.pupha.net/archives/3296/" title="タスクランナーを使わずに webpack だけでフロントエンド開発する方法 - yukisovのメモ帳"&gt;この記事&lt;/a&gt;によると、&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;publicPath は webpack-dev-server で自動コンパイルするために必要（URLにおけるJSファイルへのパスを書く）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ということなので、index.htmlから参照するbundle.jsのディレクトリを指定します。&lt;/p&gt;
&lt;p&gt;Webpackを実行してみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;node_modules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;webpack&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;448&lt;/span&gt;&lt;span class="n"&gt;a36d28f029188e4ee&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;Version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;webpack&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.13.1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nc"&gt;Time&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Asset&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;Size&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;Chunks&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="n"&gt;Chunk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Names&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="mf"&gt;1.51&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kB&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;emitted&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;multi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;bundle.jsが誕生しました。package.jsonのscriptsにwebpackビルドのコマンドを追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &amp;quot;scripts&amp;quot;: {
    &amp;quot;webserver&amp;quot;: &amp;quot;node server.js&amp;quot;,
    &amp;quot;build&amp;quot;: &amp;quot;./node_modules/.bin/webpack&amp;quot;,
    &amp;quot;dev&amp;quot;: &amp;quot;./node_modules/.bin/webpack-dev-server&amp;quot;
  },
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで、"npm run build"や"npm run dev"でwebpackビルドやdev-serverの起動ができます。&lt;/p&gt;
&lt;p&gt;さぁ、ここからが本番です。&lt;del&gt;Let's yak shaving!&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;Webpackにbabelビルドを追加します。ついでにdevServerにHotRoadも追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;webpack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;./app/src/main.js&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;loaders&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
      &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/\.jsx?$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/node_modules/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;babel&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.jsx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/app/dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;publicPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bundle.js&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;devServer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;contentBase&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./app/dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;historyApiFallback&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;hot&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;inline&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HotModuleReplacementPlugin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;babelビルドのためにbabel-loaderをインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt; &lt;span class="n"&gt;babel&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Webpack固有の記法がじゃんじゃんでてきてｳｯってなりますが、&lt;a href="http://dackdive.hateblo.jp/entry/2016/04/13/123000" title="webpack.config.jsの読み方、書き方 - dackdive's blog"&gt;webpack.config.jsの読み方、書き方 - dackdive's blog&lt;/a&gt;などの有用な日本語記事を呼んで気を安らげると良いです。&lt;/p&gt;
&lt;p&gt;dev-serverでhotリロードするにはdistにhtmlが配置されてる必要があるようです(参考: &lt;a href="http://dackdive.hateblo.jp/entry/2016/05/07/183335" title="webpack-dev-serverの基本的な使い方とポイント - dackdive's blog"&gt;webpack-dev-serverの基本的な使い方とポイント - dackdive's blog&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Koaのテンプレートとしてhtmlを扱っていたので、Koa+Webpack+Hotという構成を取る...?という流れになります。&lt;/p&gt;
&lt;p&gt;そしてさっと探すだけでそういうものが見つかります。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/glenjamin/webpack-hot-middleware" title="glenjamin/webpack-hot-middleware: Webpack hot reloading you can attach to your own server"&gt;glenjamin/webpack-hot-middleware: Webpack hot reloading you can attach to your own server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;見てみると、serverサイドのコードにhotリロードのためだけに手を入れる必要がでてきます。&lt;/p&gt;
&lt;p&gt;デプロイするときは無効にするようにwebpackでやったりするのかなぁ...&lt;/p&gt;
&lt;p&gt;ｳｯ...ｵ､､､ｵｯ､､､ｵｩｴｪｪｪｪ&lt;/p&gt;
&lt;p&gt;危険を察知したなので使うのをやめます。&lt;/p&gt;
&lt;p&gt;KoaとWebpackを組み合わせるのはisomorphicとは言え面倒さがある気がします。&lt;/p&gt;
&lt;p&gt;サーバサイドとフロントエンドで同じ言語を使えますが、その壁を綺麗さっぱりぶち壊すことはできません。&lt;/p&gt;
&lt;p&gt;あらためて方針を決めていきます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hotリロードは便利なので使う&lt;/li&gt;
&lt;li&gt;htmlはSPA的(KoaのAPIを叩く)に使うことにして開発時はwebpack-dev-serverを使う&lt;/li&gt;
&lt;li&gt;Koaで作るAPIも動かす必要があるので、開発時はKoaサーバとwebpack-dev-serverの両方を起動した状態で開発&lt;/li&gt;
&lt;li&gt;デプロイ時は、Koaでapp/dist/index.htmlをViewとして使うがテンプレートとしては全く使用しない(ただ表示するのみ)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;開発中に2つサーバを動かすことを妥協点としてやっていくことにします。&lt;/p&gt;
&lt;p&gt;(正直この辺の選択は難しいのと個人差がありそうなので、皆さんがどうしてるか知りたいところ...)&lt;/p&gt;
&lt;p&gt;ここで今までのことの60,70%くらいが水の泡と化したので改めて検討し直します。&lt;/p&gt;
&lt;h1 id="_2"&gt;方針を決める&lt;/h1&gt;
&lt;p&gt;フロントエンドのほうはそのままwebpackで行きます。&lt;/p&gt;
&lt;p&gt;サーバサイドはAPIサーバとindex.htmlを単に表示して、jsとcssをstaticファイルとして配信することができればokです。&lt;/p&gt;
&lt;p&gt;本番環境ではフロントエンドをWebpackでビルドして通ったらKoaサーバを動かして完了。&lt;/p&gt;
&lt;p&gt;開発環境ではwebpack-dev-serverでフロントエンド開発、KoaサーバでAPI開発をします。(一応Koaサーバのindex.htmlで本番環境と同等の状態で動かせますがHotリロードはない)&lt;/p&gt;
&lt;h1 id="setup-server-side-koa_1"&gt;setup server-side (Koa)&lt;/h1&gt;
&lt;p&gt;koa-staticとkoa-routeを使ってSPAとAPIを同じプロジェクト内に作ります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;koa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;koa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;koa-route&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;koa-static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;koa&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// View&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/app/dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// API&lt;/span&gt;

&lt;span class="c1"&gt;// app.use(route.get(&amp;#39;/api/xxx&amp;#39;, function *(next) {&lt;/span&gt;
&lt;span class="c1"&gt;// }));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="setup-front-end-webpack-babel-react"&gt;setup front-end (webpack, babel, react)&lt;/h1&gt;
&lt;p&gt;reactを使う方向でディレクトリ構成を改めて決めていきます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── app
│   ├── dist
│   │   ├── bundle.js
│   │   └── index.html
│   └── src
│       ├── components
│       │   └── App.jsx
│       └── index.jsx
├── package.json
├── server.js
└── webpack.config.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;webpackを改めて書き直します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;webpack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;./app/src/index&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;loaders&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
      &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/\.jsx?$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/node_modules/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;loaders&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;babel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.jsx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/app/dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;publicPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bundle.js&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;devServer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;contentBase&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./app/dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;historyApiFallback&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;hot&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;inline&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HotModuleReplacementPlugin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;reactを使っていくので必要なものをインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save react react-dom
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;babelでコンパイルするのですが、babelをreactとimportに対応させるためにパッケージと.babelrcが必要です(しばらくハマった...)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save-dev babel-preset-es2015 babel-preset-react
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;.babelrc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;presets&amp;quot;: [&amp;quot;react&amp;quot;, &amp;quot;es2015&amp;quot;]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで"npm run dev"でhot-reloadなwebpack-dev-server(:8080)でフロントエンド開発ができます。&lt;/p&gt;
&lt;p&gt;最後に、ブラウザでのdebug用にsource-mapの追加と、pathが相対パスなのを修正します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;webpack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;devtool&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;source-map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;app/src/index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;loaders&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
      &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/\.jsx?$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/node_modules/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;loaders&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;babel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.jsx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;app/dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;publicPath&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bundle.js&amp;#39;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;devServer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;contentBase&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;app/dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;historyApiFallback&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;hot&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;inline&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HotModuleReplacementPlugin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="setup-testlint"&gt;setup test/lint&lt;/h1&gt;
&lt;p&gt;mochaとeslintのセットアップをしていきます。&lt;/p&gt;
&lt;h2 id="eslint"&gt;eslint&lt;/h2&gt;
&lt;p&gt;eslintをdevにインストールして、initします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eslint&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;node_modules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;eslint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;How&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;would&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;like&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ESLint&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Answer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;questions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ECMAScript&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ES6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Browser&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CommonJS&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;No&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;JSX&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;React&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;What&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;indentation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Spaces&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;What&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Single&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;What&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Unix&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;semicolons&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;What&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;JavaScript&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Installing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;react&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;blacklist&lt;/span&gt;&lt;span class="mf"&gt;@1.0.0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;└─┬&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;react&lt;/span&gt;&lt;span class="mf"&gt;@6.1.2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;jsx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="mf"&gt;@1.3.1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vimのsyntasticにeslintを使うように書いておくと、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_javascript_checkers &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;&amp;#39;eslint&amp;#39;&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;今いるディレクトリのeslint.jsを読み込んでくれます。&lt;/p&gt;
&lt;p&gt;実はinitで吐いたeslint設定では、jsx内で使ってるはずの変数に対して&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/e4d0a9c09cbb3d9ddb09dcd6fcef3009.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;error  'App' is defined but never used  (no-unused-vars)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;になります、これに困ってる方がたくさんいます&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/eslint/eslint/issues/1534" title="es6jsx: no-unused-vars misses JSX references · Issue #1534 · eslint/eslint"&gt;es6jsx: no-unused-vars misses JSX references · Issue #1534 · eslint/eslint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/eslint/eslint/issues/2054" title="JSX no-unused-vars · Issue #2054 · eslint/eslint"&gt;JSX no-unused-vars · Issue #2054 · eslint/eslint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;というわけで、initで生成したeslintの設定を少し変えてあげる必要があります。&lt;/p&gt;
&lt;p&gt;eslint-plugin-reactのREADMEにあるように、rulesを追加します。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/yannickcr/eslint-plugin-react" title="yannickcr/eslint-plugin-react: React specific linting rules for ESLint"&gt;yannickcr/eslint-plugin-react: React specific linting rules for ESLint&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;rules&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;react/jsx-uses-react&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;react/jsx-uses-vars&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;おすすめルールを全て有効にするようにしてもいいなら&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;extends&amp;quot;: [&amp;quot;eslint:recommended&amp;quot;, &amp;quot;plugin:react/recommended&amp;quot;],
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;のようにしても良さそうです。なんとなくこっちのほうが良さそうなのでextendsのほうを採用します。&lt;/p&gt;
&lt;p&gt;npm run lintで実行できるようにします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;lint&amp;quot;: &amp;quot;./node_modules/.bin/eslint server.js app/src/* --ext .js --ext .jsx&amp;quot;,
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="mocha"&gt;mocha&lt;/h2&gt;
&lt;p&gt;babelを噛ましてテストをするのでbabel-coreもインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save-dev babel-core mocha
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;assertにはchaiを使っているケースが多いですが、せっかく日本人なのでpower-assertを使おうと思います。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://qiita.com/gitseitanaka/items/ea47d261284879a1d774" title="mocha + power-assert環境の構築 - Qiita"&gt;mocha + power-assert環境の構築 - Qiita&lt;/a&gt;を参考にインストール。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;intelli&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;espower&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt; &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;assert&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;npm run testでテストをするためにpackage.jsonのscriptsにコマンドを作成します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./node_modules/mocha/bin/mocha --require intelli-espower-loader --recursive&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;testディレクトリにserver-test.jsを作成してテストを書いてみます。&lt;/p&gt;
&lt;p&gt;mochaはざっと調べると、describeで大枠を作ってその中にitで実際に行うテストを複数定義していく流れぽいです。&lt;/p&gt;
&lt;p&gt;mochaでKoaのテストをする方法を調べてみると、APIのテストはsupertestを使うのが良さそうです。&lt;/p&gt;
&lt;p&gt;今回はViewは最低限のものを返しているだけなのでテストの必要はない感じです。しかも&lt;a href="http://qiita.com/p-baleine@github/items/915703d6df575b427c7e" title="koaでのテスト - Qiita"&gt;koaでのテスト - Qiita&lt;/a&gt;によるとViewのテストが大変そうなのでやりたくない感じもあります。&lt;/p&gt;
&lt;p&gt;Koajsのexmapleプロジェクトを参考にすると良い感じあります。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/koajs/examples/blob/master/hello-world/test.js" title="examples/test.js at master · koajs/examples"&gt;examples/test.js at master · koajs/examples&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;assert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;power-assert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../server&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;supertest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;api&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;request&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/api/hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;サーバサイドのテストはこれでokです。&lt;/p&gt;
&lt;p&gt;フロントエンドのテストはbabelでコンパイルする必要があるのでちょっと変わってきます。しかもサーバサイド(nodejs)のコードをbabelコンパイルするとKoaのGenerator周りのコードが盛大にエラーを吐くので別々のテストコマンドでテストするほうが良さそうです。 =&amp;gt; &lt;a href="http://qiita.com/devneko/items/c7ddb31f504c8c2a5ac5" title="Node.js &amp;amp; webpack &amp;amp; babel で「 regeneratorRuntime is not defined」が発生する場合の対処 - Qiita"&gt;Node.js &amp;amp; webpack &amp;amp; babel で「 regeneratorRuntime is not defined」が発生する場合の対処 - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;......&lt;/p&gt;
&lt;p&gt;.........&lt;/p&gt;
&lt;p&gt;いよいよisomorphicが幻想だとわかってきました。というより自分の想像していたisomorphicが大きすぎる解釈だったと気付きました。サーバサイドとフロントエンドは別物です、全てESで書けるとはいえjavascriptとnodejsは違います、しっかり線引して扱うと良いということがわかりました。&lt;/p&gt;
&lt;h1 id="boilerplate_1"&gt;boilerplate完成&lt;/h1&gt;
&lt;p&gt;ｾﾞｪ...ｾﾞｪ...&lt;/p&gt;
&lt;p&gt;やっと記念すべき最初のコミットが完成しました。&lt;/p&gt;
&lt;p&gt;最終的なディレクトリ構成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── .babelrc
├── .eslintrc.js
├── .gitignore
├── app
│   ├── dist
│   │   ├── bundle.js
│   │   └── index.html
│   ├── src
│   │   ├── components
│   │   └── index.jsx
│   ├── test
│   │   └── model-test.js
│   └── webpack.config.js
├── package.json
├── server.js
└── test
    └── server-test.js
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;webpackはフロントエンドしか関係していないのでappに配置&lt;/li&gt;
&lt;li&gt;app内はbabelでコンパイルされるのでimportで依存解決&lt;/li&gt;
&lt;li&gt;serverはnodejsなのでrequireで依存解決&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;npm runコマンド&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;lint&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./node_modules/.bin/eslint server.js app/src/* --ext .js --ext .jsx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;build:front&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cd app &amp;amp;&amp;amp; ../node_modules/.bin/webpack&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;dev:front&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cd app &amp;amp;&amp;amp; ../node_modules/.bin/webpack-dev-server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;dev:server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;node server.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;test:front&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./node_modules/mocha/bin/mocha --compilers js:babel-core/register --require intelli-espower-loader app/test/*.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;test:server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./node_modules/mocha/bin/mocha --require intelli-espower-loader test/*.js&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;というわけで、本番のアプリ開発にとりかかります。&lt;/p&gt;
&lt;h1 id="gitlab-ci"&gt;GitLab CI&lt;/h1&gt;
&lt;p&gt;dockerビルドを試してみます。&lt;/p&gt;
&lt;p&gt;まずはRunnerの設置です。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/install/docker.md" title="docs/install/docker.md · master · GitLab.org / gitlab-ci-multi-runner · GitLab"&gt;docs/install/docker.md · master · GitLab.org / gitlab-ci-multi-runner · GitLab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dockerビルドするためにはdockerコマンドを叩く必要があるのでhostの/var/run/docker.sockをマウントする必要があります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -d &lt;span class="se"&gt;\&lt;/span&gt;
--name blacklist-runner &lt;span class="se"&gt;\&lt;/span&gt;
--restart always &lt;span class="se"&gt;\&lt;/span&gt;
-v /var/run/docker.sock:/var/run/docker.sock &lt;span class="se"&gt;\&lt;/span&gt;
-v /srv/blacklist-runner/config:/etc/gitlab-runner &lt;span class="se"&gt;\&lt;/span&gt;
gitlab/gitlab-runner:latest
$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; -it blacklist-runner gitlab-runner register
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;executerにdockerを選択して、imageにnode:6.3を指定します。&lt;/p&gt;
&lt;p&gt;プロジェクトのほうに.gitlab-ci.ymlを追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;6.3&lt;/span&gt;

&lt;span class="n"&gt;before_script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;

&lt;span class="n"&gt;stages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;

&lt;span class="n"&gt;eslint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
    &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;lint&lt;/span&gt;

&lt;span class="n"&gt;mocha&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
    &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;front&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将来的にdokkuへの自動デプロイをしたいのですが、なかなか大変そうです。とりあえずアイデアを書いておきます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dokkuへのデプロイのためにはSSH鍵ペアが必要なのでどうにかしないとな感じ&lt;/li&gt;
&lt;li&gt;ssh鍵ペアをrunnerにマウントしてpush&lt;/li&gt;
&lt;li&gt;deployタスクだけimage使わないので工夫必要そう&lt;/li&gt;
&lt;li&gt;masterへのpushのときだけdeploy(only: master)&lt;/li&gt;
&lt;li&gt;stagingもあるとよさ(only: staging)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="koa"&gt;Koaサーバをコード変更でリロード&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/22062298/automatically-reloading-koa-server" title="node.js - automatically reloading Koa server - Stack Overflow"&gt;node.js - automatically reloading Koa server - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;nodemonで動かす。&lt;/p&gt;
&lt;h1 id="server-side-redismongo"&gt;server-side (&lt;del&gt;redis&lt;/del&gt;mongo)&lt;/h1&gt;
&lt;p&gt;stagingブランチを作成して作っていきます。&lt;/p&gt;
&lt;p&gt;redisかなと思っていましたが、やっぱりmongodbを使ってみます。mongo採用の理由は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使ったことないから気になっていた&lt;/li&gt;
&lt;li&gt;mongooseを使えばschemaを使えるので可読性良さそう&amp;amp;バリデーションを自分で書かなくて良い&lt;/li&gt;
&lt;li&gt;nodeと組み合わせる情報が多い&lt;/li&gt;
&lt;li&gt;redisのset/getを同期処理させたいけど勉強不足で辛い&lt;/li&gt;
&lt;li&gt;同期処理(generator)のmongo+koaの例があった =&amp;gt; &lt;a href="https://eladnava.com/write-synchronous-node-js-code-with-es6-generators/" title="Write &amp;quot;Synchronous&amp;quot; Node.js Code with ES6 Generators"&gt;Write "Synchronous" Node.js Code with ES6 Generators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;早速書いてみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mongoose&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;mongoUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MONGO_URL&lt;/span&gt; &lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MONGO_URL&lt;/span&gt;
                                     &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost/blacklist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;mongoose&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mongoUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;mongoose&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Blacklist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mongoose&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blacklist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;mongoose&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="n"&gt;company&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb nb-Type"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nb nb-Type"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nb nb-Type"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb nb-Type"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;良い感じします。server.jsにそのまま追記していく方針で行きますので、このままapiも書いてみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/api/set&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;querystring&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querystring&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;blacklist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Blacklist&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;blacklist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;company&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;company&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;company&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;blacklist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;blacklist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;blacklist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;blacklist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;black&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;black&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;black&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;blacklist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blacklist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/api/get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;querystring&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querystring&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;Blacklist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/api/update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;querystring&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querystring&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_id&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="ow"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;blacklist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;blacklist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;Blacklist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOneAndUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blacklist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/api/delete&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;querystring&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querystring&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;Blacklist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// res.result.nは消えた数&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;APIはgetでAPIを生やすことにしました(openなweb apiで良いと思っているので外から叩きやすいから)&lt;/li&gt;
&lt;li&gt;Koaのresquestパラメータについては&lt;a href="https://github.com/koajs/koa/blob/master/docs/api/request.md" title="koa/request.md at master · koajs/koa"&gt;koa/request.md at master · koajs/koa&lt;/a&gt;を参考にしました&lt;/li&gt;
&lt;li&gt;Koaはobjectをthis.bodyに渡すと普通にjsonを返します(&lt;a href="http://qiita.com/mzyy94/items/9997529c61c8815a05f3" title="koaでJSON返させるシンプルで唯一の記述 - Qiita"&gt;koaでJSON返させるシンプルで唯一の記述 - Qiita&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;paramsのparseは&lt;a href="https://nodejs.org/api/querystring.html" title="Query String | Node.js v6.4.0 Documentation"&gt;Query String | Node.js v6.4.0 Documentation&lt;/a&gt;を使いました&lt;/li&gt;
&lt;li&gt;save()するとバリデーションエラーで例外が発生する可能性があるのでtry-catchしました&lt;/li&gt;
&lt;li&gt;update/deleteは基本的にblacklistのjsonをquerystringとして受け取って処理するように書いています&lt;/li&gt;
&lt;li&gt;update/deleteは_idを元にして削除することにしました&lt;/li&gt;
&lt;li&gt;updateは&lt;a href="http://mongoosejs.com/docs/api.html#model_Model.findOneAndUpdate" title="Mongoose API v4.5.9"&gt;Mongoose API v4.5.9&lt;/a&gt;の関数を使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと普通にmongooseを使っていると&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(node:52888) DeprecationWarning: Mongoose: mpromise (mongoose's default promise library) is deprecated, plug in your own promise library instead: http://mongoosejs.com/docs/promises.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;というエラーが出ます。mongoose標準のPromiseが古いので比較的新しいNodejsを使っている場合はNodejsのPromiseに置き換えてやります。(&lt;a href="http://mongoosejs.com/docs/promises.html" title="Mongoose Promises v4.5.9"&gt;Mongoose Promises v4.5.9&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;そんなこんなで、テストも一通り書いて実装が完成しました。&lt;/p&gt;
&lt;h1 id="gitlab-ci_1"&gt;.gitlab-ciの改善&lt;/h1&gt;
&lt;p&gt;サーバサイド実装のコミットでCIが死にました。mongoがないのが原因です。&lt;/p&gt;
&lt;p&gt;デプロイをしたいのもあるのでもう少し凝ったCIに書き直します。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.gitlab.com/ce/ci/yaml/README.html" title="GitLab Documentation"&gt;GitLab Documentation&lt;/a&gt;によると、docker image/serviceはjobごとに設定できます。デプロイはdocker containerではなくrunner上でやるほうが良さそうなので明示的にcontainerとrunnerでのjobを分けます。&lt;/p&gt;
&lt;p&gt;.........&lt;/p&gt;
&lt;p&gt;試してみましたが、imageを一度指定してしまうと全てのjobに対してimageが適用される模様...&lt;/p&gt;
&lt;h1 id="front-end"&gt;front-end開発&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://www.material-ui.com/#/get-started/prerequisites" title="Prerequisites - Material-UI"&gt;Prerequisites - Material-UI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Getting Startsする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save react-tap-event-plugin material-ui
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;そろそろまとめるのが面倒になってきたのでリンクと何を勉強したかとまとめていきます。&lt;/p&gt;
&lt;h2 id="material-ui"&gt;Material UI関連&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.material-ui.com/#/components/text-field" title="Text Field - Material-UI"&gt;Text Field - Material-UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここにはComponentの全てが詰まっています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://design.google.com/icons/" title="Material icons - Google Design"&gt;Material icons - Google Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;iconはこちら。namespaceは小文字、空白は"-"で繋いでsvg形式でimportできます。&lt;/p&gt;
&lt;p&gt;(例)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;PhoneMissed&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;material-ui/svg-icons/notification/phone-missed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/callemall/material-ui/issues/647" title="[FlatButton] File input not working with button. · Issue #647 · callemall/material-ui"&gt;[FlatButton] File input not working with button. · Issue #647 · callemall/material-ui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://service.cresco.co.jp/blog/entry/710" title="&amp;lt;input type=&amp;quot;file&amp;quot;&amp;gt;の話"&gt;&lt;input type="file"&gt;の話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codezine.jp/article/detail/6500?p=3" title="IE10で動くHTML5アプリ実装例　「File APIを利用したアプリ」 (3/3)：CodeZine（コードジン）"&gt;IE10で動くHTML5アプリ実装例　「File APIを利用したアプリ」 (3/3)：CodeZine（コードジン）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;type=inputをMaterial UIで扱う方法が謎なのと、そもそもFile APIなんて使ったことなかったのでその情報です。&lt;/p&gt;
&lt;p&gt;結果的に以下のようなコードになりました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="nx"&gt;handleCsvUpload&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fileUploadDom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findDOMNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileUpload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;fileUploadDom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleVirtualClickCsvUpload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FileReader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="c1"&gt;// TODO: Server: web api未実装&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readAsText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FlatButton&lt;/span&gt;
            &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CSV import&amp;#39;&lt;/span&gt;
            &lt;span class="nx"&gt;labelPosition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;after&amp;#39;&lt;/span&gt;
            &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ImportExport&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onTouchTap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleCsvUpload&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fileUpload&amp;#39;&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;file&amp;#39;&lt;/span&gt; 
            &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;display&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;none&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="nx"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="gui"&gt;GUI設計&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/kiita312/items/d769c85f446994349b52" title="Redux入門 6日目 ReduxとReactの連携(公式ドキュメント和訳) - Qiita"&gt;Redux入門 6日目 ReduxとReactの連携(公式ドキュメント和訳) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://azu.github.io/slide/react-meetup/flux.html" title="10分で実装するFlux"&gt;10分で実装するFlux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://facebook.github.io/flux/docs/todo-list.html#content" title="Flux | Application Architecture for Building User Interfaces"&gt;Flux | Application Architecture for Building User Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;フレームワークは使いませんが参考にはしました。&lt;/p&gt;</summary><category term="Node.js"></category><category term="Javascript"></category><category term="React"></category></entry><entry><title>zsh -&gt; fish 移行プロセス</title><link href="https://muunyblue.github.io/7476533956dd3568c1d787c5d33a547f.html" rel="alternate"></link><published>2017-01-16T01:41:57+09:00</published><updated>2017-01-16T01:41:57+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-01-16:7476533956dd3568c1d787c5d33a547f.html</id><summary type="html">&lt;p&gt;込み入った設定をしないでｽｯと移行することを目的にしています。&lt;/p&gt;
&lt;h1 id="zshrc"&gt;.zshrcを投げ捨ててます。&lt;/h1&gt;
&lt;p&gt;自分の場合、zshrcの設定内容にコピー&amp;amp;ペーストが多かったので気持ち的に楽に投げ捨てられました。&lt;/p&gt;
&lt;h1 id="fish"&gt;fishのインストール&lt;/h1&gt;
&lt;p&gt;主要なOSのパッケージマネージャーでインストール可能なのでｽｯとインストールします。&lt;/p&gt;
&lt;h1 id="fisherman"&gt;fishermanを導入&lt;/h1&gt;
&lt;p&gt;fishのプラグインマネージャーです。&lt;a href="https://github.com/fisherman/fisherman/wiki/Oh-My-Fish-Plugins---Known-Issues" title="Oh My Fish Plugins Known Issues · fisherman/fisherman Wiki"&gt;oh-my-fishとも互換性があります。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/fisherman/fisherman/wiki/%E6%97%A5%E6%9C%AC%E8%AA%9E" title="日本語 · fisherman/fisherman Wiki"&gt;日本語 · fisherman/fisherman Wiki&lt;/a&gt;を参考にインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -Lo ~/.config/fish/functions/fisher.fish --create-dirs git.io/fisher
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;インストールできるプラグイン一覧は以下のコマンドで確認できます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fisher ls-remote
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;手始めにthemeをインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fisher install omf/theme-bobthefish
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_1"&gt;設定&lt;/h1&gt;
&lt;p&gt;設定は~/.config/fish/config.fishに書きます。&lt;/p&gt;
&lt;p&gt;欲しかったものはほとんどデフォルトとfishermanがやってくれるので環境変数の設定を主に書いていくことになります。&lt;/p&gt;
&lt;p&gt;fishではexportはなくset -xで環境変数を設定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;XDG_CONFIG_HOME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GOPATH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Documents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;Go&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;PATH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cargo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;PATH&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RUST_SRC_PATH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rust&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;theme_color_scheme&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zenburn&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;現状config.fishはこの5行です、すっきり。&lt;/p&gt;
&lt;h2 id="nvm"&gt;nvm&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fisher install nvm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;fishでもnvmを使ってnodejs開発できます。&lt;/p&gt;
&lt;p&gt;bash互換のスクリプトを使ったツールが使えなくなることが多いですが有名所はプラグインで解決できそうです。&lt;/p&gt;
&lt;p&gt;bassというbashスクリプト動かせるプラグインがあるので、困り果てたら自前で書いてしまっても良さそうです。&lt;/p&gt;
&lt;h2 id="_2"&gt;デフォルトシェル設定&lt;/h2&gt;
&lt;p&gt;/etc/shellsに"which fish"コマンドの結果を足してから、chshします。&lt;/p&gt;
&lt;h1 id="ref"&gt;ref&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://fishshell.com/" title="fish shell"&gt;fish shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/nutsinshell/items/37d9129c52b4abe6184f" title="Fish-ShellのDesign document読んでみたり、プラグイン試してみたり - Qiita"&gt;Fish-ShellのDesign document読んでみたり、プラグイン試してみたり - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/nutsinshell/items/5f111184b50f7081c92f" title="初心者がShellを知りFish〜Fishermanを導入するまで - Qiita"&gt;初心者がShellを知りFish〜Fishermanを導入するまで - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/oh-my-fish/theme-bobthefish" title="oh-my-fish/theme-bobthefish: A Powerline-style, Git-aware fish theme optimized for awesome."&gt;oh-my-fish/theme-bobthefish: A Powerline-style, Git-aware fish theme optimized for awesome.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fisherman" title="Fisherman"&gt;Fisherman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="fish"></category></entry><entry><title>deoplete.nvimが効かなくなった時の手元できる対処法</title><link href="https://muunyblue.github.io/a3ce63a7a8521c37a513db67129855a8.html" rel="alternate"></link><published>2017-01-12T03:00:32+09:00</published><updated>2017-01-12T03:00:32+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2017-01-12:a3ce63a7a8521c37a513db67129855a8.html</id><summary type="html">&lt;p&gt;開発中なのもありよく動かなくなっているので試したことリストの備忘録です。&lt;/p&gt;
&lt;p&gt;公式でもなく完全な対処方法であるかの確認もしてないので参考程度にして下さい。この方法で解決できない場合はIssueかなぁという判断基準にはなるかもしれません。&lt;/p&gt;
&lt;p&gt;順番や番号に意味はありません。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;1. プラグインのアップデート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-checkhealth"&gt;2. :CheckHealth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-haspython3"&gt;3. has('python3')確認&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-python3"&gt;4. python3のインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-neovim"&gt;5. neovimパッケージをインストールまたはアップデート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-updateremoteplugins"&gt;6. :UpdateRemotePlugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-neovim"&gt;7. Neovimが古い&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="1"&gt;1. プラグインのアップデート&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:call dein#update()
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:NeoBundleUpdate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;など&lt;/p&gt;
&lt;h1 id="2-checkhealth"&gt;2. :CheckHealth&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:CheckHealth
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;このコマンドを実行して出てくる内容に応じて後述の対処をします。&lt;/p&gt;
&lt;h1 id="3-haspython3"&gt;3. has('python3')確認&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:echo has(&amp;#39;python3&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1ならok。&lt;/p&gt;
&lt;p&gt;0の場合、状況に応じて他の方法を試す。&lt;/p&gt;
&lt;h1 id="4-python3"&gt;4. python3のインストール&lt;/h1&gt;
&lt;p&gt;macOS&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ubuntu 14.04 later&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;など&lt;/p&gt;
&lt;h1 id="5-neovim"&gt;5. neovimパッケージをインストールまたはアップデート&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3 install --upgrade neovim
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="6-updateremoteplugins"&gt;6. :UpdateRemotePlugins&lt;/h1&gt;
&lt;p&gt;Neovimをインストールまたはアップデートした後、deoplete.nvimを使うのに必要になります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:UpdateRemotePlugins
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="7-neovim"&gt;7. Neovimが古い&lt;/h1&gt;
&lt;p&gt;macOS&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew update
brew upgrade neovim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;または&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install --HEAD neovim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;アップデートできたら再度上記の内容を試します。&lt;/p&gt;</summary><category term="Neovim"></category></entry><entry><title>Neovimはじめました &amp; 2016年vimrc大掃除</title><link href="https://muunyblue.github.io/c95d62c68196b2d0c1c1de8c7eeb6d50.html" rel="alternate"></link><published>2016-12-27T04:44:54+09:00</published><updated>2016-12-27T04:44:54+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-12-27:c95d62c68196b2d0c1c1de8c7eeb6d50.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/1089d23c5abf4d0cf038f597d3ee64a5.png" /&gt;&lt;/p&gt;
&lt;p&gt;11月あたりからvim環境を見直して概ねまとまってきたのでメモとして残しておきます。&lt;/p&gt;
&lt;p&gt;概要は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Neovim導入&lt;/li&gt;
&lt;li&gt;プラグイン整理(neobundle =&amp;gt; dein.vim)&lt;/li&gt;
&lt;li&gt;Neovim/Vim/Nyaovim対応&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;になります。&lt;/p&gt;
&lt;p&gt;設定ファイルはGitHubの.dotfilesにあるのでこちらを見ればこの記事は読まなくてもいいかもしれません。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/yymm/.dotfiles/tree/master/config/nvim"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#neovim"&gt;Neovimはじめました&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#neovim_1"&gt;Neovimのインストールはパッケージマネージャーから&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;設定ファイルの場所&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#nyaovim"&gt;Nyaovimもはじめました&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;プラグイン整理&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#deinvim"&gt;dein.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#iceberg"&gt;iceberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#neoterm"&gt;neoterm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#neomake"&gt;neomake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deopletenvim"&gt;deoplete.nvim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vim-airline"&gt;vim-airline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vimfiler"&gt;Vimfiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;関数内検索&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="neovim"&gt;Neovimはじめました&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://neovim.io/" title="Home - Neovim"&gt;Home - Neovim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Neovimのterminal modeに感動してNeovimをはじめてみることにしました。&lt;/p&gt;
&lt;p&gt;あとVimよりサクサク動いていて、思考の速度に近づいてる気がします。&lt;/p&gt;
&lt;h2 id="neovim_1"&gt;Neovimのインストールはパッケージマネージャーから&lt;/h2&gt;
&lt;p&gt;OSXとUbuntuでの開発が多いのでパッケージマネージャーを使ってインストールすることにします。&lt;/p&gt;
&lt;p&gt;しかもNeovimの場合パッケージマネージャーを使用して新しいNeovimをインストールすることが可能なので手元でビルドしなくていいのもメリットだと感じています。&lt;/p&gt;
&lt;p&gt;あとPython拡張を使うのでインストールと一緒に有効にしておきます。&lt;/p&gt;
&lt;p&gt;OSXの場合(&lt;a href="https://github.com/neovim/homebrew-neovim/blob/master/README.md" title="homebrew-neovim/README.md at master · neovim/homebrew-neovim"&gt;homebrew-neovim/README.md at master · neovim/homebrew-neovim&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew tap neovim/neovim
brew install --HEAD neovim
brew install python
brew install python3
pip2 install --user --upgrade neovim
pip3 install --user --upgrade neovim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ubuntuの場合(&lt;a href="https://github.com/neovim/neovim/wiki/Installing-Neovim#ubuntu" title="Installing Neovim · neovim/neovim Wiki"&gt;Installing Neovim · neovim/neovim Wiki&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install software-properties-common
sudo add-apt-repository ppa:neovim-ppa/unstable
sudo apt-get update
sudo apt-get install neovim
sudo apt-get install python-dev python-pip python3-dev python3-pip
sudo pip2 install --user --upgrade neovim
sudo pip3 install --user --upgrade neovim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;手元でビルドする場合、&lt;a href="https://github.com/neovim/neovim/wiki/Building-Neovim#build-prerequisites" title="Building Neovim · neovim/neovim Wiki"&gt;CentOS6以前などではビルドに必要なツールをビルドする必要があったりする&lt;/a&gt;ので、自分の場合は環境によってはNeovimは諦めてVimも併用で使うようにしています。&lt;/p&gt;
&lt;h2 id="_1"&gt;設定ファイルの場所&lt;/h2&gt;
&lt;p&gt;デフォルトでは"~/.config/nvim/init.vim"がVimで言う"~/.vimrc"になります。&lt;/p&gt;
&lt;p&gt;環境変数"$XDG_CONFIG_HOME"を変更することで、デフォルトの"~/.config"部分を変更できます。&lt;/p&gt;
&lt;p&gt;今後Neovimメインで使っていくような気がしているので、.vimrcへのシンボリックリンクを作成することでVimも同じ設定で使えるようにしています。&lt;/p&gt;
&lt;h1 id="nyaovim"&gt;Nyaovimもはじめました&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/dafd85baa0a464ccffb2ceeff43c4d46.gif" /&gt;&lt;/p&gt;
&lt;p&gt;MiniBrowserプラグインを使って、Web開発のプレビューを横に出しながらプログラミングできて楽しいです。&lt;/p&gt;
&lt;p&gt;Markdownプレビューも最高です。&lt;/p&gt;
&lt;p&gt;設定ファイル(~/.config/nyaovim/nyaovimrc.html)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;nyaovim-app&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="cm"&gt;/* CSS configurations here */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;neovim&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Component&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;horizontal&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;neovim&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;nyaovim-editor&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;[[argv]]&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;16&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Meslo LG M DZ for Powerline&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;neovim&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;preview&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;[[editor]]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;preview&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;mini&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;https://google.com&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;[[editor]]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;mini&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;popup&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tooltip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;[[editor]]&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;popup&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tooltip&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nyaovimプラグインもdein.vimで読み込むのですが、"if exists('g:nyaovim_version')"を使うことでNyaovim固有の設定を記述します。&lt;/p&gt;
&lt;h1 id="_2"&gt;プラグイン整理&lt;/h1&gt;
&lt;p&gt;今までの構成を大幅に変更してみました。dein.vimによる影響が大きいですが以下の点が今までと大きく変わりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cacheの利用&lt;/li&gt;
&lt;li&gt;プラグイン遅延ロード&lt;/li&gt;
&lt;li&gt;tomlファイルでプラグイン管理&lt;/li&gt;
&lt;li&gt;NeovimとVimとNyaovimで設定を分ける&lt;/li&gt;
&lt;li&gt;NeovimとVimとNyaovimで使用するプラグインも使い分かる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neovimをメインに据えていくのでルートディレクトリは"~/.config/nvim"で、ディレクトリ構成は以下のようになっています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/.config/nvim
├── dein.toml
├── deinlazy.toml
├── init.vim
├── keymap.rc.vim
├── options.rc.vim
└── plugins
    ├── airline.rc.vim
    ├── anzu.rc.vim
    ├── deoplete.rc.vim
    ├── iceberg.rc.vim
    ├── neocomplete.rc.vim
    ├── neomake.rc.vim
    ├── neoterm.rc.vim
    ├── nerdcomenter.rc.vim
    ├── syntastic.rc.vim
    ├── vimfiler.rc.vim
    ├── vimshell.rc.vim
    └── yankround.rc.vim
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="deinvim"&gt;dein.vim&lt;/h2&gt;
&lt;p&gt;Shougo氏がdein.vimという新しいプラグインマネージャを作っていたのでそちらに移行しました。&lt;/p&gt;
&lt;p&gt;基本的にShougo氏の&lt;a href="https://github.com/Shougo/shougo-s-github/tree/master/vim/rc" title="shougo-s-github/vim/rc at master · Shougo/shougo-s-github"&gt;vimrc&lt;/a&gt;を参考にして作ってみました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cacheを使う(dein#load_state) =&amp;gt; &lt;a href="https://github.com/Shougo/shougo-s-github/blob/master/vim/rc/dein.rc.vim#L8" title="shougo-s-github/dein.rc.vim at master · Shougo/shougo-s-github"&gt;shougo-s-github/dein.rc.vim#L8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;deinがインストールされていなかったらインストールする =&amp;gt; &lt;a href="https://github.com/Shougo/shougo-s-github/blob/master/vim/rc/init.rc.vim#L70" title="shougo-s-github/init.rc.vim at master · Shougo/shougo-s-github"&gt;shougo-s-github/init.rc.vim#L70&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;tomlを使う =&amp;gt; &lt;a href="https://github.com/Shougo/shougo-s-github/blob/master/vim/rc/dein.rc.vim#L15" title="shougo-s-github/dein.rc.vim at master · Shougo/shougo-s-github"&gt;shougo-s-github/dein.rc.vim#L15&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このあたりを参考にして以下のようなinit.vimになりました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;compatible&lt;/span&gt;
  &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nocompatible&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;

augroup MyAutoCmd
  autocmd&lt;span class="p"&gt;!&lt;/span&gt;
augroup END

&lt;span class="k"&gt;if&lt;/span&gt; exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g:nyaovim_version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; s:dein_cache_path &lt;span class="p"&gt;=&lt;/span&gt; expand&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.cache/nyaovim/dein&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elseif&lt;/span&gt; has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nvim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; s:dein_cache_path &lt;span class="p"&gt;=&lt;/span&gt; expand&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.cache/nvim/dein&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; s:dein_cache_path &lt;span class="p"&gt;=&lt;/span&gt; expand&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.cache/vim/dein&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; s:dein_dir &lt;span class="p"&gt;=&lt;/span&gt; s:dein_cache_path
                 \ .&lt;span class="s1"&gt;&amp;#39;/repos/github.com/Shougo/dein.vim&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &amp;amp;&lt;span class="nb"&gt;runtimepath&lt;/span&gt; &lt;span class="p"&gt;!~&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/dein.vim&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;isdirectory&lt;span class="p"&gt;(&lt;/span&gt;s:dein_dir&lt;span class="p"&gt;)&lt;/span&gt;
    execute &lt;span class="s1"&gt;&amp;#39;!git clone https://github.com/Shougo/dein.vim&amp;#39;&lt;/span&gt; s:dein_dir
  &lt;span class="k"&gt;endif&lt;/span&gt;
  execute &lt;span class="s1"&gt;&amp;#39;set runtimepath+=&amp;#39;&lt;/span&gt; . fnamemodify&lt;span class="p"&gt;(&lt;/span&gt;s:dein_dir&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; dein#load_state&lt;span class="p"&gt;(&lt;/span&gt;s:dein_cache_path&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#begin&lt;span class="p"&gt;(&lt;/span&gt;s:dein_cache_path&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;call&lt;/span&gt; dein#load_toml&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.config/nvim/dein.toml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; {&lt;span class="s1"&gt;&amp;#39;lazy&amp;#39;&lt;/span&gt; : &lt;span class="m"&gt;0&lt;/span&gt;}&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#load_toml&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.config/nvim/deinlazy.toml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; {&lt;span class="s1"&gt;&amp;#39;lazy&amp;#39;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;}&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g:nyaovim_version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rhysd/nyaovim-popup-tooltip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rhysd/nyaovim-markdown-preview&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;call&lt;/span&gt; dein#add&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rhysd/nyaovim-mini-browser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;endif&lt;/span&gt;

  &lt;span class="k"&gt;call&lt;/span&gt; dein#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#save_state&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; dein#check_install&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;call&lt;/span&gt; dein#install&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;

&lt;span class="k"&gt;filetype&lt;/span&gt; plugin indent &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="nb"&gt;syntax&lt;/span&gt; enable

runtime&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;options&lt;/span&gt;.rc.&lt;span class="k"&gt;vim&lt;/span&gt;
runtime&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;keymap&lt;/span&gt;.rc.&lt;span class="k"&gt;vim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ポイントは、Neovim/Vim/Nyaovimでcacheのパスを使い分けて各々のプラグインを使用できるようにしています。&lt;/p&gt;
&lt;p&gt;Vim本体の設定とKeymapは別ファイルとして最後に読み込んでいます。&lt;/p&gt;
&lt;p&gt;Neovimも開発中なので、プラグインに関しても日々更新されていくものが多いので、動作がおかしいときや数日に一度は":call dein#update()"してプラグインを更新すると良いです。&lt;/p&gt;
&lt;p&gt;管理するプラグインについてはdein.toml(遅延ロードするプラグインはdeinlazy.toml)に書きます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;xxx/yyy&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;基本的には上の書き方で、設定がある場合はhook_*を使って設定を読み込みます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hook_addはプラグイン追加後&lt;/li&gt;
&lt;li&gt;hook_sourceはプラグイン読み込み前&lt;/li&gt;
&lt;li&gt;hook_post_sourceはプラグイン読み込み後&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(ドキュメント =&amp;gt; &lt;a href="https://github.com/Shougo/dein.vim/blob/master/doc/dein.txt#L751" title="dein.vim/dein.txt at master · Shougo/dein.vim"&gt;dein.vim/dein.txt at master · Shougo/dein.vim&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;hookのスクリプトに"source &lt;path&gt;.vim"と書いて外部のVim scriptを読み込むようにするとtomlファイルがすっきりするので、設定が長くなるプラグインなどはそうしています。&lt;/p&gt;
&lt;p&gt;ifというキーを使ってNeovimやVimの切り替えができます。&lt;/p&gt;
&lt;p&gt;以下はneocompleteとdeoplete.nvim、neotermとvimshellの例です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Shougo/neocomplete.vim&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;depends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;context_filetype.vim&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;has(&amp;#39;lua&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;on_i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;hook_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;source ~/.config/nvim/plugins/neocomplete.rc.vim&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Shougo/deoplete.nvim&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;depends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;context_filetype.vim&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;has(&amp;#39;nvim&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;on_i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;hook_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;source ~/.config/nvim/plugins/deoplete.rc.vim&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;kassio/neoterm&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;has(&amp;#39;nvim&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;hook_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;source ~/.config/nvim/plugins/neoterm.rc.vim&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Shougo/vimshell&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!has(&amp;#39;nvim&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;hook_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;source ~/.config/nvim/plugins/vimshell.rc.vim&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これを書くまでに参考にして勉強したりした情報集です、ありがとうございました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/okamos/items/2259d5c770d51b88d75b" title="NeoVim、そしてdein.vimへ - Qiita"&gt;NeoVim、そしてdein.vimへ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/delphinus/items/00ff2c0ba972c6e41542" title="NeoBundle から dein.vim に乗り換えたら爆速だった話 - Qiita"&gt;NeoBundle から dein.vim に乗り換えたら爆速だった話 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/Ress/items/7e71e007cf8d41a07a1a" title="NeoVim と dein.vim を使ってみる! - Qiita"&gt;NeoVim と dein.vim を使ってみる! - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/kawaz/items/ee725f6214f91337b42b" title="dein.vimによるプラグイン管理のマイベストプラクティス - Qiita"&gt;dein.vimによるプラグイン管理のマイベストプラクティス - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/hanaclover/items/f45250b55e2298c4ac5a" title="dein.vimをインストールする - Qiita"&gt;dein.vimをインストールする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/raiden325/20160716/1468641998" title="vimのプラグインマネージャをdeinに変えました - raidenの技術系備忘録"&gt;vimのプラグインマネージャをdeinに変えました - raidenの技術系備忘録&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cocu.hatenablog.com/entry/2016/03/16/054603" title="いい感じに dein.vim を活用したvim confを設計した話 - cocuh's note"&gt;いい感じに dein.vim を活用したvim confを設計した話 - cocuh's note&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vimの文法はこちら&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nanasi.jp/articles/code/io/file-path.html" title="ファイル名、ファイルパス情報の取得 — 名無しのvim使い"&gt;ファイル名、ファイルパス情報の取得 — 名無しのvim使い&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thinca.hatenablog.com/entry/20100205/1265307642" title="vimrc基礎文法最速マスター - 永遠に未完成"&gt;vimrc基礎文法最速マスター - 永遠に未完成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thinca.hatenablog.com/entry/20100201/1265009821" title="Vimスクリプト基礎文法最速マスター - 永遠に未完成"&gt;Vimスクリプト基礎文法最速マスター - 永遠に未完成&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;残りは気になった個別のプラグインについて書いていきます。&lt;/p&gt;
&lt;h1 id="iceberg"&gt;iceberg&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://cocopon.me/app/vim-iceberg/" title="Iceberg - dark color scheme for Vim"&gt;Iceberg - dark color scheme for Vim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目に優しそうでカッコいいカラースキームです。&lt;/p&gt;
&lt;p&gt;visual modeを結構多用するのですが、モニターのブルーライトカットが効きすぎているのか色が分かりづらかったのでオレンジ色に変えてあります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;au&lt;/span&gt; MyAutoCmd &lt;span class="nb"&gt;VimEnter&lt;/span&gt; * nested &lt;span class="k"&gt;colorscheme&lt;/span&gt; iceberg
&lt;span class="c"&gt;&amp;quot; Visual mode&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; MyAutoCmd &lt;span class="nb"&gt;VimEnter&lt;/span&gt; * &lt;span class="nb"&gt;highlight&lt;/span&gt; Visual ctermbg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;216&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; backgroung transparency&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;au MyAutoCmd VimEnter * highlight Normal ctermbg=none&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;au MyAutoCmd VimEnter * highlight NonText ctermbg=none&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;au MyAutoCmd VimEnter * highlight TablineSel ctermbg=none&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;au MyAutoCmd VimEnter * highlight LineNr ctermbg=none&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;au MyAutoCmd VimEnter * highlight CursorLineNr ctermbg=none&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;カラースキームを使う場合、一行目の記述は必須のようです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/kawaz/items/ee725f6214f91337b42b" title="dein.vimによるプラグイン管理のマイベストプラクティス - Qiita"&gt;dein.vimによるプラグイン管理のマイベストプラクティス - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/s_of_p/items/87a9d787ff5506edab8e" title="端末上の Vim で colorscheme の背景を透過する - Qiita"&gt;端末上の Vim で colorscheme の背景を透過する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="neoterm"&gt;neoterm&lt;/h1&gt;
&lt;p&gt;neovimのterminal modeが便利すぎてやばいです。&lt;/p&gt;
&lt;p&gt;とりあえずいつもどおりにノーマルモードを使用するために以下の設定をします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nvim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  tnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;ESC&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;\&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;もっと便利に使うためにneotermを導入します。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/kassio/neoterm" title="kassio/neoterm: Wrapper of some neovim's :terminal functions."&gt;kassio/neoterm: Wrapper of some neovim's :terminal functions.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;neotermはneovimのterminalラッパープラグインです。手軽に分割ターミナルとかが使えます。&lt;/p&gt;
&lt;p&gt;さらに、&lt;a href="https://github.com/kassio/neoterm#repl" title="kassio/neoterm: Wrapper of some neovim's :terminal functions."&gt;ファイルや行、選択範囲をreplに突っ込んでterminalで実行したり&lt;/a&gt;、&lt;a href="https://github.com/kassio/neoterm#test-libs" title="kassio/neoterm: Wrapper of some neovim's :terminal functions."&gt;テスト連携&lt;/a&gt;があったりと便利機能満載です。&lt;/p&gt;
&lt;p&gt;以下のように設定しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quickrunの代用ぽい設定&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kassio/neoterm/commit/5586f57ee3a15f31d44bb6bc49def98799d20527" title="Add a Ttoggle command. · kassio/neoterm@5586f57"&gt;toggle&lt;/a&gt;する設定&lt;/li&gt;
&lt;li&gt;vimshellの代用ぽい設定&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;kassio/neoterm&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;has(&amp;#39;nvim&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;hook_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;nnoremap &amp;lt;silent&amp;gt; ,rc :TREPLSendFile&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;nnoremap &amp;lt;silent&amp;gt; ,rl :TREPLSendLine&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;vnoremap &amp;lt;silent&amp;gt; ,rl :TREPLSendSelection&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;nnoremap &amp;lt;silent&amp;gt; vt :Ttoggle&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;nnoremap &amp;lt;silent&amp;gt; vs :terminal&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;shellを指定している方を多く見ましたが、自分の環境では$SHELLが開いている感じがしたので設定していません。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/y_y_m_m/status/799147443942105088"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;とは言いましたが、Vimではterminal modeは使えないのでVimShellを使うように設定しています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;kassio/neoterm&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;has(&amp;#39;nvim&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;hook_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;source ~/.config/nvim/plugins/neoterm.rc.vim&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Shougo/vimshell&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!has(&amp;#39;nvim&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;hook_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;source ~/.config/nvim/plugins/vimshell.rc.vim&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Shougo/vimproc.vim&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!has(&amp;#39;nvim&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;build&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;make&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="neomake"&gt;neomake&lt;/h1&gt;
&lt;p&gt;非同期でmakeやlintを実行するsyntasticの非同期版のようなプラグインです。&lt;/p&gt;
&lt;p&gt;READMEは最低限の内容のみとなっているので、helpを読みながら設定していきます。&lt;/p&gt;
&lt;p&gt;まず、見た目の設定です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; color&lt;/span&gt;
autocmd&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;BufWritePost&lt;/span&gt; * Neomake
&lt;span class="k"&gt;au&lt;/span&gt; MyAutoCmd &lt;span class="nb"&gt;ColorScheme&lt;/span&gt; * &lt;span class="k"&gt;hi&lt;/span&gt; NeomakeErrorSign cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt; ctermbg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; MyAutoCmd &lt;span class="nb"&gt;ColorScheme&lt;/span&gt; * &lt;span class="k"&gt;hi&lt;/span&gt; NeomakeWarningSign cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; ctermbg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;216&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; MyAutoCmd &lt;span class="nb"&gt;ColorScheme&lt;/span&gt; * &lt;span class="k"&gt;hi&lt;/span&gt; NeomakeMessageSign cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; ctermbg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;150&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; MyAutoCmd &lt;span class="nb"&gt;ColorScheme&lt;/span&gt; * &lt;span class="k"&gt;hi&lt;/span&gt; NeomakeInfoSign cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt; ctermbg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;110&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; text&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:neomake_error_sign &lt;span class="p"&gt;=&lt;/span&gt; {&lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;E✖&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;texthl&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;NeomakeErrorSign&amp;#39;&lt;/span&gt;}
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:neomake_warning_sign &lt;span class="p"&gt;=&lt;/span&gt; {
    \   &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;W➤&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    \   &lt;span class="s1"&gt;&amp;#39;texthl&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;NeomakeWarningSign&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    \ }
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:neomake_message_sign &lt;span class="p"&gt;=&lt;/span&gt; {
     \   &lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;M➤&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     \   &lt;span class="s1"&gt;&amp;#39;texthl&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;NeomakeMessageSign&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     \ }
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:neomake_info_sign &lt;span class="p"&gt;=&lt;/span&gt; {&lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;ℹ➤&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;texthl&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;NeomakeInfoSign&amp;#39;&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;基本的に&lt;a href="https://github.com/neomake/neomake/tree/master/autoload/neomake/makers" title="neomake/autoload/neomake/makers at master · neomake/neomake"&gt;ここ&lt;/a&gt;にあるmakerは使えます。有効にする際は以下のように書きます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;let g:neomake_&amp;lt;lang&amp;gt;_enabled_makers = [&amp;#39;&amp;lt;maker&amp;gt;&amp;#39;, &amp;#39;&amp;lt;maker&amp;gt;&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;maker名は末尾の名前です、例えば&lt;a href="https://github.com/neomake/neomake/blob/master/autoload/neomake/makers/ft/cpp.vim" title="neomake/cpp.vim at master · neomake/neomake"&gt;neomake/cpp.vim at master · neomake/neomake&lt;/a&gt;にある"function! neomake#makers#ft#cpp#gcc()"の場合は"gcc"になります。&lt;/p&gt;
&lt;p&gt;複数指定すると複数個makerが動くことになるので動作が被ってる場合、同じメッセージが複数出ます。&lt;/p&gt;
&lt;p&gt;makerは自作することもできるようです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;neomake_&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;filetype&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;makername&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="n"&gt;_maker&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ディレクトリmakerという機能もあるようなので気になります。&lt;/p&gt;
&lt;p&gt;Vim7.4.503からneomakeは使用可能ですが、syntasticに慣れていたのもありVimを使う時はsyntasticを使うようにしています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;neomake/neomake&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;has(&amp;#39;nvim&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;hook_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;source ~/.config/nvim/plugins/neomake.rc.vim&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;vim-syntastic/syntastic&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!has(&amp;#39;nvim&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;hook_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;source ~/.config/nvim/plugins/syntastic.rc.vim&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ちなみにSyntasticもneomakeと同じような見た目になるように設定しています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ColorScheme&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; MyAutoCmd &lt;span class="nb"&gt;VimEnter&lt;/span&gt; * &lt;span class="nb"&gt;highlight&lt;/span&gt; SignColumn ctermbg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;237&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; MyAutoCmd &lt;span class="nb"&gt;VimEnter&lt;/span&gt; * &lt;span class="nb"&gt;highlight&lt;/span&gt; SyntasticErrorSign cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt; ctermbg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;203&lt;/span&gt;
&lt;span class="k"&gt;au&lt;/span&gt; MyAutoCmd &lt;span class="nb"&gt;VimEnter&lt;/span&gt; * &lt;span class="nb"&gt;highlight&lt;/span&gt; SyntasticWarningSign cterm&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bold&lt;/span&gt; ctermfg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;233&lt;/span&gt; ctermbg&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;150&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_error_symbol &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;E➤&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_warning_symbol &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;W➤&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Basic setting&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_always_populate_loc_list &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;let g:syntastic_auto_loc_list = 1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_check_on_open &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_check_on_wq &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; for javascript&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_javascript_checkers &lt;span class="p"&gt;=&lt;/span&gt; [&lt;span class="s1"&gt;&amp;#39;eslint&amp;#39;&lt;/span&gt;]
&lt;span class="c"&gt;&amp;quot; for c/cpp&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:syntastic_cpp_compiler_options &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-Wall&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="deopletenvim"&gt;deoplete.nvim&lt;/h1&gt;
&lt;p&gt;neocompleteに次ぐ補完プラグインです。&lt;/p&gt;
&lt;p&gt;deinlazyに追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Shougo/deoplete.nvim&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;depends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;context_filetype.vim&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;has(&amp;#39;nvim&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;on_i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;hook_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;source ~/.config/nvim/plugins/deoplete.rc.vim&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;deoplete.rc.vim&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:deoplete#enable_at_startup &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; &amp;lt;TAB&amp;gt;: completion.&lt;/span&gt;
&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;expr&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;TAB&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      \ pumvisible&lt;span class="p"&gt;()&lt;/span&gt; ? &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-n&amp;gt;&amp;quot;&lt;/span&gt; :
      \ &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;SID&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;check_back_space&lt;span class="p"&gt;()&lt;/span&gt; ? &lt;span class="s2"&gt;&amp;quot;\&amp;lt;TAB&amp;gt;&amp;quot;&lt;/span&gt; :
      \ deoplete#manual_complete&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:check_back_space&lt;span class="p"&gt;()&lt;/span&gt; abort &lt;span class="c"&gt;&amp;quot;{{{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;col&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="k"&gt;col&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; getline&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;[&lt;span class="k"&gt;col&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;]  &lt;span class="p"&gt;=~&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\s&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;&amp;quot;}}}

&lt;span class="c"&gt;&amp;quot; &amp;lt;S-TAB&amp;gt;: completion back.&lt;/span&gt;
&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;expr&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;S&lt;span class="p"&gt;-&lt;/span&gt;TAB&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  pumvisible&lt;span class="p"&gt;()&lt;/span&gt; ? &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-p&amp;gt;&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-h&amp;gt;&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; &amp;lt;BS&amp;gt;: close popup and delete backword char.&lt;/span&gt;
&lt;span class="nb"&gt;inoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;expr&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;BS&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; deoplete#smart_close_popup&lt;span class="p"&gt;()&lt;/span&gt;.&lt;span class="s2"&gt;&amp;quot;\&amp;lt;C-h&amp;gt;&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Use auto delimiter&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; deoplete#custom#&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;converters&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; [
      \ &lt;span class="s1"&gt;&amp;#39;converter_remove_paren&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      \ &lt;span class="s1"&gt;&amp;#39;converter_remove_overlap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      \ &lt;span class="s1"&gt;&amp;#39;converter_truncate_abbr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      \ &lt;span class="s1"&gt;&amp;#39;converter_truncate_menu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      \ &lt;span class="s1"&gt;&amp;#39;converter_auto_delimiter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
\ ]&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:deoplete#enable_camel_case &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/Shougo/deoplete.nvim/blob/master/doc/deoplete.txt#L887" title="deoplete.nvim/deoplete.txt at master · Shougo/deoplete.nvim"&gt;deoplete.nvim/deoplete.txt at master · Shougo/deoplete.nvim&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ドキュメントを見ると言語ごとにEXTERNAL SOURCESがあるので、開発する言語を中心にプラグインを適宜追加していけば良さそうです。&lt;/p&gt;
&lt;h1 id="vim-airline"&gt;vim-airline&lt;/h1&gt;
&lt;p&gt;airlineは対応しているプラグインも多く設定も少なくて済むので、とても好きなpowerlineです。&lt;/p&gt;
&lt;p&gt;dein.vimは依存関係を書けるので設定ファイルがわかりやすくなって良いです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;majutsushi/tagbar&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tpope/vim-fugitive&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;vim-airline/vim-airline&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;depends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;[&amp;#39;tagbar&amp;#39;, &amp;#39;vim-fugitive&amp;#39;]&lt;/span&gt;
&lt;span class="na"&gt;hook_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;source ~/.config/nvim/plugins/airline.rc.vim&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;vim-airline/vim-airline-themes&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;depends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;vim-airline&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;hook_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;let g:airline_theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;luna&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;airline.rc.vim&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; exists&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g:nyaovim_version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_powerline_fonts &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_left_sep &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_right_sep &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline_powerline_fonts &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#&lt;span class="nb"&gt;tabline&lt;/span&gt;#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;has&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nvim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:airline#extensions#whitespace#mixed_indent_algo &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="c"&gt;&amp;quot; see :help airline-whitespace@en&lt;/span&gt;
&lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NyaovimでPowerlineFontが崩れてしまったのでNyaovimでは無効にしています。&lt;/p&gt;
&lt;p&gt;mixed_indentがうざかったりしますがドキュメントを読むとアルゴリズムを変更できるので賢めのアルゴリズムに変更しています。&lt;/p&gt;
&lt;h1 id="vimfiler"&gt;Vimfiler&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/Shougo/vimfiler.vim" title="Shougo/vimfiler.vim: Powerful file explorer implemented by Vim script"&gt;Shougo/vimfiler.vim: Powerful file explorer implemented by Vim script&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;便利すぎて手放せないプラグインです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Shougo/unite.vim&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;hook_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;nnoremap &amp;lt;silent&amp;gt; fb :&amp;lt;C-u&amp;gt;Unite buffer&amp;lt;CR&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Shougo/vimfiler.vim&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;depends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;unite.vim&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;hook_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;source ~/.config/nvim/plugins/vimfiler.rc.vim&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;vimfiler.rc.vim&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; vimfiler#custom#profile&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; {
     \ &lt;span class="s1"&gt;&amp;#39;safe&amp;#39;&lt;/span&gt; : &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     \ &lt;span class="s1"&gt;&amp;#39;auto_expand&amp;#39;&lt;/span&gt; : &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     \ &lt;span class="s1"&gt;&amp;#39;parent&amp;#39;&lt;/span&gt; : &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     \ }&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;default explore -&amp;gt; vimfiler&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimfiler_as_default_explorer &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;buffer directory&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; fe :&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;VimFilerBufferDir &lt;span class="p"&gt;-&lt;/span&gt;quit&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Nerdtree like&lt;/span&gt;
&lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;e&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;VimFilerBufferDir &lt;span class="p"&gt;-&lt;/span&gt;split &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;winwidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;120&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;toggle &lt;span class="p"&gt;-&lt;/span&gt;no&lt;span class="p"&gt;-&lt;/span&gt;quit&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;key mapping&lt;/span&gt;
autocmd MyAutoCmd &lt;span class="nb"&gt;FileType&lt;/span&gt; vimfiler &lt;span class="k"&gt;call&lt;/span&gt; s:vimfiler_my_settings&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; s:vimfiler_my_settings&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;expr&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; s vimfiler#do_switch_action&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vsplit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;expr&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;v&lt;/span&gt; vimfiler#do_switch_action&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;split&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;nnoremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;buffer&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;expr&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;t&lt;/span&gt; vimfiler#do_action&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tabopen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; Textmate icons&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimfiler_tree_leaf_icon &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimfiler_tree_opened_icon &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;▾&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimfiler_tree_closed_icon &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;▸&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimfiler_file_icon &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:vimfiler_marked_file_icon &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_3"&gt;関数内検索&lt;/h1&gt;
&lt;p&gt;1000行くらいの長い関数がひしめき合ってるコードと向かい合うとき関数内検索があるとかなり便利なので下記の情報を元にできるようにしました。かなり便利です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/kentaro/items/dd981f7d1337d2fd8e94" title="Vimで、特定の範囲内(textobj)で検索する - Qiita"&gt;Vimで、特定の範囲内(textobj)で検索する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/osyo-manga/20131019/1382191487" title="Vim で範囲内を検索する operator をつくった - C++でゲームプログラミング"&gt;Vim で範囲内を検索する operator をつくった - C++でゲームプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;kana/vim-operator-user&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;kana/vim-textobj-user&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;kana/vim-textobj-function&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;[[plugins]]&lt;/span&gt;
&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;osyo-manga/vim-operator-search&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;depends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;[&amp;#39;vim-operator-user&amp;#39;, &amp;#39;vim-textobj-function&amp;#39;, &amp;#39;vim-textobj-user&amp;#39;]&lt;/span&gt;
&lt;span class="na"&gt;hook_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="na"&gt;nmap &amp;lt;Space&amp;gt;/ &amp;lt;Plug&amp;gt;(operator-search)if&lt;/span&gt;
&lt;span class="na"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;Space&gt;/で検索できます。&lt;/p&gt;</summary><category term="neovim"></category><category term="vim"></category></entry><entry><title>ステラのまほうのエンディングで始めるThree.js</title><link href="https://muunyblue.github.io/f7a124943b6aa6654d787f07eee84d2c.html" rel="alternate"></link><published>2016-12-08T21:54:32+09:00</published><updated>2016-12-08T21:54:32+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-12-08:f7a124943b6aa6654d787f07eee84d2c.html</id><summary type="html">&lt;p&gt;この記事は、&lt;a href="http://qiita.com/advent-calendar/2016/threejs" title="Three.js Advent Calendar 2016 - Qiita"&gt;Three.js Advent Calendar 2016&lt;/a&gt; 9日目の記事です。&lt;/p&gt;
&lt;p&gt;たまたま空いていたので、&lt;a href="http://www.adventar.org/calendars/1454#list-2016-12-05" title="まんがタイムきらら Advent Calendar 2016 - Adventar"&gt;まんがタイムきらら Advent Calendar 2016&lt;/a&gt; 9日目の記事でもありますが、きらら成分はステラのまほうのアニメ(しかもエンディングだけ)となっていますので気をつけてください。&lt;/p&gt;
&lt;p&gt;✗目次&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#threejs"&gt;何でThree.js?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;はじめの一歩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;四角を表示する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;四角を増やす&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;ランダムにいっぱいの四角を表示する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;カラフルにする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;カメラを動かす&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;微調整&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;背景アニメーション&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;最後に&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;仕事の疲れをステラのまほうで癒やしているとき、エンディングのヨナカジカルを見ているとWebGLでやれそうだなぁ...となったので仕事の息抜きにやってみた話です。&lt;/p&gt;
&lt;p&gt;普段からWebGL触っている系の職種ではないため過度な期待はしないで下さい。&lt;/p&gt;
&lt;p&gt;結果として以下のようなものが出来上がります。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/y_y_m_m/status/791193793831706624"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;Demo =&amp;gt; &lt;a href="https://yymm.github.io/Yonakajikaru/" title="Yonakajikaru"&gt;Yonakajikaru&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Repo =&amp;gt; &lt;a href="https://github.com/yymm/Yonakajikaru" title="yymm/Yonakajikaru: https://yymm.github.io/Yonakajikaru/"&gt;yymm/Yonakajikaru&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="threejs"&gt;何でThree.js?&lt;/h1&gt;
&lt;p&gt;WebGLレンダリングもでき、APIがわかりやすいという印象を受けたので採用しました。&lt;/p&gt;
&lt;h1 id="_1"&gt;はじめの一歩&lt;/h1&gt;
&lt;p&gt;基本的に公式のドキュメントを参考にして作っていきました。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://threejs.org/docs/index.html#Manual/Introduction/Creating_a_scene" title="three.js - documentation - Manual - Creating a scene"&gt;three.js - documentation - Manual - Creating a scene&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上記のドキュメントの最後に書いてあるhtmlとjavascript部分をちょっといじってファイルにしたものです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My first Three.js app&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;canvas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;js/three.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;js/app.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGLRenderer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BoxGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x00ff00&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cube&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;cube&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;index.htmlをブラウザで見てみると緑のcubeがぐるぐるしているのがみえるはずです。&lt;/p&gt;
&lt;p&gt;このサンプルコードをベースに作っていきます。&lt;/p&gt;
&lt;h1 id="_2"&gt;四角を表示する&lt;/h1&gt;
&lt;p&gt;表示したいのはただの四角形なので四角形をドキュメントから探します。&lt;/p&gt;
&lt;p&gt;図形はGeometriesにあり、PlaneGeometoryかPlaneBufferGeometryを使えば四角形を表示できるようです。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://threejs.org/docs/index.html#Reference/Geometries/PlaneGeometry" title="three.js - documentation - Reference - PlaneGeometry"&gt;three.js - documentation - Reference - PlaneGeometry&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PlaneGeometry(width, height, widthSegments, heightSegments)&lt;/p&gt;
&lt;p&gt;width — Width along the X axis.&lt;br /&gt;
height — Height along the Y axis.&lt;br /&gt;
widthSegments — Optional. Default is 1.&lt;br /&gt;
heightSegments — Optional. Default is 1. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;BoxGeometryをPlaneGeometryに差替えます、引数は必要なものだけBoxGeometryを同じ値で設定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gd"&gt;- const geometry = new THREE.BoxGeometry( 1, 1, 1 );&lt;/span&gt;
&lt;span class="gi"&gt;+ const geometry = new THREE.PlaneGeometry( 1, 1 );&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;引数はwidth,heightなので1×1の四角になります。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;普通のGeometryかBufferGeometryのどちらを使えばいいのか判断するためBufferGeometryのドキュメントを読みました。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://threejs.org/docs/index.html#Reference/Core/BufferGeometry" title="three.js - documentation - Reference - BufferGeometry"&gt;three.js - documentation - Reference - BufferGeometry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BufferGeometryはGeometryよりも効率的だけど扱いが大変で、シェーダーなど使う場合はBufferGeomerty一択になるようです。&lt;/p&gt;
&lt;p&gt;今回は複雑な使い方しないの+いっぱい四角を表示するのでGPU効率の良いBufferGeometryを使うことにします。&lt;/p&gt;
&lt;h1 id="_3"&gt;四角を増やす&lt;/h1&gt;
&lt;p&gt;愚直にfor文をぶん回す方法で増やてみます、ひとつひとつ図形(Mesh:geometryとmaterial)を作ってSceneに追加していく方法です。&lt;/p&gt;
&lt;p&gt;図形の位置はMeshのpositionを変更することで移動できます。positionのデフォルト値は(x,y,z)=(0,0,0)です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PlaneBufferGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x00ff00&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;plane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;plane&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="086da7fe3c4a4a75e6f4971f09076019.png" src="https://i.gyazo.com/086da7fe3c4a4a75e6f4971f09076019.png" /&gt;&lt;/p&gt;
&lt;p&gt;増えましたが、効率悪そうです。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.tsumikiinc.com/article/20160225_threejs-points.html" title="three.js製パーティクルシステムの実装 | 技術コラム | つみきブログ"&gt;three.js製パーティクルシステムの実装 | 技術コラム | つみきブログ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上記のブログにあるようにgeometryで四角いパーティクルを作ってシェーダーで色や動きをつけていくほうが効率的なように思えますが今後の課題とします。(パフォーマンスの測定方法とかも知らないのでこれも課題)&lt;/p&gt;
&lt;h1 id="_4"&gt;ランダムにいっぱいの四角を表示する&lt;/h1&gt;
&lt;p&gt;まず表示する範囲について考えます。&lt;/p&gt;
&lt;p&gt;エンディングでカメラが動いた時に横にも四角が広がっているように見えるので、見えている範囲より広め(表示範囲の２倍くらい)に分布するようにします。&lt;/p&gt;
&lt;p&gt;各話でエンディングムービーが若干異なりますが一話のエンディングの感じだと相当奥まで多くの四角が広がっているのでz方向が深めにとったほうが良さそうです。&lt;/p&gt;
&lt;p&gt;以上を踏まえてxy方向、z方向についてカメラの範囲と位置や四角の大きさ、表示範囲を調整します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;far&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;far&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGLRenderer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRandomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PlaneBufferGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;50&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x00ff00&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;plane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRandomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRandomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRandomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;far&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;plane&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;far&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="c2972efba2b732c68eb3e0c437ebb5f8.png" src="https://i.gyazo.com/c2972efba2b732c68eb3e0c437ebb5f8.png" /&gt;&lt;/p&gt;
&lt;p&gt;いい感じです、コードの説明をします。&lt;/p&gt;
&lt;p&gt;まずカメラですが、ドキュメントを確認すると引数は以下のようになっています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PerspectiveCamera( fov, aspect, near, far )&lt;/p&gt;
&lt;p&gt;fov — Camera frustum vertical field of view.&lt;br /&gt;
aspect — Camera frustum aspect ratio.&lt;br /&gt;
near — Camera frustum near plane.&lt;br /&gt;
far — Camera frustum far plane. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;fov(画角)を広げるか、frustum(円錐)を広げるか迷いますが、frustumのfarを変更するほうが直感的に分かりやすかったのでfovはサンプルコードの初期値のままにしました。&lt;/p&gt;
&lt;p&gt;あと、cameraのz方向が元のサンプルコードのままだと近すぎて何も見えないので設定したfar程度に離します。&lt;/p&gt;
&lt;p&gt;(fovやfrustumなど全く聞き慣れない単語なので検索ないとよくわからなかったです。&lt;a href="https://ja.wikipedia.org/wiki/%E7%94%BB%E8%A7%92" title="画角 - Wikipedia"&gt;画角 - Wikipedia&lt;/a&gt;や&lt;a href="http://r-dimension.xsrv.jp/classes_j/6_interactive3d/" title="6. カメラ（processing 3D入門） | Yasushi Noguchi Class"&gt;6. カメラ（processing 3D入門） | Yasushi Noguchi Class&lt;/a&gt;などを参考にしました。)&lt;/p&gt;
&lt;p&gt;四角の位置はランダムに配置するようにします、x,y,z方向で範囲が違うので任意の範囲で乱数生成しています。サイズは1のままだと近いものしか見えないので適度な大きさ(50)にしています。個数は1000個にしてますがカメラをもっと離して個数をもっと増やすと賑やかしくなりそうです。&lt;/p&gt;
&lt;p&gt;(ちなみに、はじめのうちは調整する感覚がつかめず真っ黒な画面になることが多かったです、値を変更しながらイメージして試行錯誤してこの値になってます。)&lt;/p&gt;
&lt;h1 id="_5"&gt;カラフルにする&lt;/h1&gt;
&lt;p&gt;色などはmaterialで設定します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://threejs.org/docs/index.html#Reference/Materials/MeshBasicMaterial" title="three.js - documentation - Reference - MeshBasicMaterial"&gt;three.js - documentation - Reference - MeshBasicMaterial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://threejs.org/docs/index.html#Reference/Materials/Material" title="three.js - documentation - Reference - Material"&gt;three.js - documentation - Reference - Material&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;透過も一緒に設定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#000000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/0/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transparent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.6&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="247da044b6db69d7c707ab76c1ac7fcc.png" src="https://i.gyazo.com/247da044b6db69d7c707ab76c1ac7fcc.png" /&gt;&lt;/p&gt;
&lt;p&gt;それっぽい感じになってきました。ちょっと変更するだけでそれっぽくなってテンションが上がります。&lt;/p&gt;
&lt;p&gt;fovを2倍、個数を5倍にして賑やかしさも上げました、PCのファンも回り出します。&lt;/p&gt;
&lt;p&gt;HEXを作っているコードはstackoverflowから拾ってきたものです(URLは忘れてしまいました...)&lt;/p&gt;
&lt;h1 id="_6"&gt;カメラを動かす&lt;/h1&gt;
&lt;p&gt;アニメーションは最後の方にあるrenderの関数内に記述します。&lt;/p&gt;
&lt;p&gt;とりあえず、cameraのz方向を小さくしていくと近づいていきます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;xy方向はカメラが回転している感じに動いているので、mousemoveイベントを追加してカメラを連動させてみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mousemove&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;画面中心を(0,0)としてマウスの方向に連動(x,yの指定が逆)して動くように設定しています。&lt;/p&gt;
&lt;p&gt;rotationは角度(rad)で指定するため大きい数で割らないとぶっ飛んで行くので注意です。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;カメラを回転して気づくことですが、通り過ぎていった四角を後ろから見ようとすると見えません何故か消えてなくなっています。これはMaterialのsideがデフォルトでTHREE.FrontSideになっており表しか見えなかったためです。T&lt;br /&gt;
HREE.DoubleSideを指定すると通り過ぎていった四角も見えるようになります。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://threejs.org/docs/index.html#Reference/Materials/Material" title="three.js - documentation - Reference - Material"&gt;three.js - documentation - Reference - Material&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;side&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DoubleSide&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transparent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;マウスに連動してカメラがぐるぐるしている様子です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="3f70de403256df94b5ca5130de4c5ec8.gif" src="https://i.gyazo.com/3f70de403256df94b5ca5130de4c5ec8.gif" /&gt;&lt;/p&gt;
&lt;h1 id="_7"&gt;微調整&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;回転済みの四角作成&lt;/li&gt;
&lt;li&gt;スピードチェンジ機能&lt;/li&gt;
&lt;li&gt;その他微調整&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下これまでの内容のapp.jsです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;far&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;20000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;far&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGLRenderer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRandomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PlaneBufferGeometry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;50&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#000000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/0/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MeshBasicMaterial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;side&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DoubleSide&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transparent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getRandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;plane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Mesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;material&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRandomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRandomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRandomInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;far&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;7&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRandom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;plane&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;far&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;3&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isMouseDown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;zSpeed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mousedown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isMouseDown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mouseup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;isMouseDown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mousemove&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isMouseDown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;zSpeed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;zSpeed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;zSpeed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="519d6baa7dfb2a8568851e968d7d3f1c.gif" src="https://i.gyazo.com/519d6baa7dfb2a8568851e968d7d3f1c.gif" /&gt;&lt;/p&gt;
&lt;p&gt;左ドラッグするとｷﾞｭｰﾝと近づきます。すごいそれっぽい。&lt;/p&gt;
&lt;p&gt;透過と角度をランダムに指定しているのでキラキラ感が増した気がします。&lt;/p&gt;
&lt;h1 id="_8"&gt;背景アニメーション&lt;/h1&gt;
&lt;p&gt;背景の色はrendererのsetClearColorで変更できます。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://threejs.org/docs/index.html?q=render#Reference/Renderers/WebGLRenderer" title="three.js - documentation - Reference - WebGLRenderer"&gt;three.js - documentation - Reference - WebGLRenderer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;いい方法が思いつかないので非常に雑に白にしてみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fadeColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mh"&gt;0xffffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xdddddd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xbbbbbb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x555555&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x333333&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x111111&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;zSpeed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;14800&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setClearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fadeColor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;14810&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setClearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fadeColor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;14820&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setClearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fadeColor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;14830&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setClearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fadeColor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;14840&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setClearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fadeColor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;14850&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setClearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fadeColor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="c7b46473622af8697026e5ea01a61de4.gif" src="https://i.gyazo.com/c7b46473622af8697026e5ea01a61de4.gif" /&gt;&lt;/p&gt;
&lt;p&gt;雑ですが動いたのでok.....&lt;/p&gt;
&lt;h1 id="_9"&gt;最後に&lt;/h1&gt;
&lt;p&gt;サンプルコードをベースにして、コードを書く側としては無理なく作ってみました(ブラウザやGPUやCPUは無理してるかもしれません)。&lt;/p&gt;
&lt;p&gt;普段ビジュアル的なプログラミングをしていない自分でも手軽にリッチな表現を扱えるThree.jsは面白いと感じました。&lt;/p&gt;
&lt;p&gt;(欲を言えば音楽や星形や図形のアニメーションもやりたかったのですが仕事の息抜きの範疇を超え始めるので断念しました無念。)&lt;/p&gt;
&lt;p&gt;余裕があれば最適なコードを勉強していきたい所存なので、有識者の方アドバイスあれば是非に。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;もともと&lt;a href="http://www.adventar.org/calendars/1454#list-2016-12-05" title="まんがタイムきらら Advent Calendar 2016 - Adventar"&gt;まんがタイムきらら Advent Calendar 2016&lt;/a&gt;の参加予定はなかったのですが、たまたま空いていたので急遽入れてみました。&lt;/p&gt;
&lt;p&gt;きららアニメには毎期癒やされていますが、ステラのまほうは癒やし効果とプログラミングのモチベーション向上効果があって最高です、みなさん癒やされてプログラミングがんばりましょう。&lt;/p&gt;
&lt;p&gt;&lt;img alt="a47ec6591fa0030818008a1dda344f5d.png" src="https://i.gyazo.com/a47ec6591fa0030818008a1dda344f5d.png" /&gt;&lt;/p&gt;</summary><category term="Three.js"></category><category term="WebGL"></category></entry><entry><title>氷パ考察 ダブルバトル</title><link href="https://muunyblue.github.io/e6d76b26416ca5de309d8fd741894447.html" rel="alternate"></link><published>2016-09-16T06:50:27+09:00</published><updated>2016-09-16T06:50:27+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-09-16:e6d76b26416ca5de309d8fd741894447.html</id><summary type="html">&lt;h1 id="_1"&gt;運用例&lt;/h1&gt;
&lt;p&gt;実践中...&lt;/p&gt;
&lt;p&gt;(情報は随時更新していきます)&lt;/p&gt;
&lt;h1 id="_2"&gt;ユキメノコ&lt;/h1&gt;
&lt;p&gt;@ひかりのこな おくびょう ゆきがくれ CS252&lt;/p&gt;
&lt;p&gt;かなしばり/でんじは/たたりめ/ふぶき (うそなき|みちづれ)&lt;/p&gt;
&lt;p&gt;かなしばりを有効に使いたい&lt;/p&gt;
&lt;h1 id="_3"&gt;フロストロトム&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;オボン&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;@オボン ひかえめ ふゆう HC252&lt;/p&gt;
&lt;p&gt;ふぶき/10万|ほうでん|ボルチェン/鬼火/でんじは&lt;/p&gt;
&lt;p&gt;鬼火と電磁波を撒いてサポートしつつふぶき&amp;amp;一致電気技&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;メガネ&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;@メガネ ひかえめ ふゆう HC252&lt;/p&gt;
&lt;p&gt;ふぶき/10万/ボルチェン/トリック&lt;/p&gt;
&lt;p&gt;与ダメージ計算&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;C特化&lt;/th&gt;
&lt;th&gt;メガネ&lt;/th&gt;
&lt;th&gt;メガネてだすけ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;H4メガリザY10万&lt;/td&gt;
&lt;td&gt;86.2%～101.9%&lt;/td&gt;
&lt;td&gt;126.7%～150.3%&lt;/td&gt;
&lt;td&gt;189.5%～224.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H4メガリザボルチェン&lt;/td&gt;
&lt;td&gt;66.2%～79.2%&lt;/td&gt;
&lt;td&gt;98.7%～116.8%&lt;/td&gt;
&lt;td&gt;148%～175.3%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H252ハッサム10万&lt;/td&gt;
&lt;td&gt;49.7%～59.3%&lt;/td&gt;
&lt;td&gt;74.5%～88.1%&lt;/td&gt;
&lt;td&gt;110.7%～131%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H4メガガルーラふぶき&lt;/td&gt;
&lt;td&gt;37%～43.6%&lt;/td&gt;
&lt;td&gt;55.2%～65.1%&lt;/td&gt;
&lt;td&gt;82.8%～97.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;メガネてだすけでびっくり火力になって良さ。&lt;/p&gt;
&lt;p&gt;メガネ型は手助けができるグレイシアと組むときに採用するかもしれない。&lt;/p&gt;
&lt;h1 id="_4"&gt;マニューラ&lt;/h1&gt;
&lt;p&gt;@珠or襷 ようき プレッシャー AS252&lt;/p&gt;
&lt;p&gt;はたき落とす/猫騙し/氷の礫/けたぐり|ちょうはつ|まもる|つららおとし|れいとうパンチ&lt;/p&gt;
&lt;p&gt;与ダメージ計算&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;A252&lt;/th&gt;
&lt;th&gt;珠&lt;/th&gt;
&lt;th&gt;鉢巻(てだすけ)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;H252ギルガルドはたきおとす&lt;/td&gt;
&lt;td&gt;68.2%～80.2%&lt;/td&gt;
&lt;td&gt;88.6%～104.1%&lt;/td&gt;
&lt;td&gt;100.5%～118.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H252ランドロス氷の礫&lt;/td&gt;
&lt;td&gt;73.4%～87.7%&lt;/td&gt;
&lt;td&gt;95.4%～114.2%&lt;/td&gt;
&lt;td&gt;110.2%～130.6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H252ボルトロス氷の礫&lt;/td&gt;
&lt;td&gt;46.2%～55.9%&lt;/td&gt;
&lt;td&gt;60.2%～72.5%&lt;/td&gt;
&lt;td&gt;70.9%～83.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H252ボルトロスはたきおとす&lt;/td&gt;
&lt;td&gt;56.4%～66.6%&lt;/td&gt;
&lt;td&gt;73.1%～86.5%&lt;/td&gt;
&lt;td&gt;84.4%～100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H4メガガルーラけたぐり(100)&lt;/td&gt;
&lt;td&gt;60.7%～71.8%&lt;/td&gt;
&lt;td&gt;79%～93.3%&lt;/td&gt;
&lt;td&gt;89.5%～106%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H4メガガルーラねこだまし&lt;/td&gt;
&lt;td&gt;12.1%～14.9%&lt;/td&gt;
&lt;td&gt;16%～19.3%&lt;/td&gt;
&lt;td&gt;18.2%～21.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id="_5"&gt;パルシェン&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;@スカーフ ようき スキリン AS252&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;つららばり/ロックブラスト/シェルブレード|ドロポン|氷の礫&lt;/p&gt;
&lt;p&gt;リザードンを強く見ていく型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;@襷 いじっぱり スキリン A252S調整&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;殻を破る/つららばり/ロックブラスト/ドロポン|氷の礫&lt;/p&gt;
&lt;p&gt;殻破エース&lt;/p&gt;
&lt;h1 id="_6"&gt;ユキノオー&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;@たべのこし ゆきふらし H220BD調整S調整 ずぶといA↓/わんぱくC↓ or おだやかA↓/しんちょうC↓&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例. H220(16n+1) S96 B|D188&lt;/p&gt;
&lt;p&gt;まもる/やどりぎのタネ/ふぶきorギガドレイン/みがわり&lt;/p&gt;
&lt;p&gt;あられは1/16、やどりぎは1/8削る、まもるみがわりで苦手なポケモンに対して立ち回る&lt;/p&gt;
&lt;p&gt;みがわりを使う場合素早さ調整をしたほうが良い&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mf"&gt;75&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;120&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;メガハッサム&lt;/span&gt;
&lt;span class="mf"&gt;71&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;88&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;メガバンギラス&lt;/span&gt;
&lt;span class="mf"&gt;70&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;キリキザン&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;メタグロス&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;メガは110&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;65&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ハッサム&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="mf"&gt;61&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;バンギラス&lt;/span&gt;
&lt;span class="mf"&gt;60&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;同速&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ギルガルド&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ニンフィア&lt;/span&gt;
&lt;span class="mf"&gt;50&lt;/span&gt; &lt;span class="n"&gt;マリルリ&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;クチート&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;メガクチート&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ギルガルドは抜いておきたい、あとはバンギだけどそれは狙い次第&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メガバンギキリキザンメタフグスあたりを意識するなら96振り&lt;/li&gt;
&lt;li&gt;最低限だと16(ギルガ/ニンフィア/バンギ) &amp;lt;= 振られると抜けないので不安&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;耐久&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;H252&lt;/th&gt;
&lt;th&gt;HB/D252特化&lt;/th&gt;
&lt;th&gt;メガH252&lt;/th&gt;
&lt;th&gt;メガHB/D252特化&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ファイアロー鉢巻特化ブレバ&lt;/td&gt;
&lt;td&gt;161.6%～190.6%&lt;/td&gt;
&lt;td&gt;111.9%～131.6%&lt;/td&gt;
&lt;td&gt;122.2%～146.1%&lt;/td&gt;
&lt;td&gt;90.1%～106.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ファイアロー特化ブレバ&lt;/td&gt;
&lt;td&gt;141.4%～166.8%&lt;/td&gt;
&lt;td&gt;74.6%～88%&lt;/td&gt;
&lt;td&gt;81.8%～97.4%&lt;/td&gt;
&lt;td&gt;60.1%～71.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ギルガ特化ラスカノ&lt;/td&gt;
&lt;td&gt;97.4%～115.7%&lt;/td&gt;
&lt;td&gt;68%～82.2%&lt;/td&gt;
&lt;td&gt;82.2%～97.4%&lt;/td&gt;
&lt;td&gt;60.1%～72.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ランドロスいわなだれ&lt;/td&gt;
&lt;td&gt;44.6%～52.7%&lt;/td&gt;
&lt;td&gt;30.4%～36.5%&lt;/td&gt;
&lt;td&gt;34.5%～40.6%&lt;/td&gt;
&lt;td&gt;24.3%～29.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ニンフィア特化ハイボ&lt;/td&gt;
&lt;td&gt;42.6%～50.7%&lt;/td&gt;
&lt;td&gt;29.4%～35.5%&lt;/td&gt;
&lt;td&gt;35.5%～42.6%&lt;/td&gt;
&lt;td&gt;25.8%～30.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ハッサム特化テクニバレパン&lt;/td&gt;
&lt;td&gt;73%～86.2%&lt;/td&gt;
&lt;td&gt;49.7%～58.8%&lt;/td&gt;
&lt;td&gt;55.8%～67%&lt;/td&gt;
&lt;td&gt;40.6%～48.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;不一致抜群や等倍はわりと受けれるかも、一致抜群は厳しいけど遅い相手には身代わりでなんとか立ち回れる可能性&lt;/p&gt;
&lt;p&gt;ファイロー、ハッサムは無理なので逃げてほかで対処するしかない&lt;/p&gt;
&lt;p&gt;ギルガルドはPGLのORASシーズン16ダブルだと特殊が多いよう(シャドボ90%,ラスカノ60%,アイヘ9%)なので特殊受けのが現環境ではいいかもしれない&lt;/p&gt;
&lt;p&gt;BDどちらに振るかは他のメンバーと相談だが、ジュゴンを物理方面に固くする場合、ユキノオーを特殊にするのありかもしれない&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;メガユキノオー&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;@メガ ゆきふらし れいせい/ひかえめ/いじっぱり/ゆうかん HA|C252&lt;/p&gt;
&lt;p&gt;ふぶき/ギガドレイン|エナボ/じしん|いわなだれ/まもる|氷の礫&lt;/p&gt;
&lt;p&gt;耐久はそこそこ上がるのでSを捨てて後攻で殴っていく&lt;/p&gt;
&lt;h1 id="_7"&gt;イノムー&lt;/h1&gt;
&lt;p&gt;@輝石 いじっぱり あついしぼう HA252&lt;/p&gt;
&lt;p&gt;じしん/氷の礫/いわなだれ/ステロ|ひかりのかべ|リフレクター&lt;/p&gt;
&lt;p&gt;与ダメ計算&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;無振り&lt;/th&gt;
&lt;th&gt;全振り&lt;/th&gt;
&lt;th&gt;特化全振り&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;無振りガブ礫&lt;/td&gt;
&lt;td&gt;54.6%～65.5%&lt;/td&gt;
&lt;td&gt;67.7%～80.8%&lt;/td&gt;
&lt;td&gt;72.1%～87.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H252ランド礫&lt;/td&gt;
&lt;td&gt;51%～63.2%&lt;/td&gt;
&lt;td&gt;67.3%～79.5%&lt;/td&gt;
&lt;td&gt;69.3%～85.7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;メガリザY岩雪崩&lt;/td&gt;
&lt;td&gt;67.9%～81%&lt;/td&gt;
&lt;td&gt;88.8%～104.5%&lt;/td&gt;
&lt;td&gt;94.1%～112.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H252ファイアロー岩雪崩&lt;/td&gt;
&lt;td&gt;60.5%～73.5%&lt;/td&gt;
&lt;td&gt;77.8%～92.9%&lt;/td&gt;
&lt;td&gt;84.3%～99.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;メガリザX地震&lt;/td&gt;
&lt;td&gt;50.9%～60.1%&lt;/td&gt;
&lt;td&gt;66.6%～78.4%&lt;/td&gt;
&lt;td&gt;70.5%～83.6%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;メガリザX礫&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;17.6%～21.5%&lt;/td&gt;
&lt;td&gt;19.6%～23.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A特化全振りであられ込みでやっとメガリザYが1ターンなので、A特化252確定ぽい。&lt;/p&gt;
&lt;p&gt;非ダメ計算&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;無振り&lt;/th&gt;
&lt;th&gt;特化全振り&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;メガリザY熱風&lt;/td&gt;
&lt;td&gt;50.2%～60.8%&lt;/td&gt;
&lt;td&gt;32.8%～40.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;メガリザXフレドラ&lt;/td&gt;
&lt;td&gt;52.1%～61.8%&lt;/td&gt;
&lt;td&gt;35.7%～43.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ファイアロー特化ブレバ&lt;/td&gt;
&lt;td&gt;32.3%～38.1%&lt;/td&gt;
&lt;td&gt;22.2%～26.5%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;あついしぼうと輝石のおかげで結構硬い。&lt;/p&gt;
&lt;h1 id="_8"&gt;ジュゴン&lt;/h1&gt;
&lt;p&gt;@たべのこしorラムorカゴ ずぶとい(B↑A↓)/おだやかD↑A↓ あついしぼう HB|D252&lt;/p&gt;
&lt;p&gt;かなしばり/ねこだまし|こごえるかぜ|アンコ|なかまづくり|零度|ねむる|まもる&lt;/p&gt;
&lt;p&gt;たべのこしをユキノオーに持たせる場合、眠る+カゴorラムありかも&lt;/p&gt;
&lt;p&gt;ハッサム対策検討 =&amp;gt; かなしばり、なかまづくり、アンコール&lt;/p&gt;
&lt;p&gt;氷ポケモンはハッサムにかなり弱い(氷技半減、鋼抜群、炎技はめざパしかない)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;バレパンかなしばり&lt;/li&gt;
&lt;li&gt;剣舞読みアンコ(ハッサムより遅い必要がある)&lt;/li&gt;
&lt;li&gt;仲間づくりで弱体化を狙う(なかまづくりであついしぼうに下手にすると氷技の通りが悪くなって微妙)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;剣舞読みアンコを後攻で打てるかどうか、そもそもリスクを犯して打つ必要があるかどうか問題&lt;/p&gt;
&lt;p&gt;=&amp;gt; 現状レーティングの状況を見てみると8割強のハッサムがいじっぱりなのでSはVで無振りor4振りor調整が多い予想される、下降補正はあまりいないと考えても良いかも...?&lt;/p&gt;
&lt;p&gt;(ハッサムの剣舞搭載率は50%くらい)&lt;/p&gt;
&lt;p&gt;バレパンかなしばりが一番安定しそう(後攻でかなしばりを打つことが多いので読みが必要)&lt;/p&gt;
&lt;p&gt;鋼等倍氷は冷蔵庫ロトムもいてこっちは鬼火が打てる(氷パにとってハッサムはかなり重いので2体でハッサム対策しても良さそう)&lt;/p&gt;
&lt;p&gt;非ダメ計算&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;HB/D252特化&lt;/th&gt;
&lt;th&gt;H252&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ハッサム特化テクニバレパン&lt;/td&gt;
&lt;td&gt;24.3%～28.9%&lt;/td&gt;
&lt;td&gt;34%～41.1%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ハッサム特化テクニ鉢巻バレパン&lt;/td&gt;
&lt;td&gt;35.5%～42.6%&lt;/td&gt;
&lt;td&gt;51.7%～61.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;メガリザY熱風&lt;/td&gt;
&lt;td&gt;21.3%～24.8%&lt;/td&gt;
&lt;td&gt;28.9%～34%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;結構堪える、電気格闘あたりが飛んできそうなのでイノムーユキメノコあたりとサイクルできそう&lt;/p&gt;
&lt;h1 id="_9"&gt;グレイシア&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;メガネアタッカー&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;@メガネ ひかえめ ゆきがくれ HC252&lt;/p&gt;
&lt;p&gt;ふぶき/れいとうビーム/シャドーボール/シグナルビーム&lt;/p&gt;
&lt;p&gt;C130からひたすら殴っていく&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;サポート&amp;amp;ふぶき&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;@ひかりのこな ひかえめ ゆきがくれ HC252&lt;/p&gt;
&lt;p&gt;てだすけ/つぶらなひとみ/ふぶき/ねがいごと|うそなき|あくび|なきごえ&lt;/p&gt;
&lt;p&gt;ダブルのてだすけはかなり有効なので必須&lt;/p&gt;
&lt;p&gt;つぶらなひとみは先制A下げができるので有効かもしれない。ほかの補助技は相談&lt;/p&gt;
&lt;h1 id="_10"&gt;フリーザー&lt;/h1&gt;
&lt;p&gt;@オボン? ようきHAD プレッシャー HD252&lt;/p&gt;
&lt;p&gt;こころのめ/ぜったいれいど/おいかぜ|リフレクター|はねやすめ|氷の礫&lt;/p&gt;
&lt;p&gt;こころのめ零度特殊受け&lt;/p&gt;
&lt;h1 id="_11"&gt;フリージオ&lt;/h1&gt;
&lt;p&gt;@ おくびょう ふゆう CS252&lt;/p&gt;
&lt;p&gt;フリーズドライ/ふぶき/ラスターカノン/リフレクター|ひかりのかべ|じこさいせい&lt;/p&gt;
&lt;h1 id="_12"&gt;仮想敵&lt;/h1&gt;
&lt;p&gt;炎/岩/鋼/格闘&lt;/p&gt;
&lt;p&gt;メジャー炎&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メガリザードンY 岩電気 &amp;lt;= スカーフパルシェン&lt;/li&gt;
&lt;li&gt;ヒードラン 地面炎水 &amp;lt;= イノムー?(ラスカノ非ダメ60.8%～72.4%)&lt;/li&gt;
&lt;li&gt;ファイアロー 岩電気水 &lt;/li&gt;
&lt;li&gt;バシャーモ 水飛行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;メジャー鋼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;クチート 地面炎&lt;/li&gt;
&lt;li&gt;キリキザン 地面炎格闘&lt;/li&gt;
&lt;li&gt;ギルガルド 地面ゴースト炎&lt;/li&gt;
&lt;li&gt;ハッサム 炎&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;メジャー岩格闘&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テラキオン 格闘水&lt;/li&gt;
&lt;li&gt;キノガッサ 氷&lt;/li&gt;
&lt;li&gt;バンギラス 格闘水&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その他メジャー&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メガガルーラ 格闘 &amp;lt;= ユキメノコ(タイプ相性的に)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;ドラゴン草地面飛行あたりに強くメジャー迷惑なポケモンの一部を牽制可能&lt;/p&gt;
&lt;p&gt;&lt;del&gt;防御性能は氷半減ないので壊滅...&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ボーマンダ&lt;/li&gt;
&lt;li&gt;カイリュー&lt;/li&gt;
&lt;li&gt;ガブリアス&lt;/li&gt;
&lt;li&gt;ジュカイン&lt;/li&gt;
&lt;li&gt;ランドロス&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;グライオン&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;トゲキッス&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;ボルトロス&lt;/li&gt;
&lt;li&gt;モロバレル&lt;/li&gt;
&lt;li&gt;フシギバナ(メガバナは突っ張ってきそう)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;フリーズドライを警戒して牽制できそうなポケモン&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ラグラージ&lt;/li&gt;
&lt;li&gt;キングドラ&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;普通の相性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ウォッシュロトム&lt;/li&gt;
&lt;li&gt;ゲンガー&lt;/li&gt;
&lt;li&gt;マリルリ&lt;/li&gt;
&lt;li&gt;ゲッコウガ&lt;/li&gt;
&lt;li&gt;クレセリア&lt;/li&gt;
&lt;li&gt;ニンフィア&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Pokemon"></category></entry><entry><title>Xubuntu 16.04 初期設定</title><link href="https://muunyblue.github.io/99113167f3b816bdeb56ff1af6cec7af.html" rel="alternate"></link><published>2016-09-15T04:25:01+09:00</published><updated>2016-09-15T04:25:01+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-09-15:99113167f3b816bdeb56ff1af6cec7af.html</id><summary type="html">&lt;p&gt;ASUS Eee PC X101CHにXubuntuをインストールした際の設定です。&lt;/p&gt;
&lt;p&gt;Xubuntuは軽量デスクトップのXfce4を使っていてマシンスペックの低いPC向けで、使ってみた感じ欲しい設定は一通りそろっていて使いやすい印象があります。&lt;/p&gt;
&lt;p&gt;この記事では見た目や最低限使うための設定について書きます。&lt;/p&gt;
&lt;p&gt;これ以外に開発用にTerminalで設定している項目がありますがVimだけにとどめてあります。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;目次&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sudo-apt-get-update"&gt;sudo apt-get update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;日本語入力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#caps-to-ctl"&gt;caps to ctl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#synapse"&gt;Synapse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gyazo"&gt;Gyazo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#panel"&gt;Panelの設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#workspaces"&gt;Workspaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;不要なデスクトップアイコン削除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;キーリピート速度設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vim"&gt;Vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="sudo-apt-get-update"&gt;sudo apt-get update&lt;/h1&gt;
&lt;p&gt;リポジトリが古いので更新します。&lt;/p&gt;
&lt;p&gt;updateしないとgitもインストールできないので最初にやると良いです。&lt;/p&gt;
&lt;h1 id="_1"&gt;日本語入力&lt;/h1&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="http://blog.muuny-blue.info/3faf3b08de6c7c130e63c0e38e5553a8.html"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h1 id="caps-to-ctl"&gt;caps to ctl&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://askubuntu.com/questions/149971/how-do-you-remap-a-key-to-the-caps-lock-key-in-xubuntu/223674" title="How do you remap a key to the Caps Lock key in Xubuntu? - Ask Ubuntu"&gt;How do you remap a key to the Caps Lock key in Xubuntu? - Ask Ubuntu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これを参考に以下の設定をします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo vi /etc/default/keyboard
&lt;span class="nv"&gt;XKBOPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ctrl:nocaps&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再起動後に結講になります。&lt;/p&gt;
&lt;h1 id="synapse"&gt;Synapse&lt;/h1&gt;
&lt;p&gt;Synapseはランチャーです、個人的にすごい気に入って使っています。&lt;/p&gt;
&lt;p&gt;Softwareというアプリからインストールします。起動して検索窓にSynapseと入力すると出てくるのでインストールします。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/c6ed3670102891d306e21b85ba18a482.png" /&gt;&lt;/p&gt;
&lt;p&gt;ThemeをSide Doishにしたのが以下です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/3854b6b5aee86c12500875e0951b645f.png" /&gt;&lt;/p&gt;
&lt;p&gt;Xfce4だと青くなるぽいです、見た目が綺麗です。&lt;/p&gt;
&lt;h1 id="gyazo"&gt;Gyazo&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/gyazo/Gyazo-for-Linux" title="gyazo/Gyazo-for-Linux: Gyazo for Linux"&gt;gyazo/Gyazo-for-Linux: Gyazo for Linux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;公式リポジトリの通りにインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -s https://packagecloud.io/install/repositories/gyazo/gyazo-for-linux/script.deb.sh &lt;span class="p"&gt;|&lt;/span&gt; sudo bash
$ sudo apt-get install gyazo
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="panel"&gt;Panelの設定&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/ec625a96ccb251fa4ade65d17738fcb1.png" /&gt;&lt;/p&gt;
&lt;p&gt;デスクトップの上または横にあるbarをPanelと言います。縦の解像度が厳しいPCなのでModeを横に配置している画像です。&lt;/p&gt;
&lt;p&gt;barを右クリックして"Panel&amp;gt;Panel Preferense"から設定を変更できます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/8efced66e9e11e6b8faf605ace666a31.png" /&gt;&lt;/p&gt;
&lt;p&gt;幅や長さも変更できてPanelのカスタマイズ性がとても高いです。&lt;/p&gt;
&lt;p&gt;Itemsで表示するItemを選択できるのですが割と欲しいものがそろっています。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/a4d54300c505f2db60f370fb66e82c6f.png" /&gt;&lt;/p&gt;
&lt;p&gt;設定後&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/6227d3f45f7a20051d0009fbbb45b4d6.png" /&gt;&lt;/p&gt;
&lt;h1 id="workspaces"&gt;Workspaces&lt;/h1&gt;
&lt;p&gt;"Settings&amp;gt;Workspaces"で設定できます。&lt;/p&gt;
&lt;p&gt;Xfce4の場合は横にどんどん増えていきます。2画面あると便利なので2に設定しました。&lt;/p&gt;
&lt;p&gt;切り替えはデフォルトでCtrl+Alt+十字キーです、Ctｒｌ＋Fn+Alt+十字キーでウィンドウの移動ができます。&lt;/p&gt;
&lt;h1 id="_2"&gt;不要なデスクトップアイコン削除&lt;/h1&gt;
&lt;p&gt;"Settings&amp;gt;Desktop"の"Icons&amp;gt;Default Icons"で設定できます。&lt;/p&gt;
&lt;p&gt;いらないので全部チェックを外しました。&lt;/p&gt;
&lt;h1 id="_3"&gt;キーリピート速度設定&lt;/h1&gt;
&lt;p&gt;"Settings&amp;gt;Keyboard"のRepeat Delay"と"Repeat Speed"を変更します。&lt;/p&gt;
&lt;p&gt;250と55に設定しました(デフォルト500と20)&lt;/p&gt;
&lt;h1 id="vim"&gt;Vim&lt;/h1&gt;
&lt;p&gt;※ Vimerのみ&lt;/p&gt;
&lt;p&gt;Vimはビルドしてインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;gettext&lt;/span&gt; &lt;span class="n"&gt;libncurses5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;libacl1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;libgpm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;libxmu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;libgtk2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;libxpm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;libperl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;lua5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;liblua5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;Downloads&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;huge&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gtk2&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;perlinterp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pythoninterp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;python3interp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rubyinterp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;luainterp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;missing&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Xubuntu"></category></entry><entry><title>Vim使いがVSCodeを始める例</title><link href="https://muunyblue.github.io/274895fd4fa237a59a5a2f2aab135e5e.html" rel="alternate"></link><published>2016-12-08T08:05:12+09:00</published><updated>2016-12-08T08:05:12+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-09-14:274895fd4fa237a59a5a2f2aab135e5e.html</id><summary type="html">&lt;p&gt;Vimに比べるとVSCodeのほうが引き継ぎのときに楽なのではと思い立ちVSCodeをはじめてみます。&lt;/p&gt;
&lt;h1 id="_1"&gt;エディタに求めていること&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/307d663020d4557260bbbc6bfe45de13.png" /&gt;&lt;/p&gt;
&lt;p&gt;素VSCodeを眺めて普段エディタに求めている最低限のことについて考えてみます。&lt;/p&gt;
&lt;p&gt;基礎として理解しておきたい部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プラグイン機構&lt;/li&gt;
&lt;li&gt;プラグインでできることと設定でできることの境目&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;求めること&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vimキーバインド&lt;/li&gt;
&lt;li&gt;File Tree(トグル、ファイルオープン)&lt;/li&gt;
&lt;li&gt;Gitプラグイン(コマンドラインのインターフェースがあると良さそう)&lt;/li&gt;
&lt;li&gt;コードハイライト&lt;/li&gt;
&lt;li&gt;入力補間&lt;/li&gt;
&lt;li&gt;画面分割&lt;/li&gt;
&lt;li&gt;コマンドラインインターフェース(makeなどそのまま叩く)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかし大事なのは余り複雑にしないことかもしれない。&lt;/p&gt;
&lt;p&gt;(後述しますがIntegrated Terminalを使うことでgitコマンドやmakeなど普段Terminalで実行しているコマンドは全て実行することができます)&lt;/p&gt;
&lt;h1 id="_2"&gt;基本設定&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ユーザー設定でフォントを14pxに設定&lt;/li&gt;
&lt;li&gt;配色テーマをMonokai Dimmedに設定&lt;/li&gt;
&lt;li&gt;File Icon ThemeをSetiに設定&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_3"&gt;プラグイン機構/設定&lt;/h1&gt;
&lt;p&gt;サイドバーの一番下のアイコンが拡張機能になっていて、ここからプラグインを追加できます。&lt;/p&gt;
&lt;p&gt;設定は、メニューからユーザー設定を開くとjsonの設定ファイルが開きここで色々設定できます、見たところプラグインに関する設定もここに追加していくことになりそうです(今のところまだ込み入った設定はしていません)&lt;/p&gt;
&lt;p&gt;キーボードショートカットもメニューから設定できて独自のキー設定ができます(これもjson)&lt;/p&gt;
&lt;h1 id="vim"&gt;Vimプラグイン&lt;/h1&gt;
&lt;p&gt;公式のVimプラグインを使います。拡張機能でVimで検索して一番上に出てくるものです。&lt;/p&gt;
&lt;p&gt;基本的なtext object操作と、:wで保存、:qで閉じる、:%s...で置換、/で検索、Ctrl+w+h/j/k/lでウィンドウ間移動、tnでタブ間移動など割りと動くなぁという感じです。&lt;/p&gt;
&lt;h1 id="integrated-terminal"&gt;Integrated Terminalが最高&lt;/h1&gt;
&lt;p&gt;Termialがエミュレートされます。$SHELLを使っていてプロファイルも全て読み込まれています。なんとtmuxも動きます。&lt;/p&gt;
&lt;p&gt;なんとtmuxも動きます。&lt;/p&gt;
&lt;p&gt;大事なことなので二回言いました。&lt;/p&gt;
&lt;p&gt;ビルドや開発サーバなどの起動、git操作などをここでできるのでもともとTerminalユーザの人には大変便利。&lt;/p&gt;
&lt;p&gt;ショートカットキーでトグルすると便利なのでキーボードショートカットに設定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
    &amp;quot;key&amp;quot;: &amp;quot;shift+h&amp;quot;,
    &amp;quot;command&amp;quot;: &amp;quot;workbench.action.terminal.toggleTerminal&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_4"&gt;キーボードショートカット&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://code.visualstudio.com/docs/customization/keybindings" title="Visual Studio Code Key Bindings"&gt;Visual Studio Code Key Bindings&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ドキュメントに詳しくまとまっているので必要なところを変更します。&lt;/p&gt;
&lt;p&gt;自分の場合(できるだけ普段のVimに寄せていってます)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[
{
    &amp;quot;key&amp;quot;: &amp;quot;shift+h&amp;quot;,
    &amp;quot;command&amp;quot;: &amp;quot;workbench.action.terminal.toggleTerminal&amp;quot;
},
{ &amp;quot;key&amp;quot;: &amp;quot;ctrl+e&amp;quot;,        &amp;quot;command&amp;quot;: &amp;quot;workbench.action.toggleSidebarVisibility&amp;quot; },
{ &amp;quot;key&amp;quot;: &amp;quot;ctrl+l&amp;quot;,       &amp;quot;command&amp;quot;: &amp;quot;workbench.action.focusNextGroup&amp;quot; },
{ &amp;quot;key&amp;quot;: &amp;quot;ctrl+h&amp;quot;,       &amp;quot;command&amp;quot;: &amp;quot;workbench.action.focusPreviousGroup&amp;quot; }
]
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_5"&gt;完成&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/ae0949b4791e3021372c909fbdb5059a.png" /&gt;&lt;/p&gt;
&lt;p&gt;Integrated Terminalでwebpackのプロセスとかを上げたままにできて便利！&lt;/p&gt;
&lt;p&gt;tmuxも使えるので他の開発サーバも普段と同じ感覚立ち上げられます。&lt;/p&gt;
&lt;p&gt;補完もデフォルトで効くので便利です。&lt;/p&gt;
&lt;p&gt;画面分割の際などTerminal+Vimのときよりマウス操作が多くなってしまうのはしょうがないですがまずまず使えそうです(ショートカットキーがあるはずですが覚えるのにも時間かかりそうです)。&lt;/p&gt;
&lt;p&gt;少ない設定で十分使えて、拡張もプラグインで簡単にできるのがVSCodeの良い所だと感じました。&lt;/p&gt;
&lt;p&gt;特に設定が少なくて済むのは引き継ぎなどの際に非常に有効だと思われる(Vimの設定は自分に特化されすぎている+肥大化していて他人にすすめるにもハードルが高い)ので個人的にはそこが一番良さだなぁと思っています。&lt;/p&gt;</summary><category term="VSCode"></category></entry><entry><title>RustでGtk+ 3.x</title><link href="https://muunyblue.github.io/b84a25d15d9d44f58640a485c1387df8.html" rel="alternate"></link><published>2016-09-13T02:03:08+09:00</published><updated>2016-09-13T02:03:08+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-09-13:b84a25d15d9d44f58640a485c1387df8.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/gtk-rs/gtk" title="gtk-rs/gtk: GTK+ 3.x bindings and wrappers for Rust"&gt;gtk-rs/gtk: GTK+ 3.x bindings and wrappers for Rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;gtk-rs/gtkを使ってみます。&lt;/p&gt;
&lt;p&gt;開発を始める前にビルドするためにGtkのツールキットが必要なのでインストールします。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gtk-rs.org/docs/requirements.html" title="Gtk-rs"&gt;Requirements - Gtk-rs&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install gtk+3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(LinuxやWindowsでも動作するみたいです)&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/gtk-rs/examples"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;を参考に簡単な例を作ってみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo new hello --bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cargo.tomlをexamplesのようにします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[dependencies]&lt;/span&gt;
&lt;span class="na"&gt;glib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^0&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;gdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^0&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;gdk-pixbuf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^0&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;gtk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^0&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;cairo-rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;^0&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[features]&lt;/span&gt;
&lt;span class="c1"&gt;#default = [&amp;quot;gtk_3_18&amp;quot;]&lt;/span&gt;
&lt;span class="na"&gt;gtk_3_10&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;[&amp;quot;gtk/v3_10&amp;quot;]&lt;/span&gt;
&lt;span class="na"&gt;gtk_3_16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;[&amp;quot;gtk_3_10&amp;quot;, &amp;quot;gtk/v3_16&amp;quot;]&lt;/span&gt;
&lt;span class="na"&gt;gtk_3_18&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;[&amp;quot;gtk_3_16&amp;quot;] #for CI tools&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;src/main.rsをexamplesのbasicと同じ内容で書きます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;::&lt;span class="n"&gt;prelude&lt;/span&gt;::&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;::&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;is_err&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to initialize GTK.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;::&lt;span class="n"&gt;Window&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;::&lt;span class="n"&gt;WindowType&lt;/span&gt;::&lt;span class="n"&gt;Toplevel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;First GTK+ Program&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_border_width&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;::&lt;span class="n"&gt;WindowPosition&lt;/span&gt;::&lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_default_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect_delete_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;::&lt;span class="n"&gt;main_quit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Inhibit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;::&lt;span class="n"&gt;Button&lt;/span&gt;::&lt;span class="n"&gt;new_with_label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Click me!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_all&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;::&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo build
$ cargo run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/75e8ed5c95b04a02ce3c6cdd8099f61a.png" /&gt;&lt;/p&gt;
&lt;p&gt;あっさり動きました。&lt;/p&gt;
&lt;p&gt;どこまで実装されているのかわかりませんが、触っていってみようかと思っています。&lt;/p&gt;</summary><category term="Rust"></category><category term="Gtk+"></category></entry><entry><title>Xubuntu 16.04 日本語入力(fcitx-mozc)</title><link href="https://muunyblue.github.io/3faf3b08de6c7c130e63c0e38e5553a8.html" rel="alternate"></link><published>2016-09-13T00:42:18+09:00</published><updated>2016-09-13T00:42:18+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-09-13:3faf3b08de6c7c130e63c0e38e5553a8.html</id><summary type="html">&lt;p&gt;"Settings &amp;gt; Language Supprt"を開きます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/546b65fd866a3a377279be2f577883e1.png" /&gt;&lt;/p&gt;
&lt;p&gt;"Install / Remove Languages"でJapaneseを選択します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/1b1a31e8bf5c62c3eabce3e73741b8c5.png" /&gt;&lt;/p&gt;
&lt;p&gt;Applyすると、デフォルトでfcitxとfcitx-mozcがインストールされます。&lt;/p&gt;
&lt;p&gt;"Keyborad input method system"でfcitxが選択できるようになるので選択します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/a358bf1b66a446f706b41694da176d07.png" /&gt;&lt;/p&gt;
&lt;p&gt;再起動するとfctixのKeyboardアイコンがPanelに表示されます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/5e4ce1f76369a3dd1614ea0dba4b6ba9.png" /&gt;&lt;/p&gt;
&lt;p&gt;アイコンをクリックして"Configure"を選択します。("Configure Current Input Method"は現在の設定なので再起度後反映されないので注意)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/d3f4edfb4a17e5fc449daa500dc3d5cf.png" /&gt;&lt;/p&gt;
&lt;p&gt;はじめはEnglish(US)しかないので、Mozcを追加します。&lt;/p&gt;
&lt;p&gt;"+"ボタンをクリックして、"Only Show Current Message"のチェックを外してmozcを検索/追加してok。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/d37b037cca9efc34674b6069172777d5.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/97aa32361de150652febee51d3976b25.png" /&gt;&lt;/p&gt;
&lt;p&gt;Mozcが追加されていば完了です。&lt;/p&gt;
&lt;p&gt;デフォルトではCtrl+Spaceで切り替えができます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/ff596c6e0a32948b7e797bca15ab8d3f.png" /&gt;&lt;/p&gt;
&lt;p&gt;なんかはみ出していますがこれで日本語入力ができています。&lt;/p&gt;</summary><category term="Xubuntu"></category></entry><entry><title>Gentooのインストール : Retry Gentoo 2</title><link href="https://muunyblue.github.io/3bb39baf42957397d3fae8e0e66b6554.html" rel="alternate"></link><published>2016-09-05T07:28:49+09:00</published><updated>2016-09-05T07:28:49+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-09-05:3bb39baf42957397d3fae8e0e66b6554.html</id><summary type="html">&lt;p&gt;幾つかLinuxをインストールした経験がないとGentooのインストールは非常に難しいので、前提として多少の知識がある方がインストールをすると思います。&lt;/p&gt;
&lt;p&gt;ので、コマンドと変更したファイルの内容をずらずらと書いていきます。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;色気が...ない...&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;インストールメディアは前回作成したUSBメモリを使います。&lt;/p&gt;
&lt;p&gt;前回 =&amp;gt; &lt;a href="http://blog.muuny-blue.info/8a2d334536b2f4146af8cf46acd85110.html" title="下準備 &amp;amp; インストールUSB作成(Macで) : Retry Gentoo 1"&gt;下準備 &amp;amp; インストールUSB作成(Macで) : Retry Gentoo 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;※ Gentooのインストールは基本的にコマンド入力で行われるのでひたすらコマンド列挙です&lt;/p&gt;
&lt;p&gt;※ プロンプトの表記はインストールしたのときの実際の表示です&lt;/p&gt;
&lt;h1 id="0"&gt;0. ネットワーク確認&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;livecd ~ # ifconfig
livecd ~ # ping -c 3 www.gentoo.org
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pingが返ってくれば問題なし。&lt;/p&gt;
&lt;h1 id="1"&gt;1. ディスクの準備&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; # &lt;span class="nv"&gt;parted&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;optimal&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;sda&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;print&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;rm&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;rm&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;rm&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;rm&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;unit&lt;/span&gt; &lt;span class="nv"&gt;mib&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;mkpart&lt;/span&gt; &lt;span class="nv"&gt;primary&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;grub&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;set&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;bios_grub&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;mkpart&lt;/span&gt; &lt;span class="nv"&gt;primary&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;131&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;boot&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;mkpart&lt;/span&gt; &lt;span class="nv"&gt;primary&lt;/span&gt; &lt;span class="mi"&gt;131&lt;/span&gt; &lt;span class="mi"&gt;1155&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;swap&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;mkpart&lt;/span&gt; &lt;span class="nv"&gt;primary&lt;/span&gt; &lt;span class="mi"&gt;1155&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nv"&gt;rootfs&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;print&lt;/span&gt;
&lt;span class="nv"&gt;Model&lt;/span&gt;: &lt;span class="nv"&gt;Virtio&lt;/span&gt; &lt;span class="nv"&gt;Block&lt;/span&gt; &lt;span class="nv"&gt;Device&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;virtblk&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;Disk&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;sda&lt;/span&gt;: &lt;span class="mi"&gt;20480&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt;
&lt;span class="nv"&gt;Sector&lt;/span&gt; &lt;span class="nv"&gt;size&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;logical&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;physical&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;: &lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="nv"&gt;B&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="nv"&gt;B&lt;/span&gt;
&lt;span class="nv"&gt;Partition&lt;/span&gt; &lt;span class="nv"&gt;Table&lt;/span&gt;: &lt;span class="nv"&gt;gpt&lt;/span&gt;

&lt;span class="nv"&gt;Number&lt;/span&gt;   &lt;span class="nv"&gt;Start&lt;/span&gt;      &lt;span class="k"&gt;End&lt;/span&gt;       &lt;span class="nv"&gt;Size&lt;/span&gt;     &lt;span class="nv"&gt;File&lt;/span&gt; &lt;span class="nv"&gt;system&lt;/span&gt;  &lt;span class="nv"&gt;Name&lt;/span&gt;   &lt;span class="nv"&gt;Flags&lt;/span&gt;
 &lt;span class="mi"&gt;1&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt;.&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt;   &lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt;               &lt;span class="nv"&gt;grub&lt;/span&gt;   &lt;span class="nv"&gt;bios_grub&lt;/span&gt;
 &lt;span class="mi"&gt;2&lt;/span&gt;       &lt;span class="mi"&gt;3&lt;/span&gt;.&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt;    &lt;span class="mi"&gt;131&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt;    &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt;                &lt;span class="nv"&gt;boot&lt;/span&gt;
 &lt;span class="mi"&gt;3&lt;/span&gt;       &lt;span class="mi"&gt;131&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt;     &lt;span class="mi"&gt;1155&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt;   &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt;               &lt;span class="nv"&gt;swap&lt;/span&gt;
 &lt;span class="mi"&gt;4&lt;/span&gt;       &lt;span class="mi"&gt;1155&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt;    &lt;span class="mi"&gt;114472&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt; &lt;span class="mi"&gt;113317&lt;/span&gt;&lt;span class="nv"&gt;MiB&lt;/span&gt;             &lt;span class="nv"&gt;rootfs&lt;/span&gt;

&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;parted&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;quit&lt;/span&gt;
&lt;span class="nv"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; # &lt;span class="nv"&gt;mkfs&lt;/span&gt;.&lt;span class="nv"&gt;ext2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;sda2&lt;/span&gt;
&lt;span class="nv"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; # &lt;span class="nv"&gt;mkfs&lt;/span&gt;.&lt;span class="nv"&gt;ext4&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;sda4&lt;/span&gt;
&lt;span class="nv"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; # &lt;span class="nv"&gt;mkswap&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;sda3&lt;/span&gt;
&lt;span class="nv"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; # &lt;span class="nv"&gt;swapon&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;sda3&lt;/span&gt;
&lt;span class="nv"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; # &lt;span class="nv"&gt;mount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;sda4&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;gentoo&lt;/span&gt;
&lt;span class="nv"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; # &lt;span class="nv"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;gentoo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;
&lt;span class="nv"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; # &lt;span class="nv"&gt;mount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;sda2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;gentoo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;コマンドの結果はpartedのprintだけ記載しました。&lt;/p&gt;
&lt;h1 id="2-kernel"&gt;2. Kernelの設定/ビルド&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="c1"&gt;# cd /mnt/gentoo&lt;/span&gt;
&lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="n"&gt;gentoo&lt;/span&gt; &lt;span class="c1"&gt;# links https://www.gentoo.org/downloads/mirrors/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;linksコマンドでテキストブラウザが開きます。ここでstage3のtar.bz2をダウンロードします。目的のファイルを見つけたらdボタンでダウンロード、qでブラウザを終了します。&lt;/p&gt;
&lt;p&gt;stage3-i686-20160830.tar.bz2を近いミラーからダウンロードしました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;livecd gentoo # tar xvjpf stage3-i686-20160830.tar.bz2 --xattrs
livecd gentoo # nano -w /mnt/gentoo/etc/portage/make.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;/mnt/gentoo/etc/portage/make.confにはMAKEOPT="-j5"を追加しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="n"&gt;gentoo&lt;/span&gt; &lt;span class="c1"&gt;# cp -L /etc/resolv.conf /mnt/gentoo/etc/&lt;/span&gt;
&lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="n"&gt;gentoo&lt;/span&gt; &lt;span class="c1"&gt;# mount -t proc proc /mnt/gentoo/proc&lt;/span&gt;
&lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="n"&gt;gentoo&lt;/span&gt; &lt;span class="c1"&gt;# mount --rbind /sys /mnt/gentoo/sys&lt;/span&gt;
&lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="n"&gt;gentoo&lt;/span&gt; &lt;span class="c1"&gt;# mount --rbind /dev /mnt/gentoo/dev&lt;/span&gt;
&lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="n"&gt;gentoo&lt;/span&gt; &lt;span class="c1"&gt;# chroot /mnt/gentoo /bin/bash&lt;/span&gt;
&lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="c1"&gt;# source /etc/profile&lt;/span&gt;
&lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="c1"&gt;# export PS1=&amp;quot;(chroot) $PS1&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chroot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="c1"&gt;# emerge-webrsync&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chroot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="c1"&gt;# emerge --sync&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chroot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="c1"&gt;# eselect news read&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chroot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="c1"&gt;# eselect profile list&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chroot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="c1"&gt;# eselect profile set 3&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chroot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="c1"&gt;# emerge --ask --update --deep --newuse @world&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chroot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="c1"&gt;# nano -w /etc/portage/make.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;USEフラグの設定は以下のようにしました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;USE=&amp;quot;-a52 -bluetooth -cdda -cdr -dvd -dvdr -fortran wifi networkmanager&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;"emerge --info | grep ^USE"コマンドでUSEフラグを確認後、"/usr/portage/profiles/use.desc"ファイルでUSEの説明を見ながら調整しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(chroot) livecd / # echo &amp;quot;Asia/Tokyo&amp;quot; &amp;gt; /etc/timezone
(chroot) livecd / # emerge --config sys-libs/timezone-data
(chroot) livecd / # nano -w /etc/locale.gen
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;en_US UTF-8 UTF-8
ja_JP UTF-8 UTF-8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;の2つをコメントアウトしました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chroot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="c1"&gt;# locale-gen&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chroot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="c1"&gt;# eselect locale list&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chroot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="c1"&gt;# eselect locale set 3&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chroot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="c1"&gt;# env-update &amp;amp;&amp;amp; source /etc/profile &amp;amp;&amp;amp; export PS1=&amp;quot;(chroot) $PS1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;en_US UTF-8 UTF-8に設定しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(chroot) livecd / # emerge --ask sys-kernel/gentoo-sources
(chroot) livecd / # cd /usr/src/linux
(chroot) livecd linux # make menuconfig
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;マニュアルコンフィギュレーションでやってみました。&lt;/p&gt;
&lt;p&gt;64bitのチェックを外して、CPUにIntel ATOMを選択。ファイルシステムでext2を追加しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(chroot) livecd linux # make &amp;amp;&amp;amp; make modules_install
(chroot) livecd linux # make install
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(chroot) livecd linux # emerge --ask sys-kernel/linux-firmware
(chroot) livecd linux # nano -w /etc/fstab
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;BOOT =&amp;gt; sda2
ROOT =&amp;gt; sda4 (ext3をext4に)
SWAP =&amp;gt; sda3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ネットワークを設定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(chroot) livecd linux # nano -w /etc/conf.d/hostname
(chroot) livecd linux # emerge --ask --noreplace net-misc/netifrc
(chroot) livecd linux # nano -w /etc/conf.d/net
(chroot) livecd linux # cd /etc/init.d
(chroot) livecd init.d # ln -s net.lo net.enp4s0
(chroot) livecd init.d # rc-update add net.enp4s0 default
(chroot) livecd init.d # nano -w /etc/hosts
(chroot) livecd init.d # emerge --ask net-misc/dhcpcd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;NIC名などはハードによって異なると思いますので、則した名前で設定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(chroot) livecd init.d # passwd
(chroot) livecd init.d # emerge --ask app-admin/sysklogd
(chroot) livecd init.d # rc-update add sysklogd default
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="4-grub"&gt;4. grubのインストール、そして再起動&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(chroot) livecd init.d # emerge --ask sys-boot/grub:2
(chroot) livecd init.d # grub-install /dev/sda
(chroot) livecd init.d # grub-mkconfig -o /boot/grub/grub.cfg
Generating grub configuration file ...
Found linux image: /boot/vmlinuz-4.4.6-gentoo
done
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Found linux imageとなっていればokです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;chroot&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;livecd&lt;/span&gt; &lt;span class="nv"&gt;init&lt;/span&gt;.&lt;span class="nv"&gt;d&lt;/span&gt; # &lt;span class="k"&gt;exit&lt;/span&gt;
&lt;span class="nv"&gt;livecd&lt;/span&gt; &lt;span class="nv"&gt;gentoo&lt;/span&gt; # &lt;span class="nv"&gt;cd&lt;/span&gt;
&lt;span class="nv"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; # &lt;span class="nv"&gt;umount&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;l&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;gentoo&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;{&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;shm&lt;/span&gt;,&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;pts&lt;/span&gt;,}
&lt;span class="nv"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; # &lt;span class="nv"&gt;umount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;gentoo&lt;/span&gt;{&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;boot&lt;/span&gt;,&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;sys&lt;/span&gt;,&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;proc&lt;/span&gt;,}
&lt;span class="nv"&gt;livecd&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; # &lt;span class="nv"&gt;reboot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_1"&gt;最後に&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="https://pbs.twimg.com/media/CrkOSHkUEAE7EGl.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;インストールできました！&lt;/p&gt;
&lt;p&gt;しかし、起動時にエラーがｯ...!!?&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;enp4s0が認識されていないようです、ifconfig -aしてもloしか出てこないのでネットワーク周りのドライバがないのでは...感があります。&lt;/p&gt;
&lt;p&gt;マニュアルコンフィギュレーションに挑戦してみたのですが失敗していたようです。&lt;/p&gt;
&lt;p&gt;もう一度カーネルコンパイルしなおせばいけるかもしれないので次回はKernelの修正と復旧をしてみようと思います。&lt;/p&gt;
&lt;p&gt;しかしその他のエラーは見受けられなかったのでネットワークの問題が解決すればいけそうな気がするのを励みに頑張ります。&lt;/p&gt;</summary><category term="Gentoo"></category></entry><entry><title>下準備 &amp; インストールUSB作成(Macで) : Retry Gentoo 1</title><link href="https://muunyblue.github.io/8a2d334536b2f4146af8cf46acd85110.html" rel="alternate"></link><published>2016-09-02T03:49:19+09:00</published><updated>2016-09-02T03:49:19+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-09-02:8a2d334536b2f4146af8cf46acd85110.html</id><summary type="html">&lt;p&gt;3,4年前にgentooに挑戦して挫折しましたが、再び挑戦してみます。&lt;/p&gt;
&lt;h1 id="_1"&gt;下準備&lt;/h1&gt;
&lt;h2 id="_2"&gt;資料&lt;/h2&gt;
&lt;p&gt;公式のハンドブックが日本語訳もついていて良い感じなのでこれを読みながらインストールを進めていきます。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://wiki.gentoo.org/wiki/Handbook:Main_Page/ja" title="ハンドブック:メインページ - Gentoo Wiki"&gt;ハンドブック:メインページ - Gentoo Wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;以前やったときより格段にわかりやすい感あるぞ...&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;和訳はamd64が充実していますが、今回は後述しますがx86を選ぶことになるので、amd64のハンドブックを参考にしながらx86のインストールをしていきます。&lt;/p&gt;
&lt;h2 id="pc"&gt;PC&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.asus.com/jp/Notebooks/Eee_PC_X101CH/" title="Eee PC X101CH | ノートパソコン | ASUS 日本"&gt;ASUS Eee PC X101CH&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;Proc&lt;/span&gt;&lt;span class="nb"&gt;es&lt;/span&gt;&lt;span class="nv"&gt;sor&lt;/span&gt; &lt;span class="nv"&gt;Intel&lt;/span&gt;&lt;span class="err"&gt;®&lt;/span&gt; &lt;span class="nv"&gt;Atom&lt;/span&gt;&lt;span class="err"&gt;™&lt;/span&gt; &lt;span class="nv"&gt;Processor&lt;/span&gt; &lt;span class="nv"&gt;N2600&lt;/span&gt; &lt;span class="nv"&gt;@&lt;/span&gt; &lt;span class="mf"&gt;1.60&lt;/span&gt;&lt;span class="nv"&gt;GHz&lt;/span&gt; &lt;span class="err"&gt;×&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="nf"&gt;Memory&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nv"&gt;GB&lt;/span&gt;
&lt;span class="nf"&gt;Disk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;SS&lt;/span&gt;&lt;span class="nv"&gt;D&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="nv"&gt;GB&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://ark.intel.com/products/58916/Intel-Atom-Processor-N2600-%281M-Cache-1_6-GHz%29" title="Intel® Atom™ Processor N2600 (1M Cache, 1.6 GHz) Specifications"&gt;Intel® Atom™ Processor N2600 (1M Cache, 1.6 GHz) Specifications&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;amd64アーキテクチャで構成したいのでintel® 64がサポートされていていけるかと思いましたが、BIOSの設定を見ると有効になっておらず設定を変えることができなかったのでx86を選択します。&lt;/p&gt;
&lt;p&gt;(念のため試してみたamd64のインストールUSBもbootできなかった...)&lt;/p&gt;
&lt;h1 id="macusb"&gt;MacでインストールUSB作成&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.gentoo.org/downloads/" title="Downloads – Gentoo Linux"&gt;Downloads – Gentoo Linux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;x86のMinimal Installation CDを選んでダウンロードします。&lt;/p&gt;
&lt;p&gt;USBをさしてデバイス名を確認します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% diskutil list&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;/dev/disk1だと確認できたのでここに書き込みます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% sudo dd if=install-x86-minimal-20160830.iso of=/dev/rdisk1 bs=1m&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;263&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mi"&gt;263&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;275775488&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;bytes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;transferred&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;57.257382&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;secs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;(4816418&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;bytes/sec)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forums.gentoo.org/viewtopic-t-928812-start-0.html" title="Gentoo Forums :: View topic - Create USB boot disk in OSX"&gt;Gentoo Forums :: View topic - Create USB boot disk in OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kanonji.info/blog/2013/11/29/dd%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7sd%E3%82%AB%E3%83%BC%E3%83%89%E3%81%AE%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%B3%E3%82%92%E4%BD%9C%E3%82%8B/" title="ddコマンドでSDカードのクローンを作る | kanonjiのブログ"&gt;ddコマンドでSDカードのクローンを作る | kanonjiのブログ&lt;/a&gt; &amp;lt;= 書き込みのときのデバイス指定にrをつける理由が書いてありました&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="usb"&gt;usb起動&lt;/h1&gt;
&lt;p&gt;F2を押したまま起動して、BootでUSBの起動順位をSSDより上にします。&lt;/p&gt;
&lt;p&gt;設定を保存して起動すると無事起動しました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Welcome Gentoo" src="https://pbs.twimg.com/media/CrO4NhPVUAAqJn-.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;次回からはインストールをやっていきます。&lt;/p&gt;</summary><category term="Gentoo"></category></entry><entry><title>GitLab CIならWindowsでのCIも簡単</title><link href="https://muunyblue.github.io/2d5b53f80151aea5fef0722f8b1edf99.html" rel="alternate"></link><published>2016-08-16T05:20:26+09:00</published><updated>2016-08-16T05:20:26+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-08-16:2d5b53f80151aea5fef0722f8b1edf99.html</id><summary type="html">&lt;p&gt;WindowsでビルドやテストをするようなCIがGitLab CIで簡単に構成できるので紹介します。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://blog.muuny-blue.info/015389e74278202135dd6ed947ed32da.html" title="簡単にわかるGitLab CIの仕組み"&gt;簡単にわかるGitLab CIの仕組み&lt;/a&gt;で書いたように&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitLab RunnerはGitLab本体とは分離して別マシンや別コンテナに配置して、GitLabとGitLab Runner間はAPIで通信する仕組みになっています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ということなので、ビルド環境のある物理WindowsマシンにGitLab Runnerを設置することでWindows版CI用Runnerを構築できます。&lt;/p&gt;
&lt;h1 id="install"&gt;Install&lt;/h1&gt;
&lt;p&gt;GitLab RunnerはGolangで書かれておりシングルバイナリとして配布されており、インストールはバイナリを配置するだけokです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x86: https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-ci-multi-runner-windows-386.exe&lt;/li&gt;
&lt;li&gt;amd64: https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-ci-multi-runner-windows-amd64.exe&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用しているWindowsに応じてダウンロードします。&lt;/p&gt;
&lt;p&gt;配置する場所に制限はないので好きな場所に配置します。&lt;/p&gt;
&lt;p&gt;この記事ではC:\GitLab-Runnerにamd64のバイナリを配置したとして進めていきます。&lt;/p&gt;
&lt;h1 id="setup"&gt;Setup&lt;/h1&gt;
&lt;p&gt;まず登録する際に入力する情報をGitLabで確認します。&lt;/p&gt;
&lt;p&gt;「CIをするプロジェクトページ &amp;gt; Settings &amp;gt; Runners」を開くと"URL"と"token"が書いてあります。&lt;/p&gt;
&lt;p&gt;&lt;img alt="URL &amp;amp; token" src="https://i.gyazo.com/efbc85635d23089c924ee36c8a071f1f.png" /&gt;&lt;/p&gt;
&lt;p&gt;管理者権限でコマンドプロンプトを開き、先ほどバイナリを配置したフォルダに移動して登録していきます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;Gitlab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Runner&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gitlab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;multi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;windows&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;amd64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="n"&gt;register&lt;/span&gt;
&lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;enter&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;gitlab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt; &lt;span class="n"&gt;coordinator&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;gitlab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="err"&gt;確認した&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;enter&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;gitlab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="err"&gt;確認した&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;enter&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;gitlab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PC名&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;Runnerの説明&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;enter&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;gitlab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ci&lt;/span&gt; &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comma&lt;/span&gt; &lt;span class="n"&gt;separated&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;任意&lt;/span&gt;&lt;span class="p"&gt;)}}&lt;/span&gt;
&lt;span class="n"&gt;Registering&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;succeeded&lt;/span&gt;                     &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;XXXXXX&lt;/span&gt;
&lt;span class="n"&gt;Please&lt;/span&gt; &lt;span class="n"&gt;enter&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;virtualbox&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parallels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="n"&gt;Runner&lt;/span&gt; &lt;span class="n"&gt;registered&lt;/span&gt; &lt;span class="n"&gt;successfully&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Feel&lt;/span&gt; &lt;span class="n"&gt;free&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s running already the config should be automatically reloaded!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;executerにはshellを選択してコマンドプロンプトでビルドするように指定しました。&lt;/p&gt;
&lt;p&gt;次にユーザー名とパスワードを設定します。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hr-sano.net/blog/2016/01/25/gitlab-ci-runner-for-windows/" title="まったりlog残し"&gt;この方のブログ記事&lt;/a&gt;にも書いてありますが、現状ユーザー名を指定するとうまく行きません。&lt;/p&gt;
&lt;p&gt;パスワードの指定だけすると現在ログインしているユーザを自動で認識して設定するようなのでパスワードだけ指定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; gitlab-ci-multi-runner-windows-amd64.exe install --password ENTER-YOUR-PASSWORD
&amp;gt; gitlab-ci-multi-runner-windows-amd64.exe start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;パスワードが正しく設定されていればstartできます。&lt;/p&gt;
&lt;p&gt;startに成功していればGitLabのSettings&amp;gt;Runnersに登録したRunnerが表示されているはずです。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Windowsにgitがインストールされていないとビルド時にgitがないのが原因で失敗してしまいます。&lt;br /&gt;
gitがインストールされていない場合は以下の記事を参考にgitをインストールすると良いです。&lt;br /&gt;
&lt;a href="http://qiita.com/taipon_rock/items/632c117220e57d555099" title="コマンドラインからGitを使う（for Windows） - Qiita"&gt;コマンドラインからGitを使う（for Windows） - Qiita&lt;/a&gt;&lt;br /&gt;
gitをインストールしたあとはRunnerをrestartさせる必要があります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gitlab-ci-multi-runner-windows-amd64.exe restart&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;あとは.gitlab-ci.ymlを書いてpushすればCIが走ります。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Build" src="https://i.gyazo.com/d7c8978ac9d42c284c863ee814384c1a.png" /&gt;&lt;/p&gt;
&lt;p&gt;実際に動かした様子です。&lt;/p&gt;
&lt;p&gt;.gitlab-ci.ymlのtagsを使えば複数環境でCIさせることが可能です、マルチプラットフォームでのCIが必要な場面に便利。&lt;/p&gt;
&lt;p&gt;scriptでバッチファイルを起動するようにすれば手の込んだビルドもできそうなので今後試していく予定です。&lt;/p&gt;
&lt;h1 id="_1"&gt;参考記事&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/install/windows.md" title="docs/install/windows.md · master · GitLab.org / gitlab-ci-multi-runner · GitLab"&gt;docs/install/windows.md · master · GitLab.org / gitlab-ci-multi-runner · GitLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hr-sano.net/blog/2016/01/25/gitlab-ci-runner-for-windows/" title="まったりlog残し"&gt;まったりlog残し&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="GitLab"></category><category term="CI"></category><category term="Windows"></category></entry><entry><title>MacでVagrant上のVMを自動起動する方法</title><link href="https://muunyblue.github.io/691f73fdf1c5edeb3f600c515715a358.html" rel="alternate"></link><published>2016-08-10T02:36:19+09:00</published><updated>2016-08-10T02:36:19+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-08-10:691f73fdf1c5edeb3f600c515715a358.html</id><summary type="html">&lt;p&gt;VM上にある開発サーバとかを自動起動したいのでやってみました。&lt;/p&gt;
&lt;p&gt;~/Library/LaunchAgentsに好きな名前のplistファイルを作成します(ここではvagrant.startup.plist)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;plist&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;EnvironmentVariables&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PATH&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Label&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;vagrant.startup&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProgramArguments&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;sh&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;[Shell script名]&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RunAtLoad&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StandardErrorPath&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/tmp/vagrant.startup.agent.stderr&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StandardOutPath&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/tmp/vagrant.startup.agent.stdout&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;UserName&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;[ユーザー名]&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;WorkingDirectory&lt;span class="nt"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;[Shell scriptを配置したディレクトリ]&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Shell script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;VMのディレクトリ&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; vagrant up
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;VMのディレクトリ&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; vagrant up
&lt;span class="c1"&gt;# 必要な数だけ起動&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ポイントは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PATHを明示的に指定&lt;/li&gt;
&lt;li&gt;Shell Scriptを叩いてvagrantのVMを起動&lt;/li&gt;
&lt;li&gt;ユーザーを指定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;StandardErrorPathとStandardOutPathはデバック時に役に立ちますがなくても良いです。&lt;/p&gt;
&lt;p&gt;Macを再起動すれば自動的にplistが読み込まれますので、VMが起動していればokです。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;気になるのは、VM起動したまま再起動すると起動時にVMが中断の状態になってしまうことです。&lt;/p&gt;
&lt;p&gt;shutdown時にVMを安全にshutdownさせたいので調べてみると&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/24200924/run-a-script-only-at-shutdown-not-log-off-or-restart-on-mac-os-x" title="osx - Run a script only at shutdown (not log off or restart) on Mac OS X - Stack Overflow"&gt;osx - Run a script only at shutdown (not log off or restart) on Mac OS X - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/freedev/macosx-script-boot-shutdown/blob/master/boot-shutdown-script.plist" title="macosx-script-boot-shutdown/boot-shutdown-script.plist at master · freedev/macosx-script-boot-shutdown"&gt;macosx-script-boot-shutdown/boot-shutdown-script.plist at master · freedev/macosx-script-boot-shutdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;など幾つか情報がでてきますが、今のところうまくいっていません。&lt;/p&gt;
&lt;p&gt;とりあえず、中断状態からでも正常に起動してるみたいなのでこれでいいかという感じです。&lt;/p&gt;</summary><category term="Vagrant"></category></entry><entry><title>簡単にわかるGitLab CIの仕組み</title><link href="https://muunyblue.github.io/015389e74278202135dd6ed947ed32da.html" rel="alternate"></link><published>2016-10-28T09:01:28+09:00</published><updated>2016-10-28T09:01:28+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-08-09:015389e74278202135dd6ed947ed32da.html</id><summary type="html">&lt;p&gt;&lt;a href="http://docs.gitlab.com/ce/ci/quick_start/README.html" title="GitLab Documentation"&gt;GitLab CIのquick start&lt;/a&gt;を読んでもしっくり来なかった人向けにGitLab CIの仕組みをまとめました。&lt;/p&gt;
&lt;p&gt;特に「Runnerって何?」ってなった人向けです。&lt;/p&gt;
&lt;p&gt;(※GitLab CIの導入方法や使い方については触れていません)&lt;/p&gt;
&lt;h1 id="gitlab-ci"&gt;GitLab CIの仕組み&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://about.gitlab.com/gitlab-ci/#gitlab-runner" title="GitLab Continuous Integration | GitLab"&gt;GitLab Continuous Integration | GitLab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上のページのArchitectureの図がとてもわかり易いです。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://about.gitlab.com/images/ci/arch-1.jpg" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitLab CI is a part of GitLab, a web application with an API that stores its state in a database. It manages projects/builds and provides a nice user interface, besides all the features of GitLab.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GitLab CIはGitLabの中の一つの機能でありWebアプリケーションとして動いていてprojectsとbuildsを管理するための良い感じのインターフェースを提供しています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitLab Runner is an application which processes builds. It can be deployed separately and works with GitLab CI through an API.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GitLab Runnerはビルドのための一つのアプリケーションで、別々の場所で動かすことができ、APIを通してGitLab CIと連携できます。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;図を見て分かるように、GitLab RunnerはGitLab本体とは分離して別マシンや別コンテナに配置して、GitLabとGitLab Runner間はAPIで通信する仕組みになっています。&lt;/p&gt;
&lt;p&gt;とてもシンプル。&lt;/p&gt;
&lt;h1 id="gitlab-runner"&gt;GitLab Runnerの詳細&lt;/h1&gt;
&lt;p&gt;GitLab RunnerについてはリポジトリのREADMEがわかりやすいです。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner" title="GitLab.org / gitlab-ci-multi-runner · GitLab"&gt;GitLab.org / gitlab-ci-multi-runner · GitLab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;簡単にまとめると&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;並列実行や分散実行ができる&lt;/li&gt;
&lt;li&gt;ビルドはshellやDocker(over sshとコンテナ分散も可能)、sshが使える&lt;/li&gt;
&lt;li&gt;Goで書かれたシングルバイナリ&lt;/li&gt;
&lt;li&gt;Ubuntu, Debian, OS X, Windows対応&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windowsにも対応してるのにびっくりしました。心配になりがちな、&lt;a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/install/windows.md" title="docs/install/windows.md · master · GitLab.org / gitlab-ci-multi-runner · GitLab"&gt;Windowsへのインストール方法&lt;/a&gt;も配置はGoのシングルバイナリをダウンロードして配置するだけで良いので簡単です。Goで書かれてる強みを感じました。&lt;/p&gt;
&lt;p&gt;OSXに関してもバイナリをcurlでダウンロードして配置、Linuxに関してはリポジトリと追加してパッケージマネージャでインストールできます。&lt;/p&gt;
&lt;p&gt;Dockerの場合はgitlab/gitlab-runnerというイメージが配布されているのでそちらをインストールして利用できます、基本的にUbuntu14.04のようですが、Aplineも使えるようです(gitlab/gitlab-runner:alpine)&lt;/p&gt;
&lt;p&gt;GitLab Runnerという名前についてですが、プロジェクトの名前はGitLab CI Multi Runnerで、GitLab CI Runnerと呼ばれていることが多いですが、今は"GitLab Runner"と呼んで欲しいみたいです。&lt;/p&gt;
&lt;h1 id="_1"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;ArchitectureもシンプルでGitLab CI良いなぁとなりました。&lt;/p&gt;
&lt;p&gt;Runnerについてのさらに詳しいことやわからないことは、&lt;a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner" title="GitLab.org / gitlab-ci-multi-runner · GitLab"&gt;GitLab Runnerの公式リポジトリ&lt;/a&gt;を見てみると良いと思います。&lt;/p&gt;
&lt;p&gt;個人的にはWindowsでのCIに悩んでいたので、Jenkinsに手を出さないでGitLab CIだけで全て収まりそうなのでテンション上がっています。&lt;/p&gt;</summary><category term="GitLab"></category><category term="CI"></category></entry><entry><title>CentOSにCppcheckをRPMでインストールする方法</title><link href="https://muunyblue.github.io/6e71d53b8718fd5c285f6a1e12622bdd.html" rel="alternate"></link><published>2016-07-28T03:37:05+09:00</published><updated>2016-07-28T03:37:05+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-07-28:6e71d53b8718fd5c285f6a1e12622bdd.html</id><summary type="html">&lt;p&gt;Cppcheckはとても優れたツールですが、Windowsで使用する場合はSetupがありますが、Linuxで使用する場合は手動でのインストールになります。&lt;/p&gt;
&lt;p&gt;ソースコードをダウンロードしてビルドすれば良いのですが、ビルドするツールをインストールできない場合などビルド困難な場合がありますので、RPMパッケージをインストールする方法を紹介します。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;1つ注意なのは、RPMパッケージでインストールするため必ずしも最新版のCppcheckを使えるわけではありません、新しいCppcheckがどうしても使いたい場合はソースコードからビルドしましょう。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;紹介する方法はCentOS6を対象にしますが、別バージョンのCentOSに関しても目的のバージョンに置き換えればインストール可能だと思います。&lt;/p&gt;
&lt;h1 id="how-to-install"&gt;How to Install&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pkgs.org/download/cppcheck" title="cppcheck Download (DEB, RPM, TXZ)"&gt;cppcheck Download (DEB, RPM, TXZ)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上記のリンクから目的のCppcheckのRPMパッケージを探します。&lt;/p&gt;
&lt;p&gt;CentOS6のx86_64のCppcheckを選択するとパッケージの詳細ページに行きます、下の方にDownloadという項目があります。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/576a77cae5ff94458f59477416cadfda.png" /&gt;&lt;/p&gt;
&lt;p&gt;DownloadアイコンをクリックするとRPMパッケージへのリンクがあるページに行きますので、"Binary package"のリンクをコピーして、CppcheckをインストールするCentOS上でwgetします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget http://dl.fedoraproject.org/pub/epel/6/x86_64/cppcheck-1.63-2.el6.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;あとはrpmコマンドでインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo npm -ivh cppcheck-1.63-2.el6.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;残念なことに自分の環境では以下のようなエラーが出ました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cppcheck&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.63&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;el6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rpm&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Header&lt;/span&gt; &lt;span class="n"&gt;V3&lt;/span&gt; &lt;span class="n"&gt;RSA&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;SHA256&lt;/span&gt; &lt;span class="n"&gt;Signature&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="mi"&gt;0608&lt;/span&gt;&lt;span class="n"&gt;b895&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NOKEY&lt;/span&gt;
&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Failed&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;libtinyxml2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;so&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;()(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;needed&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;cppcheck&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.63&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;el6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x86_64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;libtinyxml2がないみたいです。&lt;/p&gt;
&lt;p&gt;依存パッケージは最初に選択したパッケージのリンク先で確認できます。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pkgs.org/centos-6/epel-x86_64/cppcheck-1.63-2.el6.x86_64.rpm.html" title="cppcheck-1.63-2.el6.x86_64.rpm CentOS 6 Download"&gt;cppcheck-1.63-2.el6.x86_64.rpm CentOS 6 Download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;足りないパッケージは環境によって違うと思いますので適宜インストールします。今回のケースではlibtinyxml2が足りないので、Cppcheckと同じようにインストールしていきます。&lt;/p&gt;
&lt;p&gt;DownloadからRPMパッケージへのリンクをコピーしてインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget http://dl.fedoraproject.org/pub/epel/6/x86_64/tinyxml2-1.0.11-4.20130805git0323851.el6.x86_64.rpm
$ sudo rpm -ivh tinyxml2-1.0.11-4.20130805git0323851.el6.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでCppcheckをインストールする準備ができたので改めてインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo npm -ivh cppcheck-1.63-2.el6.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;エラーがでなければインストール完了です。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;新しいバージョンをビルドしてインストールしたいなどで、パッケージをアンインストールする際には以下のようにアンインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo npm -e cppcheck-1.63-2
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_1"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;RPMパッケージを直接インストールすることで、リポジトリの追加やビルドツールのインストールなどが省けるメリットがあります。デメリットはバージョンが固定なことです。&lt;/p&gt;
&lt;p&gt;状況に応じてインストール方法を選択していくことになると思いますが、RPMでのインストールは簡単だったので割りとおすすめです。&lt;/p&gt;</summary><category term="Cppcheck"></category></entry><entry><title>react-routerをCDNのみで使う</title><link href="https://muunyblue.github.io/b1f130b49d0fcfa2348098ee4467452f.html" rel="alternate"></link><published>2016-07-19T00:52:26+09:00</published><updated>2016-07-19T00:52:26+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-07-19:b1f130b49d0fcfa2348098ee4467452f.html</id><summary type="html">&lt;p&gt;この記事は、npm非依存でReactを使ったWebフロントエンド開発をしたい方向けです。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/reactjs/react-router" title="GitHub - reactjs/react-router: A complete routing library for React"&gt;GitHub - reactjs/react-router: A complete routing library for React&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;react-routerがCDNで使用できると聞いてやってみました。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://facebook.github.io/react/docs/tutorial.html" title="Tutorial | React"&gt;Reactのチュートリアル&lt;/a&gt;でもCDNのみを使用した例を使っているのでこれを雛形として、react-routerのCDNを追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;React Router CDN Sample&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/react/15.2.1/react.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/react/15.2.1/react-dom.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/react-router/2.5.2/ReactRouter.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/babel&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでreact-routerが使えます。&lt;/p&gt;
&lt;p&gt;CDNを使用した場合は、window.ReactRouterにライブラリが入っています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hashHistory&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReactRouter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;このように変数として宣言しておくと良いです。&lt;/p&gt;
&lt;p&gt;簡単なreact-routerの例です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// main.js&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;browserHistory&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReactRouter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/about&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Link&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/article&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Link&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Article&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hashHistory&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;about&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;article&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Route&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Router&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;index.htmlをブラウザで開くだけでreact-routerが動いているのを確認できます。&lt;/p&gt;
&lt;p&gt;個人的にこれはすごく便利で、npmのあれこれを気にしなくて良いのはメリットです。あとはブラウザでimportが動くようになれば、依存関係を気軽にファイル分けできて良さそうな気がします。&lt;/p&gt;
&lt;p&gt;historyにhashHistoryを使用していますが、サーバに乗せればbrowserHistoryも使えます。&lt;/p&gt;
&lt;h1 id="flask"&gt;Flaskと共に実装する場合&lt;/h1&gt;
&lt;p&gt;こういう場合は、react-routerで作成したルーティングテーブルにリロードでアクセスすると404エラーになってしまいます。&lt;/p&gt;
&lt;p&gt;redditやstackoverflowで議論されていて、解決策が提示されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/reactjs/comments/42pn95/reactrouter_and_flask_404/" title="React-router and Flask 404 : reactjs"&gt;React-router and Flask 404 : reactjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/30620276/flask-and-react-routing" title="python - Flask and React routing - Stack Overflow"&gt;python - Flask and React routing - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;lt;path:path&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;FlaskでCDNのreact-routerを使用した例です。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/yymm/flask-react-router"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;サーバサイドをNodejs以外で書くとなると、2つのパッケージマネージャを使うことになり管理が大変になるのでnpm非依存になるように工夫してみました。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Nodejs界隈がビルドツールに強く依存していたりしてモダンなWebフロントエンド開発を始める際のハードルが高くなっているような気がしています、CDNでさっと始めるメリットもあると思いますので気軽にはじめたい方におすすめです。&lt;/p&gt;</summary><category term="React"></category><category term="Flask"></category></entry><entry><title>Rustのturbofish</title><link href="https://muunyblue.github.io/6dfc35c47756e962ef055d1049f1f8ec.html" rel="alternate"></link><published>2016-07-05T05:00:46+09:00</published><updated>2016-07-05T05:00:46+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-07-05:6dfc35c47756e962ef055d1049f1f8ec.html</id><summary type="html">&lt;p&gt;リファレンスやドキュメントで時々出会う turbofish とは、"::&amp;lt;&amp;gt;"のこと&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/hermanradtke/status/628270459046379520"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;型を明記するのとturbofishの両方が使えるときってどっち使うと良いのかな?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;let&lt;/span&gt; &lt;span class="nt"&gt;v&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;let&lt;/span&gt; &lt;span class="nt"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;::&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Rust"></category></entry><entry><title>RustでFibonacci数列を書いて学ぶ</title><link href="https://muunyblue.github.io/115c51eb37365df2d4f4e2482b964822.html" rel="alternate"></link><published>2016-07-05T04:13:56+09:00</published><updated>2016-07-05T04:13:56+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-07-05:115c51eb37365df2d4f4e2482b964822.html</id><summary type="html">&lt;p&gt;&lt;a href="https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/" title="プログラミング言語Rust"&gt;プログラミング言語Rust&lt;/a&gt;を一通り読んだのでまずFibonacci数列書いてみたメモです。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Table Of Contents&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;準備&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;モジュール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;テスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;ベンチマークテスト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#fibonacci"&gt;Fibonacci数列&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;関数呼び出し1回&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;動的計画法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;配列を使って計算結果をメモ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;繰り返し二乗法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;一般項&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;速度比較&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;参考記事&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="_1"&gt;準備&lt;/h1&gt;
&lt;p&gt;Fibonacci以外にも色々やっていく予定なので、Rustの勉強用リポジトリを作ります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo new exercise --bin
$ &lt;span class="nb"&gt;cd&lt;/span&gt; exercise
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_2"&gt;モジュール&lt;/h2&gt;
&lt;p&gt;mainにﾄﾞﾊﾞﾄﾞﾊﾞ書いても良いのですがRustにはモジュールがあるので使ってみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; src
$ touch lib.rs
$ touch fibonacci.rs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;lib.rsにモジュールについての情報を書き込みます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="nn"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;fibonacci.rsを書いていきます。外部から呼ぶ関数にはpubをつけて宣言します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fib_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;main.rsから呼び出すときは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exercise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exercise&lt;/span&gt;::&lt;span class="n"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="fm"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fibonacci&lt;/span&gt;::&lt;span class="n"&gt;fib_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;のようにします。&lt;/p&gt;
&lt;h2 id="_3"&gt;テスト&lt;/h2&gt;
&lt;p&gt;fibonacci.rs内に続けてテストを書いていく方向でいきます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// pub fn fib_match() ... の下&lt;/span&gt;

&lt;span class="cp"&gt;#[cfg(test)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="nn"&gt;tests_fibonacci&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;super&lt;/span&gt;::&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[test]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;test_fib_match&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="fm"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo &lt;span class="nb"&gt;test&lt;/span&gt;
     Running target/debug/exercise-aedb186b5607382a

running &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="nb"&gt;test&lt;/span&gt; fibonacci::tests_fibonacci::test_fib_match ... ok

&lt;span class="nb"&gt;test&lt;/span&gt; result: ok. &lt;span class="m"&gt;1&lt;/span&gt; passed&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; failed&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; ignored&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; measured

     Running target/debug/exercise-d96eb056e1d4faff

running &lt;span class="m"&gt;0&lt;/span&gt; tests

&lt;span class="nb"&gt;test&lt;/span&gt; result: ok. &lt;span class="m"&gt;0&lt;/span&gt; passed&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; failed&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; ignored&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; measured

   Doc-tests exercise

running &lt;span class="m"&gt;0&lt;/span&gt; tests

&lt;span class="nb"&gt;test&lt;/span&gt; result: ok. &lt;span class="m"&gt;0&lt;/span&gt; passed&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; failed&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; ignored&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; measured
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_4"&gt;ベンチマークテスト&lt;/h2&gt;
&lt;p&gt;Fibonacci数列計算の時間を図りたさがあるのでベンチマークテストを使ってみます。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/benchmark-tests.html" title="ベンチマークテスト"&gt;ベンチマークテスト&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意して欲しいのはRust 1.9時点ではベンチマークテストはnightly buildでしか使えないということです。&lt;/p&gt;
&lt;p&gt;nightlyの入手方法は以下にあります。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/nightly-rust.html" title="Nightly Rust"&gt;Nightly Rust&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -s https://static.rust-lang.org/rustup.sh &lt;span class="p"&gt;|&lt;/span&gt; sh -s -- --channel&lt;span class="o"&gt;=&lt;/span&gt;nightly
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでベンチマークテストができます。&lt;/p&gt;
&lt;p&gt;テストはfibonacci.rsに書いていくことにしたのでベンチマークテストを追加します。その前に、testアトリビュートとtestクレートをlib.rsに追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#![feature(test)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;crate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="nn"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;fibonacci.rsにベンチマークテストを書きます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#[cfg(test)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="nn"&gt;tests_fibonacci&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;super&lt;/span&gt;::&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;::&lt;span class="n"&gt;Bencher&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[test]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;test_fib_match&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="fm"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[bench]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;bench_fib_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bencher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cargo bench
   Compiling exercise v0.1.0 &lt;span class="o"&gt;(&lt;/span&gt;file:///home/vagrant/works/exercise&lt;span class="o"&gt;)&lt;/span&gt;
     Running target/release/exercise-aedb186b5607382a

running &lt;span class="m"&gt;2&lt;/span&gt; tests
&lt;span class="nb"&gt;test&lt;/span&gt; fibonacci::tests_fibonacci::test_fib_match ... ignored
&lt;span class="nb"&gt;test&lt;/span&gt; fibonacci::tests_fibonacci::bench_fib_match ... bench:       &lt;span class="m"&gt;1&lt;/span&gt;,207 ns/iter &lt;span class="o"&gt;(&lt;/span&gt;+/- &lt;span class="m"&gt;768&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;test&lt;/span&gt; result: ok. &lt;span class="m"&gt;0&lt;/span&gt; passed&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; failed&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; ignored&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; measured

     Running target/release/exercise-d96eb056e1d4faff

running &lt;span class="m"&gt;0&lt;/span&gt; tests

&lt;span class="nb"&gt;test&lt;/span&gt; result: ok. &lt;span class="m"&gt;0&lt;/span&gt; passed&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; failed&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; ignored&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; measured
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これは便利。&lt;/p&gt;
&lt;h1 id="fibonacci"&gt;Fibonacci数列&lt;/h1&gt;
&lt;p&gt;パターンマッチを使った方法(O(2^n))はもう書いたのでそれ以外の方法でも書いてみます。&lt;/p&gt;
&lt;h2 id="1"&gt;関数呼び出し1回&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;O(n)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rustは関数内に関数を定義できます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fib_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;クロージャを使って再帰を書けたほう便利そうですが&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rust-lang/rust/issues/17911" title="rust-lang closures does not support recursive ,while python lambda expression does · Issue #17911 · rust-lang/rust"&gt;rust-lang closures does not support recursive ,while python lambda expression does · Issue #17911 · rust-lang/rust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;クロージャを使った再帰はできないみたいです。&lt;/p&gt;
&lt;h2 id="_5"&gt;動的計画法&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;O(n)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fib_dp_simple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_6"&gt;配列を使って計算結果をメモ&lt;/h2&gt;
&lt;p&gt;一度計算した結果を配列にメモする方法。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%B3%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88%E3%83%81%E3%83%A3%E3%83%AC%E3%83%B3%E3%82%B8%E3%83%96%E3%83%83%E3%82%AF-%E7%AC%AC2%E7%89%88-%EF%BD%9E%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E3%81%AE%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E6%B4%BB%E7%94%A8%E5%8A%9B%E3%81%A8%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%EF%BD%9E-%E7%A7%8B%E8%91%89%E6%8B%93%E5%93%89/dp/4839941068" title="プログラミングコンテストチャレンジブック [第2版]　～問題解決のアルゴリズム活用力とコーディングテクニックを鍛える～ : 秋葉拓哉, 岩田陽一, 北川宜稔 : 本 : Amazon"&gt;プログラミングコンテストチャレンジブック [第2版]&lt;/a&gt;にあるC++のコード&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAX_N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="mi"&gt;-2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これを素直に実装しようとすると、memoはstatic mut [i32; MAX_N]型の配列になると思うのですが、static mut型の値を変更するにはunsafeを使わざるを得ないのでアンチパターンな気がします。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/_sunnyone/status/748687110731812864"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;という意見をもらったので実装してみました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAX_N&lt;/span&gt;: &lt;span class="kt"&gt;usize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;FibMemo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;memo&lt;/span&gt;: &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAX_N&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FibMemo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="nc"&gt;Self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;FibMemo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;memo&lt;/span&gt;: &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAX_N&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;usize&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fib_memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FibMemo&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ベンチマークテストしてみるとあまり速度が出ておらず、もっと良い実装ありそうですが正解がわかってません。&lt;/p&gt;
&lt;h2 id="_7"&gt;繰り返し二乗法&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;O(log(n))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%B3%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88%E3%83%81%E3%83%A3%E3%83%AC%E3%83%B3%E3%82%B8%E3%83%96%E3%83%83%E3%82%AF-%E7%AC%AC2%E7%89%88-%EF%BD%9E%E5%95%8F%E9%A1%8C%E8%A7%A3%E6%B1%BA%E3%81%AE%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E6%B4%BB%E7%94%A8%E5%8A%9B%E3%81%A8%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF%E3%82%92%E9%8D%9B%E3%81%88%E3%82%8B%EF%BD%9E-%E7%A7%8B%E8%91%89%E6%8B%93%E5%93%89/dp/4839941068" title="プログラミングコンテストチャレンジブック [第2版]　～問題解決のアルゴリズム活用力とコーディングテクニックを鍛える～ : 秋葉拓哉, 岩田陽一, 北川宜稔 : 本 : Amazon"&gt;プログラミングコンテストチャレンジブック [第2版]&lt;/a&gt;にのってる方法です。&lt;/p&gt;
&lt;p&gt;フィボナッチ数列の行列表現を利用した手法です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f6c3a4e68394f24f47f52c9bd3ae9f5f1353f4cf" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;: &lt;span class="kp"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;: &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fib_repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// a[0] = A[0][0]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// a[1] = A[0][1]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// a[2] = A[1][0]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// a[3] = A[1][1]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;リファレンスやExampleを見るとビット演算やシフト演算もサポートされていました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://doc.rust-lang.org/std/ops/trait.BitAnd.html" title="std::ops::BitAnd - Rust"&gt;std::ops::BitAnd - Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doc.rust-lang.org/std/ops/trait.Shr.html" title="std::ops::Shr - Rust"&gt;std::ops::Shr - Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rustbyexample.com/primitives/literals.html" title="Literals and operators | Rust by Example"&gt;Literals and operators | Rust by Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上のコードでは二次元配列ではなく一次元配列で処理してます。&lt;/p&gt;
&lt;h2 id="_8"&gt;一般項&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;O(1)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="fibonacci" src="https://wikimedia.org/api/rest_v1/media/math/render/svg/eeaf8988188910d65eba337464ac93de077909f2" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;fib_formulas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;: &lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt; &lt;span class="kt"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="k"&gt;f64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="k"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="k"&gt;f64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;powi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="k"&gt;f64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="k"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="k"&gt;f64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;powi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="k"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;i32&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rustはf64などのプリミティブ型にimplで数値計算系のメソッドが定義されているので、こういった処理を直感的に書けて便利感を感じました。&lt;/p&gt;
&lt;h2 id="_9"&gt;速度比較&lt;/h2&gt;
&lt;p&gt;matchの方法は遅すぎるのでのせてません。1000番目の計算時間です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test fibonacci::bench_fib_one       ... bench:         317 ns/iter (+/- 55)
test fibonacci::bench_fib_dp_simple ... bench:         321 ns/iter (+/- 59)
test fibonacci::bench_fib_memo      ... bench:       8,525 ns/iter (+/- 1,039)
test fibonacci::bench_fib_repeat    ... bench:          24 ns/iter (+/- 5)
test fibonacci::bench_fib_formulas  ... bench:           0 ns/iter (+/- 0)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;関数呼び出し1回と動的計画法はO(n)で同程度の時間、メモを使用した方法は結構時間かかっています。繰り返し二乗法はO(log(n))なので速いです。&lt;/p&gt;
&lt;p&gt;一般項はO(1)なのでどんなnでも定数時間しかかからないので比較しても意味なさげです。&lt;/p&gt;
&lt;p&gt;こういうアルゴリズム別に計算時間の比較とかしたいときにベンチマークテスト便利!便利!ってなりました。&lt;/p&gt;
&lt;h1 id="_10"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;色々学びがありました。&lt;/p&gt;
&lt;p&gt;テスト関係が標準であるのはいいことですね。ベンチマークテストも簡単に使えて便利でした。&lt;/p&gt;
&lt;p&gt;Rustはコンパイラ先生がかなり厳しくつらいので、まだ慣れが必要感がすごいです。がんばるぞい。&lt;/p&gt;
&lt;p&gt;ソースコードは以下にあります。自分のやる気次第ですが他のこともやってみたい予定です。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/yymm/rust-exercise"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h1 id="_11"&gt;参考記事&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/crates-and-modules.html" title="クレートとモジュール"&gt;クレートとモジュール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/kondei/items/c75a2d920f79e5c9ee3d" title="Rustのテストのガイド - Qiita"&gt;Rustのテストのガイド - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rust-lang/rust.vim" title="rust-lang/rust.vim: Vim configuration for Rust."&gt;rust-lang/rust.vim: Vim configuration for Rust.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://yosuke-furukawa.hatenablog.com/entry/20120120/1327056359" title="動的計画法でフィボナッチ数列の計算を速くする。 - from scratch"&gt;動的計画法でフィボナッチ数列の計算を速くする。 - from scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.livedoor.jp/dankogai/archives/50958771.html" title="404 Blog Not Found:アルゴリズム百選 - フィボナッチ数列にO()を学ぶ"&gt;404 Blog Not Found:アルゴリズム百選 - フィボナッチ数列にO()を学ぶ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Rust"></category></entry><entry><title>Ergodoxの良さを語ってきた</title><link href="https://muunyblue.github.io/a2369958a9645eac52b58a8134e2ef5a.html" rel="alternate"></link><published>2016-06-08T01:42:37+09:00</published><updated>2016-06-08T01:42:37+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-06-02:a2369958a9645eac52b58a8134e2ef5a.html</id><summary type="html">&lt;p&gt;買って2ヶ月近く経ったのとErgodox使ってると最高感しかないので、社内勉強会でErgodoxの良さを語ってきました。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://speakerdeck.com/yymm/ergodoxfalseliang-sawoyu-ru"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;Ergodox購入検討者向けのスライドなので参考になれば嬉しいです。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;こちらは自分のErgodoxについての紹介です。&lt;/p&gt;
&lt;p&gt;実際に使ってみて改善してきた歴史やキーマップを紹介してます。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://speakerdeck.com/yymm/my-ergodox"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h1 id="_1"&gt;姿勢改善&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/052adce16c40448e7050cb66be7ab235.png" /&gt;&lt;/p&gt;
&lt;p&gt;ブコメでライザップ比較がほしいとあったので頑張って描きました(写真は恥ずかしいので...)。&lt;/p&gt;
&lt;p&gt;横から見た感じがもっと偉そうにエビ反ってるときもある気がしますが、大体絵に書いた通りの感じです。&lt;/p&gt;
&lt;p&gt;前かがみでタイピングすることは余りなくなりました。モニタとの距離も前より遠くなって目にも良さそうな感あります。&lt;/p&gt;
&lt;p&gt;肩こりもHHKB Lite2を使用していた時と比較すると改善してます！&lt;/p&gt;
&lt;p&gt;実は、Ergodox購入の目的はプログラマになってから悩んでいた肩こり改善がメインの目的だったので個人的に大満足しています。&lt;/p&gt;
&lt;h1 id="_2"&gt;キーマップ&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/eba9eaffa61b7b21b02fc4765895eaab.png" /&gt;&lt;/p&gt;
&lt;p&gt;特記事項を順不同箇条書きで紹介します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Layer2はほとんど使っていません&lt;/li&gt;
&lt;li&gt;十字キーのある位置(4キー分)は押しづらい位置にあるので左右でほどんど使っていません&lt;/li&gt;
&lt;li&gt;十字キーはLayer1のHJKLを使っていてVimを愛用しているため非常に楽です&lt;/li&gt;
&lt;li&gt;親指Enter/Backspaceは慣れるまで違和感がありましたが今は最高です&lt;/li&gt;
&lt;li&gt;Layer1を押しっぱなしにすることが多いので左親指の位置にしてます&lt;/li&gt;
&lt;li&gt;内側にしている左右括弧は最近慣れてきてます&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;massdropのサービスで設定しているのでコードベースに置き換えたい気持ちがあります。&lt;/p&gt;
&lt;p&gt;最後に最近の僕の魂の声です。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/y_y_m_m/status/737913963560730624"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;</summary><category term="Ergodox"></category></entry><entry><title>一般的な提督の2016年春イベ</title><link href="https://muunyblue.github.io/05d8cccb5f47e5072f0a05b5f514941a.html" rel="alternate"></link><published>2016-05-17T00:21:32+09:00</published><updated>2016-05-17T00:21:32+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-05-10:05d8cccb5f47e5072f0a05b5f514941a.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/c228602ccdd5ff9743ac200b8ba1851c.png" /&gt;&lt;/p&gt;
&lt;p&gt;※E-4攻略中&lt;/p&gt;
&lt;p&gt;一般的な提督は情報戦が勝負だと思うので入念に情報収集しながらやります。&lt;/p&gt;
&lt;p&gt;そしてすごい提督と違い戦力、装備、資材のリソースが限られています。この限られたリソースの中で如何に結果を最大化するか考えていきます。&lt;/p&gt;
&lt;h1 id="_1"&gt;札と出撃制限&lt;/h1&gt;
&lt;h2 id="_2"&gt;制限&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E-1, E-4 : 連合(高速?)
E-2, E-3 : 輸送(強い軽巡駆逐)
E-5 : 謎
E-6 : 機動艦隊(空母多め?)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_3"&gt;報酬から考える難易度選択&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E-1: 戦闘糧食x2、給糧艦「伊良湖」x2、大発動艇(八九式中戦車＆陸戦隊)
E-2: 補強増設x2、九六式陸攻x1、一式陸攻
E-3: 改修資材x6、勲章、Bofors 40mm四連装機関砲
E-4: 一式陸攻、三式戦 飛燕、熟練搭乗員
E-5: 三式戦 飛燕(飛行第244戦隊)、雷電、改修資材x7
E-6: 一式陸攻(野中隊)、改修資材x8
E-7: 熟練搭乗員、勲章x2、甲種勲章x1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E-4までは敵艦隊的にも甲でいけそう報酬も欲しい。&lt;/p&gt;
&lt;p&gt;E-5以降はヤバそうなので実際に突っ込んでみて考えたい。&lt;/p&gt;
&lt;h1 id="_4"&gt;編成考察&lt;/h1&gt;
&lt;h2 id="e-1-e-4"&gt;E-1, E-4&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E-1: 高速統一駆逐艦5(雷巡1)

戦艦、軽空、軽空、重巡、重巡、駆逐:対空
軽巡、駆逐、駆逐、駆逐、駆逐、雷巡

E-4: 水上高速統一戦艦1以下雷巡1

戦艦、軽空、軽空、重巡、重巡、重巡
軽巡、雷巡、駆逐、駆逐、駆逐、重巡
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;戦艦1, 軽空2, 重巡or航巡4, 軽巡1, 雷巡1, 駆逐5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;E-1: Zara(司令部施設), Italia, 千歳, 千代田, Roma, 初月&lt;/p&gt;
&lt;p&gt;E-1: 球磨, 時津風, 雪風, 島風, 天津風, 大井&lt;/p&gt;
&lt;p&gt;E-4: Zara(司令部施設), Italia, 千歳, 千代田, 摩耶, 熊野&lt;/p&gt;
&lt;p&gt;E-4: 球磨, 時津風, 雪風, 初月, 鈴谷, 大井&lt;/p&gt;
&lt;h1 id="e-2-e-3"&gt;E-2, E-3&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;E-2: ボスが陸上, 砲台

軽巡、駆逐、駆逐、駆逐、航巡、航巡

E-3: 輸送作戦, 駆逐艦8

航巡、水母、駆逐、駆逐、駆逐、駆逐
軽巡、駆逐、駆逐、駆逐、駆逐、航巡
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;航巡2, 駆逐8, 水母1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;E-2: 阿武隈, 潮, 初霜, 時雨, 最上, 瑞鳳&lt;/p&gt;
&lt;p&gt;E-3-1: 三隈、霞、皐月、朝潮、雷、電&lt;/p&gt;
&lt;p&gt;E-3-2: 阿武隈、江風、潮、初霜、時雨、最上&lt;/p&gt;
&lt;h1 id="e-5"&gt;E-5&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ボスが陸上, 高レベル駆逐艦

航巡、航巡、駆逐、駆逐、駆逐、駆逐:対空
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;利根, 筑摩, 夕立, 暁, 綾波, 秋月&lt;/p&gt;
&lt;h1 id="e-6"&gt;E-6&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ボスが陸上(艦爆、瑞雲が有効), 空母の数でルートが変わる

航戦、航戦、空母、空母、航巡or軽空、あきつ丸
軽巡、駆逐、駆逐:対空、雷巡、航巡、重巡
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1: 扶桑, 山城, Prinz, あきつ丸, 加賀, 翔鶴&lt;/p&gt;
&lt;p&gt;2: 大淀, ベールヌイ, 照月, 北上, 羽黒, 鳥海&lt;/p&gt;
&lt;h3 id="_5"&gt;編成参考リンク&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wikiwiki.jp/kancolle/?%B3%AB%C0%DF%A1%AA%B4%F0%C3%CF%B9%D2%B6%F5%C2%E2" title="開設！基地航空隊 - 艦隊これくしょん -艦これ- 攻略 Wiki*"&gt;開設！基地航空隊 - 艦隊これくしょん -艦これ- 攻略 Wiki*&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E-1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zekamashi.net/201605-event/e-1-zensen/" title="【春イベ】E-1　前線制海権を確保せよ！　攻略周回  ぜかましねっと艦これ！"&gt;【春イベ】E-1　前線制海権を確保せよ！　攻略周回  ぜかましねっと艦これ！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://akankorebiyori.blog.fc2.com/blog-entry-186.html" title="【艦これ】E-1．前線制海権を確保せよ！ 攻略/周回【2016春イベント】  あ艦これ日和　-　艦これ攻略情報,プレイ日記"&gt;【艦これ】E-1．前線制海権を確保せよ！ 攻略/周回【2016春イベント】  あ艦これ日和　-　艦これ攻略情報,プレイ日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E-4&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://zekamashi.net/201605-event/e-4-hassin/" title="【春イベ】E-4　発進！基地航空隊　攻略周回  ぜかましねっと艦これ！"&gt;【春イベ】E-4　発進！基地航空隊　攻略周回  ぜかましねっと艦これ！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E-2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kankoreshuukai.blog.jp/archives/E-2kouryaku201605.html" title="【艦これ】E-2攻略 設営隊を揚陸せよ！【16春イベ】 : 艦これ周回主義"&gt;【艦これ】E-2攻略 設営隊を揚陸せよ！【16春イベ】 : 艦これ周回主義&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E-3&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kankoreshuukai.blog.jp/archives/E-3kouryaku201605.html" title="【艦これ】E-3攻略 北太平洋前線海域【16春イベ】 : 艦これ周回主義"&gt;【艦これ】E-3攻略 北太平洋前線海域【16春イベ】 : 艦これ周回主義&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://akankorebiyori.blog.fc2.com/blog-entry-188.html" title="【艦これ】E-3．前線飛行場を設営せよ！ 攻略/周回【2016春イベント】  あ艦これ日和　-　艦これ攻略情報,プレイ日記"&gt;【艦これ】E-3．前線飛行場を設営せよ！ 攻略/周回【2016春イベント】  あ艦これ日和　-　艦これ攻略情報,プレイ日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E-6&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://irasuto-voice.com/archives/7244" title="2016春イベントE6 艦これ攻略"&gt;2016春イベントE6 艦これ攻略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5-4.blog.jp/archives/1056897800.html&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_6"&gt;戦力&lt;/h1&gt;
&lt;p&gt;主な戦力です。&lt;/p&gt;
&lt;h2 id="_7"&gt;戦艦&lt;/h2&gt;
&lt;p&gt;扶桑改二(96), 山城改二(97), 大和改(85), 武蔵改(73), 長門改(75), 陸奥改(73), 金剛改二(79), 比叡改二(75), 榛名改二(90), 霧島改二(80), Bismarck drei(98), Roma(45), Italia(87)&lt;/p&gt;
&lt;h2 id="_8"&gt;空母&lt;/h2&gt;
&lt;p&gt;加賀改(87), 赤城改(57), 瑞鶴改(88), 翔鶴改二(90), 飛龍改二(86), 蒼龍改二(89), 天城改(53), Graf改(75), 大鳳改(86)&lt;/p&gt;
&lt;p&gt;瑞鳳改(60), 千歳航改二(59), 千代田航改二(64), 龍驤改二(88), 隼鷹改二(84), 飛鷹改(37)&lt;/p&gt;
&lt;h2 id="_9"&gt;重巡/航巡&lt;/h2&gt;
&lt;p&gt;鈴谷改(48), 熊野改(55), 利根改二(93), 筑摩改二(81)&lt;/p&gt;
&lt;p&gt;Prinz改(87), 鳥海改二(78), 摩耶改二(83), 羽黒改二(81)&lt;/p&gt;
&lt;h2 id="_10"&gt;軽巡/雷巡&lt;/h2&gt;
&lt;p&gt;大井改二(81), 北上改二(85), 木曽改二(70)&lt;/p&gt;
&lt;p&gt;川内改二(69), 神通改二(83), 阿武隈改二(81), 球磨改(67), 矢矧改(58), 大淀改(79)&lt;/p&gt;
&lt;h2 id="_11"&gt;駆逐艦&lt;/h2&gt;
&lt;p&gt;時津風改(118), 雪風(87), 夕立改二(81), 時雨改二(89), ベールヌイ(81), 潮改二(80), 初霜改二(81), 暁改二(71), 天津風改(54), 秋月改(57), 照月改(66), 島風改(57), 綾波改二(82)&lt;/p&gt;
&lt;h1 id="_12"&gt;出撃の様子&lt;/h1&gt;
&lt;p&gt;E-1は上記の編成でストレート(司令部施設を4回使用), レアドロップはなし&lt;/p&gt;
&lt;p&gt;E-2は艦爆の決戦航空支援を出して、ラストだけ道中支援。&lt;/p&gt;
&lt;p&gt;E-3は高速水母がいなかったので駆逐9でトライ、道中に通常支援を出して、ラストのみ決戦通常支援&lt;/p&gt;</summary><category term="KanColle"></category></entry><entry><title>Ergodox買おうの会【買いました】</title><link href="https://muunyblue.github.io/a02ef8389f6d40f84b50504613117f88.html" rel="alternate"></link><published>2016-06-03T05:09:25+09:00</published><updated>2016-06-03T05:09:25+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-04-14:a02ef8389f6d40f84b50504613117f88.html</id><summary type="html">&lt;p&gt;こんにちは、&lt;a href="https://gist.github.com/yymm/0ccbe5f129e10c72b978" title="Ergodox買おうの会"&gt;Ergodox買おうの会&lt;/a&gt;を身近な人と始めようと声をかけてみましたが、興味はあれど一緒に買ってくれる人がいなかったので、とりあえず買ってみました。&lt;/p&gt;
&lt;p&gt;購入までのことについてはgistにまとめてあります(購入の詳細、届くまでのこともコメント欄に書いてあります)。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/yymm/0ccbe5f129e10c72b978" title="Ergodox買おうの会"&gt;Ergodox買おうの会&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;※追記&lt;/p&gt;
&lt;p&gt;Ergodoxを購入して1.5ヶ月経って社内勉強会で発表しました、使用感等についても書いてますので参考にどうぞ。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="http://blog.muuny-blue.info/a2369958a9645eac52b58a8134e2ef5a.html"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h1 id="_1"&gt;様子&lt;/h1&gt;
&lt;p&gt;&lt;img alt="キャップつけたErgodox" src="https://pbs.twimg.com/media/Cf7BD0hUkAAizpw.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ｶｲｼｬのErgdox" src="https://pbs.twimg.com/media/Cf9qcQ9VAAA3xnq.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;軸はGreetechの赤軸です。軽くて静かを望んでいたので満足しています。&lt;/p&gt;
&lt;p&gt;下の写真はｶｲｼｬの様子ですが、真ん中のはどのキーボード買おうか悩んでいたときにHHKBを試してみようと思い買ったHHKB Lite2です。まだ慣れない感じなので置いてありますが&lt;del&gt;そのうち撤去される予定です&lt;/del&gt;初日で撤去されました。&lt;/p&gt;
&lt;h1 id="_2"&gt;キー配置&lt;/h1&gt;
&lt;p&gt;&lt;img alt="key_map" src="https://i.gyazo.com/50bfa2354ed6d0fbf1cb8135234c417a.png" /&gt;&lt;/p&gt;
&lt;p&gt;なかなか慣れないのでまだ悩み中です。&lt;/p&gt;
&lt;h2 id="_3"&gt;設定方法&lt;/h2&gt;
&lt;p&gt;設定に関しては以下の記事を参考にしました。&lt;/p&gt;
&lt;p&gt;→ &lt;a href="http://saihoooooooo.hatenablog.com/entry/2016/03/02/042456" title="ErgoDox買ったったった（そしてハウツーConfigurator） - Make 鮫 noise"&gt;ErgoDox買ったったった（そしてハウツーConfigurator） - Make 鮫 noise&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Massdropのアカウントを作ればErgodoxの基本的なキーマップをWebから作成できるようです。&lt;/p&gt;
&lt;p&gt;→ &lt;a href="https://keyboard-configurator.massdrop.com/ext/ergodox" title="Ergodox Configurator - Massdrop"&gt;Ergodox Configurator - Massdrop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作成したキーマップを保存、読み込みもできて便利な感じです。目的のキーマップが完成したら.hexファイルを作成します。&lt;/p&gt;
&lt;p&gt;.hexファイルはTeensy Loaderを使用してErgodoxに適用します。&lt;/p&gt;
&lt;p&gt;→ &lt;a href="https://www.pjrc.com/teensy/loader.html" title="Teensy Loader Application - available for Windows, Linux and Macintosh systems"&gt;Teensy Loader Application - available for Windows, Linux and Macintosh systems&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OSXでは問題なく出来たのですが、Ubuntuではうまくいかなくて困っているので知ってる方がいれば教えていただきたいです。&lt;/p&gt;
&lt;h1 id="_4"&gt;改善したい点&lt;/h1&gt;
&lt;p&gt;FalbaTechで購入したケースは滑りやすいのと、セパレートのキーボードは中央が高くなるように傾斜がついていたほうがタイピングしやすいと少し使ってわかってきました。&lt;/p&gt;
&lt;p&gt;→ &lt;a href="http://nippondanji.blogspot.jp/2016/01/ergodox.html" title="漢(オトコ)のコンピュータ道: キーボードを新しくした話（ErgoDox）"&gt;漢(オトコ)のコンピュータ道: キーボードを新しくした話（ErgoDox）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この記事を参考にアクリル板を買ってもいいかもですし、四角いゴム角材的な何かを買ってもいいのでは...と言う感じです。&lt;/p&gt;
&lt;p&gt;四角いゴム的な何かって...消しゴムなのでは...!!?となって今はいい感じの消しゴムを探しています。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Ergodoxを買おうと思った動機は、プログラマになってから肩こりするようになっていてセパレートのキーボードを見たときに、これを使えば姿勢が改善されそうので良いのでは!と思ったからです。&lt;/p&gt;
&lt;p&gt;この記事もErgodoxで書いていますがのろのろです、まだまだ慣れないので積極的に使っていきたいです。&lt;/p&gt;
&lt;p&gt;あと写真をよく見るとXキーの位置にVキーがあるということに気がつくと思います、VimmerにはVキーが2つ届くようです。&lt;/p&gt;</summary><category term="Ergodox"></category></entry><entry><title>Ubuntu 14.04で"The package system is broken"を解決したいとき</title><link href="https://muunyblue.github.io/4ba929900be728c9dc7d6007ecf00222.html" rel="alternate"></link><published>2016-04-12T02:31:50+09:00</published><updated>2016-04-12T02:31:50+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-04-12:4ba929900be728c9dc7d6007ecf00222.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/5cf7b8a41aeb9a4ba4b8c1c49fa0c715.png" /&gt;&lt;/p&gt;
&lt;p&gt;Ubuntuでこの赤いエラーが出たときの対処法です。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="apt-how-do-i-resolve-unmet-dependencies-after-adding-a-ppa-ask-ubuntu"&gt;&lt;a href="http://askubuntu.com/questions/140246/how-do-i-resolve-unmet-dependencies-after-adding-a-ppa/142808#142808" title="apt - How do I resolve unmet dependencies after adding a PPA? - Ask Ubuntu"&gt;apt - How do I resolve unmet dependencies after adding a PPA? - Ask Ubuntu&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;(見出しがリンク先になってます)&lt;/p&gt;
&lt;p&gt;いくつか書いてある手順のどれかで解決できる可能性が非常に高いと思われます。&lt;/p&gt;
&lt;p&gt;libefl関係のエラー"The package system is broken"して困っていて、ググっても簡単に解決できなかったときに出会って無事に解決しました。&lt;/p&gt;
&lt;p&gt;その際は、ppaを減らしたら解決しました。&lt;/p&gt;
&lt;p&gt;"The package system is broken"解決策についてすごく良くまとまっているので参考に。&lt;/p&gt;</summary><category term="Ubuntu"></category></entry><entry><title>人生初GitHubでIssueをもらった話</title><link href="https://muunyblue.github.io/5b9373fc169106c43c99cfae04989986.html" rel="alternate"></link><published>2016-04-07T08:30:50+09:00</published><updated>2016-04-07T08:30:50+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-04-07:5b9373fc169106c43c99cfae04989986.html</id><summary type="html">&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/y_y_m_m/status/717902968066969601"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h1 id="hubot-dokku"&gt;hubot-dokkuを作っていた&lt;/h1&gt;
&lt;p&gt;軽い気持ちでslack上のhubotからdokkuをいじれないか試していました。&lt;/p&gt;
&lt;p&gt;dokku appsとdokku lsの結果を知らせている犬の様子です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/ca38febc4725bedfe2fa23cc675338e7.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/7f024fc381c8f0b991c758e4c7d1c31e.png" /&gt;&lt;/p&gt;
&lt;p&gt;何か犬がそれっぽく喋ってて楽しいし、DevHubとか動いたし大変便利そうでした。&lt;/p&gt;
&lt;h1 id="issue"&gt;Issueが来た&lt;/h1&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/yymm/hubot-dokku-server/issues/1"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;調べてみるとdokkuのメインコントリビュータさん...ﾜｧｫ...&lt;/p&gt;
&lt;p&gt;ぼくのツイートを見たと言っています。多分このツイートだろうと思われます。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/y_y_m_m/status/717261704694870016"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;内容はすごい便利なことを言っていたので実際に試してみてわからないことを聞いてみました。&lt;/p&gt;
&lt;h1 id="github"&gt;GitHubすごい&lt;/h1&gt;
&lt;p&gt;すごいびっくりして動揺しましたが、嬉しかったです。&lt;/p&gt;
&lt;p&gt;大したこともしてないのでGitHubは便利なソースコード置き場件、なんかスゴイ人たちがすごいものを作ってるところ としか見てなかったのすが、こういうこともあるんだなぁとしみじみしました。&lt;/p&gt;
&lt;p&gt;すごい緊張しながら返信しましたがいい経験になった気がします。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/y_y_m_m/status/717987122804686848"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;あーびっくりした。&lt;/p&gt;
&lt;p&gt;hubot-dokkuについてはまた記事書く気がします。&lt;/p&gt;</summary><category term="Dokku"></category><category term="GitHub"></category></entry><entry><title>プログラマになって5年経った</title><link href="https://muunyblue.github.io/0a30a980e3540e51eb25423caa79f0cb.html" rel="alternate"></link><published>2016-03-29T07:30:07+09:00</published><updated>2016-03-29T07:30:07+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-03-29:0a30a980e3540e51eb25423caa79f0cb.html</id><summary type="html">&lt;p&gt;都内のとある企業に入社して5年経ちました。&lt;/p&gt;
&lt;p&gt;こういうプログラマもいるというサンプル提示と振り返りをしてみようと思います。&lt;/p&gt;
&lt;h1 id="_1"&gt;入社当時のスキル&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;物理を学んでいた&lt;/li&gt;
&lt;li&gt;大学生のとき, FortranとC言語を使う授業の単位を取った&lt;/li&gt;
&lt;li&gt;C言語はメモ帳かnotepad++で書いていた&lt;/li&gt;
&lt;li&gt;独習Cを挫折した&lt;/li&gt;
&lt;li&gt;ポインタとは一体何なのか&lt;/li&gt;
&lt;li&gt;どのコンパイラでコンパイルしてるかなんて考えたことなかった&lt;/li&gt;
&lt;li&gt;C言語を使ったシミュレーションプログラムらしきものを作成して卒論を提出した(LaTex)&lt;/li&gt;
&lt;li&gt;デバックという単語を知らない&lt;/li&gt;
&lt;li&gt;実数と浮動小数点数の違いを意識してない&lt;/li&gt;
&lt;li&gt;今となってわかったことだが、大学のPCでEmacsかVimかを起動してえらい目に遭った&lt;/li&gt;
&lt;li&gt;実家にPCがなかったので普段の生活でPCに触れるようになったのは大学から&lt;/li&gt;
&lt;li&gt;インターネットし始めたのは大学から&lt;/li&gt;
&lt;li&gt;タイピングがとても遅い&lt;/li&gt;
&lt;li&gt;レポート提出はWordを使用していた&lt;/li&gt;
&lt;li&gt;Excelは表計算ソフトとして実験レポートの資料に使用していた&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プログラミングの能力は蚊程度ですね。大学でPCを使えるようになった感じです。&lt;/p&gt;
&lt;p&gt;プログラミング自体は動くと嬉しくて楽しかったので、プログラマになりました。&lt;/p&gt;
&lt;h1 id="1"&gt;入社1年目&lt;/h1&gt;
&lt;p&gt;前半(研修)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新人教育で使用する言語はC言語とC++&lt;/li&gt;
&lt;li&gt;ポインタについてわからないということがよくわかってきた&lt;/li&gt;
&lt;li&gt;VisualStudioというものを知った&lt;/li&gt;
&lt;li&gt;VisualStudioのブレークポイントが便利だったので感動していた&lt;/li&gt;
&lt;li&gt;デバックという単語を知った&lt;/li&gt;
&lt;li&gt;C言語とC++は違うというのを知った&lt;/li&gt;
&lt;li&gt;半年くらい新人教育を受けたあと実務になった&lt;/li&gt;
&lt;li&gt;割と年の近い技術力高そうな先輩社員の言ってることが意味不明でまともに会話できない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;後半(実務)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;実務は、典型的なアルゴリズムのカスタム実装だったので楽しい&lt;/li&gt;
&lt;li&gt;一緒に仕事してる上司とはソースコードをUSBメモリでやりとり&lt;/li&gt;
&lt;li&gt;実務内容と最近の技術話の内容に乖離を感じ始めていた&lt;/li&gt;
&lt;li&gt;最近の技術について知っていくのは楽しい&lt;/li&gt;
&lt;li&gt;実務しながらPythonを始める&lt;/li&gt;
&lt;li&gt;Python楽しい&lt;/li&gt;
&lt;li&gt;実務以外の技術的なことがかなり楽しい&lt;/li&gt;
&lt;li&gt;Mercurialを導入&lt;/li&gt;
&lt;li&gt;Bazaar, Gitを検討&lt;/li&gt;
&lt;li&gt;Linuxに興味&lt;/li&gt;
&lt;li&gt;おもむろにVimを練習しはじめる&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="23"&gt;入社2,3年目&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;実務はC言語で数値計算系のアルゴリズムを実装することにだいたい固定&lt;/li&gt;
&lt;li&gt;実務に飽きてきたので空き時間を見つけていろいろ勉強するようになっていた&lt;/li&gt;
&lt;li&gt;途中でC#とかの仕事をやった気がします&lt;del&gt;が記憶が曖昧ですね&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下が入社2,3年目で触った技術に関するツリーです。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/1f8e473bab1f9bbf20553a4f392015ac.png" /&gt;&lt;/p&gt;
&lt;p&gt;触れただけの技術もあります、触れたことをざっくり書いてます。&lt;/p&gt;
&lt;p&gt;大半が趣味の勉強内容で埋め尽くされてる感じになりました。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;~Javaは全くできません。&lt;/del&gt;~&lt;/p&gt;
&lt;p&gt;趣味が高じて以下のような感じになっていきました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VCSは結局Gitを使うのが無難&lt;/li&gt;
&lt;li&gt;エディタはVimしか使わなくなっていった&lt;/li&gt;
&lt;li&gt;開発環境は仮想環境のLinuxになっていった&lt;/li&gt;
&lt;li&gt;スクリプト言語はひとつ勉強しておくと仕事に役立つ&lt;/li&gt;
&lt;li&gt;開発機がWindowsからOSX、Ubuntuに移り変わった&lt;/li&gt;
&lt;li&gt;Web界隈は情報を追っていて楽しいけど仕事にしたくないなぁ&lt;/li&gt;
&lt;li&gt;レンタルサーバ借りて遊ぶ(さくらのVPS, DigitalOcean, Gehirn, IDCFクラウドあたり)&lt;/li&gt;
&lt;li&gt;HerokuとかでWebアプリデプロイ遊び&lt;/li&gt;
&lt;li&gt;個人で使うWebサービスを立てて遊ぶ&lt;/li&gt;
&lt;li&gt;社外の勉強会に顔を出したりしてみた&lt;/li&gt;
&lt;li&gt;Twitterという最新情報収集ツールを活用しだした&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プログラミング楽しい最盛期だった気がします。&lt;/p&gt;
&lt;p&gt;実務もLinuxで開発するようになりエディタはVimになり、Gitでソースコード管理をしていました。&lt;/p&gt;
&lt;p&gt;あとは、社内にSlackを導入したりしました(若手の団欒件お仕事連絡の場所になってます)。&lt;/p&gt;
&lt;h1 id="45"&gt;入社4,5年目&lt;/h1&gt;
&lt;p&gt;実務は非常にレガシーな感じで楽しくないので、実務に趣味勉強内容を反映して楽しく仕事できるように取り組みはじめました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数値計算系はテストを書くのが非常に有効なのでテストフレームワーク、TDDを実践し始める&lt;/li&gt;
&lt;li&gt;Jenkins, Drone.ioなどのCIを試験的に運用&lt;/li&gt;
&lt;li&gt;GitLabが社内に立って便利&lt;/li&gt;
&lt;li&gt;GitLab CIが出たので使えそう&lt;/li&gt;
&lt;li&gt;仕様書ベースのTDDを始める&lt;/li&gt;
&lt;li&gt;お客さんを巻き込んでテストを書くスタイルが完成&lt;/li&gt;
&lt;li&gt;Electronを実務で使いたいので画策中&lt;/li&gt;
&lt;li&gt;他の仕事とかを本来の作業以外に並行で頼まれたりするようになってきた&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと他には&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ブログとか書き始める&lt;/li&gt;
&lt;li&gt;Dockerを触り始める(上記のCI検証の一環)&lt;/li&gt;
&lt;li&gt;Node.jsで遊んでたら、NW.js、Electron(旧AtomShell)に出会う&lt;/li&gt;
&lt;li&gt;PyPIにパッケージを登録したりしてみた&lt;/li&gt;
&lt;li&gt;社内勉強会を企画したりし始めた&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_2"&gt;現在&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;入社2年目くらいから仕事に飽きてきているので、そろそろ真剣に飽きてきました。もう全部自動化したいです&lt;/li&gt;
&lt;li&gt;入社年数が深まると仕事の量が増えてきたりしたり負債が溜まってくるので今はそれに追われてる&lt;/li&gt;
&lt;li&gt;いかに自由な時間を生成できるか日々考え中&lt;/li&gt;
&lt;li&gt;社内勉強会もりあげていきたい&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/yymm/0ccbe5f129e10c72b978" title="Ergodox買おうの会"&gt;Ergodoxが欲しい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="2"&gt;入社2年目あたりに何に影響を受けたのか&lt;/h1&gt;
&lt;p&gt;会社の強い先輩の影響もありますが、けっこう本の影響も受けてます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%8C%E7%9F%A5%E3%82%8B%E3%81%B9%E3%81%8D97%E3%81%AE%E3%81%93%E3%81%A8-%E5%92%8C%E7%94%B0-%E5%8D%93%E4%BA%BA/dp/4873114799" title="プログラマが知るべき97のこと : 和田 卓人, Kevlin Henney, 夏目 大 : 本 : Amazon.co.jp"&gt;プログラマが知るべき97のこと&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.jp/%E9%81%94%E4%BA%BA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%83%BC%E2%80%95%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E9%96%8B%E7%99%BA%E3%81%AE%E8%81%B7%E4%BA%BA%E3%81%8B%E3%82%89%E5%90%8D%E5%8C%A0%E3%81%B8%E3%81%AE%E9%81%93-%E3%83%8F%E3%83%B3%E3%83%88-%E3%82%A2%E3%83%B3%E3%83%89%E3%83%AA%E3%83%A5%E3%83%BC/dp/4894712741/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1459233258&amp;amp;sr=1-1&amp;amp;keywords=%E9%81%94%E4%BA%BA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%83%BC" title="Amazon.co.jp： 達人プログラマー―システム開発の職人から名匠への道: アンドリュー ハント, デビッド トーマス, Andrew Hunt, David Thomas, 村上 雅章: 本"&gt;達人プログラマー―システム開発の職人から名匠への道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.jp/Team-Geek-%E2%80%95Google%E3%81%AE%E3%82%AE%E3%83%BC%E3%82%AF%E3%81%9F%E3%81%A1%E3%81%AF%E3%81%84%E3%81%8B%E3%81%AB%E3%81%97%E3%81%A6%E3%83%81%E3%83%BC%E3%83%A0%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AE%E3%81%8B-Brian-Fitzpatrick/dp/4873116309/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1459233298&amp;amp;sr=1-1&amp;amp;keywords=team+geek" title="Amazon.co.jp： Team Geek ―Googleのギークたちはいかにしてチームを作るのか: Brian W. Fitzpatrick, Ben Collins-Sussman, 及川 卓也, 角 征典: 本"&gt;Team Geek ―Googleのギークたちはいかにしてチームを作るのか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.jp/Developers-Code-%E6%9C%AC%E7%89%A9%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%8C%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8-Wai-Cheung/dp/4048867725" title="Developer's Code 本物のプログラマがしていること : Ka Wai Cheung, 新丈径 : 本 : Amazon.co.jp"&gt;Developer's Code 本物のプログラマがしていること&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.jp/%E3%83%8F%E3%83%83%E3%82%AB%E3%83%BC%E3%81%A8%E7%94%BB%E5%AE%B6-%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E6%99%82%E4%BB%A3%E3%81%AE%E5%89%B5%E9%80%A0%E8%80%85%E3%81%9F%E3%81%A1-%E3%83%9D%E3%83%BC%E3%83%AB-%E3%82%B0%E3%83%AC%E3%82%A2%E3%83%A0/dp/4274065979/ref=pd_sim_14_9?ie=UTF8&amp;amp;dpID=511SV9NXW2L&amp;amp;dpSrc=sims&amp;amp;preST=_AC_UL160_SR113%2C160_&amp;amp;refRID=0C2RQTJHWRSV8J1A23ED" title="Amazon.co.jp： ハッカーと画家 コンピュータ時代の創造者たち: ポール グレアム, Paul Graham, 川合 史朗: 本"&gt;ハッカーと画家 コンピュータ時代の創造者たち&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他にもあった気がしますが、考え方とかはこの辺りのプログラマ読み物的な書物の影響が大きいです。&lt;/p&gt;
&lt;h1 id="_3"&gt;今後&lt;/h1&gt;
&lt;p&gt;かつては使ってるツールとかで困ったときはソースコード読めばいいじゃんとか言われて、何言ってんの...ふざけてるの...と思っていましたが最近はソースコード読もうかなぁという感じになってきました。&lt;/p&gt;
&lt;p&gt;そんなこんなでツールを使うことで精一杯な感じだったのは終わってきたと思うので、自分自身も何か作る側に行きたいという気持ちも出てきました(実務以外で)。&lt;/p&gt;
&lt;p&gt;最近はRustやHaskellあたりに興味があるので勉強時間取りたいなぁという感じです。&lt;/p&gt;
&lt;p&gt;あと、勉強した技術のツリー書くと何か楽しいです、興味があれば作ってみるといいかもです。&lt;/p&gt;
&lt;p&gt;ちなみに自分は&lt;a href="https://www.mindmeister.com/ja" title="Mind Mapping Software - Brainstorm Online"&gt;MindMeister&lt;/a&gt;のテストで作成してスクリーンショットを取っただけです。&lt;/p&gt;
&lt;p&gt;プログラマして5年経ちましたが、まだまだやりたいことはいっぱいあります。&lt;/p&gt;
&lt;p&gt;がんばるぞい!&lt;/p&gt;</summary><category term="Poem"></category></entry><entry><title>ブイズパ考察 ダブルバトル</title><link href="https://muunyblue.github.io/c213877427b46fa96cff6c39e837ccee.html" rel="alternate"></link><published>2016-03-09T06:00:48+09:00</published><updated>2016-03-09T06:00:48+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-02-15:c213877427b46fa96cff6c39e837ccee.html</id><summary type="html">&lt;h1 id="_1"&gt;パーティ考察&lt;/h1&gt;
&lt;p&gt;メンバー、アイテム、技構成考察。&lt;/p&gt;
&lt;p&gt;かっこかわいいブイズを見たい。いい感じに刺さってドヤ顔のブースター見たい。&lt;/p&gt;
&lt;p&gt;&lt;img alt="http://seiga.nicovideo.jp/seiga/im4836994" src="http://lohas.nicoseiga.jp//thumb/4836994i?" /&gt;&lt;/p&gt;
&lt;p&gt;個別はこっち =&amp;gt; &lt;a href="http://blog.muuny-blue.info/39d4b545fb02556829aab1db805021c3.html" title="ブイズ考察 ダブルバトル"&gt;ブイズ考察 ダブルバトル&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="1"&gt;第1回&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;サンダースCS252ひかえめ@メガネ １０万/シャドボ/めざ氷/ボルチェン&lt;/li&gt;
&lt;li&gt;ブースターHA252いじっぱり@たべのこし フレアドライブ/ねがいごと/みきり/鬼火&lt;/li&gt;
&lt;li&gt;ブラッキーHB252ずぶとい@ゴツメ バークアウト/にほんばれ/つきのひかり/イカサマ&lt;/li&gt;
&lt;li&gt;エーフィHS252おくびょう@ひかりのねんど リフレクター/あさのひざし/あくび/ひかりのかべ&lt;/li&gt;
&lt;li&gt;シャワーズCD252ひかえめ@オボン ねっとう/れいビ/てだすけ/ねがいごと&lt;/li&gt;
&lt;li&gt;ニンフィアHB252ひかえめ@珠 リフレクター/ハイパーボイス/願い事/みきり&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先発向き =&amp;gt; サンダース、エーフィ、ニンフィア&lt;/p&gt;
&lt;h2 id="_2"&gt;結果&lt;/h2&gt;
&lt;p&gt;3回やって1回勝てるかどうか・・・&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;サンダースの火力がいい感じ&lt;/li&gt;
&lt;li&gt;スカーフランドに地震連打されるとあっさりやられる&lt;/li&gt;
&lt;li&gt;地震に弱い&lt;/li&gt;
&lt;li&gt;エーフィを壁用にと先発でたくさん起用した&lt;/li&gt;
&lt;li&gt;H252だけど、リフレクター貼っても物理技で押し負ける&lt;/li&gt;
&lt;li&gt;脆い&lt;/li&gt;
&lt;li&gt;殴りたい時が多かった&lt;/li&gt;
&lt;li&gt;シャワーズとサンダースの組み合わせ良かった&lt;/li&gt;
&lt;li&gt;交代受け(ちくでん、ちょすい) -&amp;gt; 洗濯機受けできた&lt;/li&gt;
&lt;li&gt;手助けめざ氷でボルトやっつけた&lt;/li&gt;
&lt;li&gt;ブラッキーが硬い&lt;/li&gt;
&lt;li&gt;メガガルーラのグロパン受けでイカサマ確殺&lt;/li&gt;
&lt;li&gt;グロパン後一回行動できるので、その隙にブラッキーじゃないほうを殺られるの辛かった(まもりたい)&lt;/li&gt;
&lt;li&gt;そりゃそうだけどニンフィアが重い、バークアウト打っても全く止まらない&lt;/li&gt;
&lt;li&gt;メガメタグロス、ゴツメイカサマで処理可能&lt;/li&gt;
&lt;li&gt;もうちょっとブースター使えそう&lt;/li&gt;
&lt;li&gt;まもるで攻撃をすかしつつ反撃の戦法じゃないときつそうだった&lt;/li&gt;
&lt;li&gt;サンダースはもっとボルチェンしていったほうがいい(半分~7,8割持ってく)&lt;/li&gt;
&lt;li&gt;ニンフィアは何も考えずぶん殴るのがやはり強い&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_3"&gt;第二回&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;サンダースCS252ひかえめ@メガネ １０万/シャドボ/めざ氷/ボルチェン&lt;/li&gt;
&lt;li&gt;ブースターHA252いじっぱり@たべのこし フレアドライブ/ねがいごと/みきり/鬼火&lt;/li&gt;
&lt;li&gt;ブラッキーHB252ずぶとい@ゴツメ バークアウト/まもる/つきのひかり/イカサマ&lt;/li&gt;
&lt;li&gt;エーフィHS252おくびょう@オボン リフレクター/くさむすび/まもる/サイコキネシス&lt;/li&gt;
&lt;li&gt;シャワーズCD252ひかえめ@ふうせん ねっとう/れいビ/てだすけ/あくび&lt;/li&gt;
&lt;li&gt;ニンフィアHB252ひかえめ@珠 ひかりのかべ/ハイパーボイス/願い事/みきり&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技構成を見直し。&lt;/p&gt;
&lt;h2 id="_4"&gt;結果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;シャワーズにふうせんはいい感じだった、ふうせんあり時は水地面無効状態なので繰り出しやすい&lt;/li&gt;
&lt;li&gt;てだすけ+サンダースは相当な火力かつ速いのでいい感じ&lt;/li&gt;
&lt;li&gt;実は、壁を張っている暇はあまりないのかもしれないと思い始めた&lt;/li&gt;
&lt;li&gt;エーフィは殴ると強い&lt;/li&gt;
&lt;li&gt;雨メガラグラージよくいるので草技は貴重&lt;/li&gt;
&lt;li&gt;狙われやすいのでまもるが機能しやすかった&lt;/li&gt;
&lt;li&gt;ブースターかわいいけど繰り出しがむずいのとサンダースと弱点がかぶってるのが痛い&lt;/li&gt;
&lt;li&gt;リーフィアの可能性を感じた&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_5"&gt;第三回&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;サンダース CS252ひかえめ@メガネ １０万/シャドボ/めざ氷/ボルチェン&lt;/li&gt;
&lt;li&gt;ブースター AS252いじっぱり@スカーフ フレアドライブ/捨て身タックル/ばかぢから/オーバーヒート&lt;/li&gt;
&lt;li&gt;ブラッキー HB252ずぶとい@ゴツメ バークアウト/てだすけ/つきのひかり/イカサマ&lt;/li&gt;
&lt;li&gt;エーフィ CS252おくびょう@メガネ サイコキネシス/くさむすび/マジカル社員/みきり&lt;/li&gt;
&lt;li&gt;シャワーズ CD252ひかえめ@ふうせん ねっとう/れいビ/てだすけ/あくび&lt;/li&gt;
&lt;li&gt;リーフィア HA252@のみ リーフブレード/はたきおとす/しぜんのめぐみ/みきり&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まさかの固定砲台さん外し。&lt;/p&gt;
&lt;h2 id="_6"&gt;結果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;勝ち負け半々くらいの成績が出せそう&lt;/li&gt;
&lt;li&gt;スカーフブースターの大活躍&lt;/li&gt;
&lt;li&gt;てだすけを受けたブースターのフレアドライブは強い&lt;/li&gt;
&lt;li&gt;106族までしか抜けないのが微妙かも、ただし火力は出てる&lt;/li&gt;
&lt;li&gt;ブースターは地震のついでに倒そう的な感じで油断しきってる雰囲気があったのでそこを刺していけた&lt;/li&gt;
&lt;li&gt;リーフィアの立ち回りに慣れていきたい感じ&lt;/li&gt;
&lt;li&gt;地震、いわなだれを余裕で受けれるのでそのへん活かしていきたい&lt;/li&gt;
&lt;li&gt;結構引かせる性能があるので、はたきおとすを有効に使えそう&lt;/li&gt;
&lt;li&gt;やはりメガリザXだったとき無理だった&lt;/li&gt;
&lt;li&gt;エーフィは全力で殴ったほうが強かった&lt;/li&gt;
&lt;li&gt;キノコ絶対に殺すマンだった&lt;/li&gt;
&lt;li&gt;珠社員の火力なかなかだった&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="4"&gt;第4回&lt;/h1&gt;
&lt;h2 id="_7"&gt;反省&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ブースターが準速スカーフ、サンダースが準速で起こる弊害&lt;/li&gt;
&lt;li&gt;ゲッコウガが抜けない&lt;/li&gt;
&lt;li&gt;リーフィアの出番がまだない&lt;/li&gt;
&lt;li&gt;リザードン来た！ -&amp;gt; X!!!! -&amp;gt; 敗北を2回経験したので運が悪い&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ブースター、サンダースを最速に変更。&lt;/p&gt;
&lt;p&gt;(育成中)&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="_8"&gt;付録&lt;/h1&gt;
&lt;h2 id="_9"&gt;ダブルバトル仮想敵&lt;/h2&gt;
&lt;p&gt;良くダブルで見る厨ぽけ&lt;/p&gt;
&lt;p&gt;メガガルーラ/メガリザードンY/ランドロス(霊獣)/ボルトロス(化身)/ニンフィア/ガブリアス/ボーマンダ/ゲンガー/モロバレル/ヤミラミ/ミロカロス/キリキザン&lt;/p&gt;
&lt;p&gt;この辺りのポケモンに対してダメージ計算をしてみると良さそう。&lt;/p&gt;
&lt;h2 id="_10"&gt;シナジー&lt;/h2&gt;
&lt;p&gt;特性やタイプ相性、技などでシナジー効果がありそうな組み合わせ。&lt;/p&gt;
&lt;h3 id="_11"&gt;晴れ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ブースターの炎技&lt;/li&gt;
&lt;li&gt;エーフィのあさのひざし&lt;/li&gt;
&lt;li&gt;ブラッキーのつきのひかり&lt;/li&gt;
&lt;li&gt;リーフィアのこうごうせい&lt;/li&gt;
&lt;li&gt;リーフィアのようりょくそ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あたりとシナジー効果がありそう。晴れていれば、ブースターにスカーフを持たせて上から殴るだけで強そうです。&lt;/p&gt;
&lt;p&gt;難点は、セルフ晴れなところ。わざわざリーフィアに晴れさせなくてもいいかもしれません。昨今はメガリザードンも多いので相手の晴れを利用するのも運ゲーですが手かなと思います。&lt;/p&gt;
&lt;h3 id="_12"&gt;壁&lt;/h3&gt;
&lt;p&gt;ブイズは壁はれる個体がいる。エーフィ、ニンフィアは両壁、サンダースは光の壁。&lt;/p&gt;
&lt;p&gt;ブラッキーを除くブイズは物理特殊どっちかに特化した種族値をしている。&lt;/p&gt;
&lt;p&gt;物理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(100超)リーフィア、グレイシア&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特殊&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(100超)ブースター、ニンフィア&lt;/li&gt;
&lt;li&gt;(100以下)サンダース、シャワーズ、エーフィ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比率的にリフレクターのほうが需要がありそう。特殊受けする場合はひかりのかべもありな感じ。&lt;/p&gt;
&lt;h3 id="_13"&gt;交代受け&lt;/h3&gt;
&lt;p&gt;せっかく色んなタイプがあるので交代してシナジー効果を出していきたい。&lt;/p&gt;
&lt;p&gt;サンダース、ブースター =&amp;gt; (地震や物理技読み) =&amp;gt; 物理受けリーフィア =&amp;gt; (炎技読み) =&amp;gt; もらいびブースター&lt;/p&gt;
&lt;p&gt;状態異常弱い(ブラッキー→毒々、リーフィア→鬼火、ブースター→でんじは) =&amp;gt; マジックミラーエーフィ or シンクロブラッキー&lt;/p&gt;
&lt;p&gt;他にも型で受けたりできそう。&lt;/p&gt;</summary><category term="Pokemon"></category></entry><entry><title>BitTorrentSyncをUbuntuで使う</title><link href="https://muunyblue.github.io/4572101f572c37f203cd8690fe6e4eeb.html" rel="alternate"></link><published>2016-02-15T07:25:17+09:00</published><updated>2016-02-15T07:25:17+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-02-15:4572101f572c37f203cd8690fe6e4eeb.html</id><summary type="html">&lt;p&gt;BitTorrentSyncは、クロスプラットフォームで使えて、しかもiOSやAndroidでも使えて便利なP2Pのデータ共有ツールです。&lt;/p&gt;
&lt;p&gt;Linuxでも使えて、Ubuntuユーザーなので使おうとしてみると、なんとGUIがなくWebUIしかない。&lt;del&gt;あきらかにElectronやNW.jsのようなアプリなのに何故？！&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;WebUIしかないけど使用感は同じなのでインストールして使ってみています。&lt;/p&gt;
&lt;h1 id="_1"&gt;インストール&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo add-apt-repository ppa:tuxpoldo/btsync
$ sudo apt-get update
$ sudo apt-get install btsync
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;リポジトリを追加してインストールします。&lt;/p&gt;
&lt;p&gt;apt-get install btsyncするとCUI上で色々尋ねられます。きちんと設定する必要があるので英語ですがちゃんと読んで設定を行うと良いと思います。&lt;/p&gt;
&lt;p&gt;自分の場合は、以下のように設定しました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;btsyncを扱うユーザー・グループは現在のユーザー(つまり自分)&lt;/li&gt;
&lt;li&gt;btsyncのディレクトリは、現在のユーザーの/home/&lt;user名&gt;以下に作成(例./home/&lt;user&gt;/BtSync)&lt;/li&gt;
&lt;li&gt;WebUIは0.0.0.0:8888でアクセス(デフォルトの設定)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;全部yesにすると権限がない等の問題が発生することがあるかもしれません。&lt;/p&gt;
&lt;p&gt;WebUIへの初回アクセス時に、ユーザー名とパスワードの設定を促されます。&lt;/p&gt;
&lt;p&gt;WebUIへのアクセスがBasic認証になっているためなので適宜設定しておきます。&lt;/p&gt;
&lt;p&gt;使い方は、WindowsやMacで使っているGUIのものと変わりないのでそのまま使えます。&lt;/p&gt;</summary><category term="btsync"></category><category term="Ubuntu"></category></entry><entry><title>ブイズ考察 ダブルバトル</title><link href="https://muunyblue.github.io/39d4b545fb02556829aab1db805021c3.html" rel="alternate"></link><published>2016-06-10T00:45:37+09:00</published><updated>2016-06-10T00:45:37+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-02-10:39d4b545fb02556829aab1db805021c3.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;※ORASレーティングダブル想定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="http://seiga.nicovideo.jp/seiga/im4836994" src="http://lohas.nicoseiga.jp//thumb/4836994i?" /&gt;&lt;/p&gt;
&lt;p&gt;ブイズパをつくろうと考えているので考察です。&lt;/p&gt;
&lt;p&gt;随時更新。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;サンダース&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;メガネ奇襲型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;ブースター&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;スカーフ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;根性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;受け&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;エーフィ&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_8"&gt;ロマンアシパ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;補助技オンリー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;壁係&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;リフレクターのみ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;アタッカー&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_13"&gt;ブラッキー&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_14"&gt;バークアウト物理受け&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_15"&gt;リーフィア&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_16"&gt;晴れ物理流し&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_17"&gt;岩しぜんのめぐみ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_18"&gt;ニンフィア&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_19"&gt;物理壁係&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_20"&gt;物理壁改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_21"&gt;ただ殴るやつ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_22"&gt;めざ炎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_23"&gt;シャワーズ&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_24"&gt;シンプルアタッカー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_25"&gt;ふうせん&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_26"&gt;グレイシア&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_27"&gt;自発的あられ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;ちなみに、ブースターが一番好きです。次点でブラッキー。グレイシアはかわいいけど冷たそう。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="_1"&gt;サンダース&lt;/h1&gt;
&lt;h2 id="_2"&gt;メガネ奇襲型&lt;/h2&gt;
&lt;p&gt;１０万/シャドボ/めざ氷/ボルチェン&lt;/p&gt;
&lt;p&gt;メガネ/おくびょうorひかえめ/CS252/ちくでん&lt;/p&gt;
&lt;p&gt;ダメージ計算(カッコ内は1.1倍威力)&lt;/p&gt;
&lt;p&gt;10万&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;H252ギルガ 43.7%～52% (48.5%～57.4%)&lt;/li&gt;
&lt;li&gt;無振りメガリザY (133.3%～156.8%)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;シャドボ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;H252ギルガ 52.6%～62.2% (57.4%～68.2%)&lt;/li&gt;
&lt;li&gt;無振りメガゲンガー 94.8%～112.5% (103.7%～122.9%)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;めざ氷&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;無振りガブ 115.8%～137.7%&lt;/li&gt;
&lt;li&gt;無振りマンダ 120%～141.1%&lt;/li&gt;
&lt;li&gt;無振りランド 136.5%～160.9%&lt;/li&gt;
&lt;li&gt;H252ランド 114.2%～134.6%&lt;/li&gt;
&lt;li&gt;D252モロバレル 44.4%～52.9% (48.6%～58.2%)&lt;/li&gt;
&lt;li&gt;無振りボルト 72.7%～85.7% (79.2%～93.5%)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ボルチェン&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;無振りメガリザY 94.1%～111.1% (101.9%～121.5%)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;被ダメージ(カッコ内は1.1倍威力)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C252メガゲンガー シャドボ 62.1%～73.5% (68.5%～81.4%)&lt;/li&gt;
&lt;li&gt;C252メガゲンガー ヘド爆 70.7%～83.5% (77.8%～92.1%)&lt;/li&gt;
&lt;li&gt;C252ギルガ シャドボ 56.4%～67.1% (62.1%～73.5%)&lt;/li&gt;
&lt;li&gt;C252メガリザードンY ねっぷう 77.8%～92.8%&lt;/li&gt;
&lt;li&gt;A252ガブリアス ドラゴンクロー 73.5%～87.8%&lt;/li&gt;
&lt;li&gt;A252ガブ げきりん 110%～130.7%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ひかえめ準速だと確二率が高く、無振りメガゲンガー確一がおいしい。意外と半端な威力の一致特殊くらいなら耐える。&lt;/p&gt;
&lt;h1 id="_3"&gt;ブースター&lt;/h1&gt;
&lt;h2 id="_4"&gt;スカーフ&lt;/h2&gt;
&lt;p&gt;フレアドライブ/ばがぢから/捨て身タックル/オーバーヒート&lt;/p&gt;
&lt;p&gt;スカーフ/ようきorいじっぱり/AS252/もらいび&lt;/p&gt;
&lt;p&gt;フレアドライブ(1.0 : 1.1, カッコ内はてだすけ火力)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;無振りメガガルーラ 57.2%～68.3%(85.5%～101.6%) : 63.3%～75%(93.8%～111.6%)&lt;/li&gt;
&lt;li&gt;無振り霊獣ランドロス(威嚇なし) 68.2%～81%(103%～121.3%) : 75.6%～89.6%(113.4%～133.5%)&lt;/li&gt;
&lt;li&gt;H252霊獣ランドロス(威嚇なし) 57.1%～67.8%(86.2%～101.5%) : 63.2%～75%(94.8%～111.7%)&lt;/li&gt;
&lt;li&gt;無振り化身ボルトロス 88.3%～105.1%(133.1%～157.7%) : 98%～115.5%(146.7%～173.3%)&lt;/li&gt;
&lt;li&gt;H252化身ボルトロス 73.1%～87%(110.2%～130.6%) : 81.1%～95.6%(121.5%～143.5%)&lt;/li&gt;
&lt;li&gt;HB252特化モロバレル 84.1%～98.6%(124.8%～147.5%) : 92.3%～108.5%(138.4%～162.8%)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ばかぢから&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;無振りガルーラ 76.6%～91.1%(114.4%～135.5%) : 84.4%～100%(125.5%～148.8%)&lt;/li&gt;
&lt;li&gt;無振りゲッコウガ 129.2%～152.3% : 141.4%～167.3%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使った感じ手助けとかなり相性が良かった。意地っ張り手助け込みでS106以下のポケモンなら油断してるところ返り討ちにできる感じだった。&lt;/p&gt;
&lt;p&gt;すばやさは意地っ張りで最速106族を抜ける程度。陽気なら123族抜き。&lt;/p&gt;
&lt;p&gt;S106から123あたりには、ゲンガー、ゲッコウガ、メガメタグロス、マニューラなどがいるので、陽気にすると結構抜ける範囲は広くなる。&lt;/p&gt;
&lt;p&gt;もともと絶妙な火力なので陽気にすると火力が乱数になる点が不安になってくる他のメンバーとの相性で選択するのが良さそう。&lt;/p&gt;
&lt;p&gt;意地っ張りにすると、最速エーフィ、準速サンダースより遅いので本当にスカーフ?的な陽動作戦はできるかも。&lt;/p&gt;
&lt;h2 id="_5"&gt;根性&lt;/h2&gt;
&lt;p&gt;からげんぎ/フレアドライブ/ニトロチャージ/ばかぢから&lt;/p&gt;
&lt;p&gt;毒々玉/いじっぱり/HA252/こんじょう&lt;/p&gt;
&lt;p&gt;ロマン入ってるので計算はしないです。&lt;/p&gt;
&lt;h2 id="_6"&gt;受け&lt;/h2&gt;
&lt;p&gt;フレアドライブ/ねがいごと/みきり/鬼火&lt;/p&gt;
&lt;p&gt;たべのこし/いじっぱり/HA252/もらいび&lt;/p&gt;
&lt;p&gt;リフレクターと組む前提?&lt;/p&gt;
&lt;p&gt;長生きできる可能性を秘めてるのでブースター好き的に使っていきたさ。&lt;/p&gt;
&lt;p&gt;厄介なフェアリースキンハイパーボイスを半減で受けられるのを活かしたい。&lt;/p&gt;
&lt;p&gt;被ダメージ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C252特化ニンフィアハイパーボイス 21.5%～25.5%&lt;/li&gt;
&lt;li&gt;C252特化メガネニンフィアハイパーボイス 31.9%～38.3%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;タイマンなら、C特化メガネハイパーボイスでも、後出しからたべのこし+みきり+鬼火を回して3耐えするので、願い事で受け勝つことはできる。&lt;/p&gt;
&lt;p&gt;(後出し→食らう→みきり→食らう→鬼火→みきり→食らう(この時点でダメージ89.9%(最高乱数))→願い事→以下繰り返し)&lt;/p&gt;
&lt;h1 id="_7"&gt;エーフィ&lt;/h1&gt;
&lt;h2 id="_8"&gt;ロマンアシパ&lt;/h2&gt;
&lt;p&gt;アシストパワーをキメていくスタイル&lt;/p&gt;
&lt;p&gt;めいそう/アシストパワー/リフレクター/あさのひざし&lt;/p&gt;
&lt;p&gt;候補: スキルスワップ/めざ格闘&lt;/p&gt;
&lt;p&gt;?/おくびょう/HS252orCS252/マジックミラー(夢)&lt;/p&gt;
&lt;p&gt;ダメージ計算(カッコ内はC252、基本無振り)&lt;/p&gt;
&lt;p&gt;2瞑想アシパ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;無振りガブリアス 87.4%～103.8% (106.5%～126.2%)&lt;/li&gt;
&lt;li&gt;無振りメガガル 78.8%～93.3% (95%～112.2%)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3積みすれば威力が約2倍になるので必殺技になる。ただし悪無効。&lt;/p&gt;
&lt;h2 id="_9"&gt;補助技オンリー&lt;/h2&gt;
&lt;p&gt;変化技に非常に強いので徹底したいやがらせ&lt;/p&gt;
&lt;p&gt;リフレクター/あさのひざし/あくびorでんじは/どくどく&lt;/p&gt;
&lt;p&gt;ひかりのねんど/おくびょう/HS252/マジックミラー(夢)&lt;/p&gt;
&lt;h2 id="_10"&gt;壁係&lt;/h2&gt;
&lt;p&gt;リフレクター/ひかりのかべ/サイコキネシス/あくび&lt;/p&gt;
&lt;p&gt;ひかりのねんど/おくびょう/HS252/マジックミラー(夢)&lt;/p&gt;
&lt;p&gt;基本ぽい感じ。&lt;/p&gt;
&lt;h2 id="_11"&gt;リフレクターのみ&lt;/h2&gt;
&lt;p&gt;リフレクター/サイコキネシス/あさのひざし/あくび&lt;/p&gt;
&lt;p&gt;ひかりのねんど/おくびょう/HS252/マジックミラー(夢)&lt;/p&gt;
&lt;h2 id="_12"&gt;アタッカー&lt;/h2&gt;
&lt;p&gt;サイコキネシス/マジカルシャイン/くさむすび/まもる&lt;/p&gt;
&lt;p&gt;珠or帯/おくびょう/CS252/マジックミラー(夢)&lt;/p&gt;
&lt;p&gt;珠か帯かで迷うので計算してみよう&lt;/p&gt;
&lt;p&gt;ダメージ計算&lt;/p&gt;
&lt;p&gt;サイコキネシス&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;モロバレルH252 109.5%～130.7% : 100.9%～120.3%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;くさむすび&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ミロカロスH252 (100) 61.8%～73.2% : 56.9%～67.8%&lt;/li&gt;
&lt;li&gt;トリトドンH252 (60) 97.7%～116.9% : 90.3%～107.7%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マジカル社員&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ガブリアス 55.1%～66.6% : 51.3%～61.7%&lt;/li&gt;
&lt;li&gt;キリキザンH252 34.8%～41.2% : 26.7%～31.9%&lt;/li&gt;
&lt;li&gt;メガミミロップ 67.1%～80% : 61.4%～73.5%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あとは、抜群に放っていくことが多いのか、等倍に放っていくことが多いのかで変わってきそう。&lt;/p&gt;
&lt;p&gt;薄命なので珠でまんべんなく効果力狙っていくほうが向いてそうだった。&lt;/p&gt;
&lt;h1 id="_13"&gt;ブラッキー&lt;/h1&gt;
&lt;h2 id="_14"&gt;バークアウト物理受け&lt;/h2&gt;
&lt;p&gt;バークアウト/にほんばれ/つきのひかり/イカサマ&lt;/p&gt;
&lt;p&gt;ゴツメ/ずぶとい/HB252/シンクロ&lt;/p&gt;
&lt;p&gt;ゴツメで引いいていく物理アタッカーのあとに出てくる可能性のある特殊アタッカーをバークアウトで牽制していく型。&lt;/p&gt;
&lt;p&gt;被ダメージ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A252ガブ地震(ダブル) 20.7%～25.2%&lt;/li&gt;
&lt;li&gt;A252ガルーラおんがえし 28.7%～34.1%+13.8%～16.8%&lt;/li&gt;
&lt;li&gt;A252メガガルーラグロパン 15.8%～18.8%+10.8%～13.8%&lt;/li&gt;
&lt;li&gt;C252ニンフィアハイパーボイス 80.1%～95% (87.1%～103.9%)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;イカサマダメージ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A252メガガルーラ 43.8%～52.2% (グロパン受けで確一)&lt;/li&gt;
&lt;li&gt;A252ガブ 45.9%～54%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;おんがえし読みで出して、グロパン受けでも最大81％で耐えてイカサマで確一にできる。猫騙しを吸えば引くことが多そうなのでバークアウトを打っていく。&lt;/p&gt;
&lt;p&gt;壁貼りと組めば良い感じでそう。&lt;/p&gt;
&lt;p&gt;にほんばれは、自分の回復量upとブースター用に搭載。他の技でもいいかもしれない。&lt;/p&gt;
&lt;h1 id="_15"&gt;リーフィア&lt;/h1&gt;
&lt;h2 id="_16"&gt;晴れ物理流し&lt;/h2&gt;
&lt;p&gt;あくび/はたき落とす/こうごうせい/にほんばれ&lt;/p&gt;
&lt;p&gt;ゴツメ/わんぱく/HB252/ようりょくそ(夢)&lt;/p&gt;
&lt;p&gt;B130を活かして物理を受けていく。特殊にめっぽう弱い+攻撃技に恵まれないのでブラッキーでやれになってしまう。ブラッキーと比べると速い+はたきおとすがあるくらい厳しい。。。&lt;/p&gt;
&lt;h2 id="_17"&gt;岩しぜんのめぐみ&lt;/h2&gt;
&lt;p&gt;しぜんのめぐみ/リーフブレード/はたきおとす/まもる&lt;/p&gt;
&lt;p&gt;ゴスのみ/いじっぱり/HA252/ようりょくそ(夢)&lt;/p&gt;
&lt;p&gt;メガリザYと強く見た型。&lt;/p&gt;
&lt;p&gt;リザードンに対して、まもるでメガ進化させて、次のターンにようりょくそ+しぜんのめぐみ岩で確殺する。&lt;/p&gt;
&lt;p&gt;補正あり全振りで威嚇込みでも確一。&lt;/p&gt;
&lt;p&gt;すばやさは無振りでも晴れ下なら、最速250抜き、最速スカーフ87抜きまで速い。&lt;/p&gt;
&lt;p&gt;リザを見たら積極的に出していく。Xだった場合は察し・・・（ダブルだとほとんどYだろう）&lt;/p&gt;
&lt;h1 id="_18"&gt;ニンフィア&lt;/h1&gt;
&lt;h2 id="_19"&gt;物理壁係&lt;/h2&gt;
&lt;p&gt;リフレクター/ハイパーボイス/願い事/みきり&lt;/p&gt;
&lt;p&gt;珠/ひかえめ/HB252/フェアリースキン(夢)&lt;/p&gt;
&lt;p&gt;ダメージ計算(無振り補正あり珠ハイパーボイス)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;無振りガブリアス 95%～115.3%&lt;/li&gt;
&lt;li&gt;無振りメガマンダ 97.6%～116.4%&lt;/li&gt;
&lt;li&gt;無振りランド 55.4%～66.4%&lt;/li&gt;
&lt;li&gt;H252ランド 46.4%～55.6%&lt;/li&gt;
&lt;li&gt;H252ボルト 48.9%～58.6%&lt;/li&gt;
&lt;li&gt;無振りメガガルーラ 41.6%～50.5%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;被ダメージ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A252ガブリアス地震 32.6%～38.6%&lt;/li&gt;
&lt;li&gt;A252ランド地震 35.6%～42% (38.6%～46%)&lt;/li&gt;
&lt;li&gt;A252ランドいわなだれ 19.3%～22.7%&lt;/li&gt;
&lt;li&gt;A252メガガルーラおんがえし 43%～50.9%+20.7%～25.2%&lt;/li&gt;
&lt;li&gt;C252ボルト10万 25.2%～29.7%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;受け切れないこと多そうで辛い。&lt;/p&gt;
&lt;h2 id="_20"&gt;物理壁改&lt;/h2&gt;
&lt;p&gt;リフレクター/ハイパーボイス/めいそう/みきりorまもる&lt;/p&gt;
&lt;p&gt;たべのこし/ずぶといorひかえめ/HB252/フェアリースキン(夢)&lt;/p&gt;
&lt;p&gt;改良版&lt;/p&gt;
&lt;p&gt;たべのこしで耐久up、正確はすぶといほうがいいかもしれない。&lt;/p&gt;
&lt;h2 id="_21"&gt;ただ殴るやつ&lt;/h2&gt;
&lt;p&gt;ハイパーボイス&lt;/p&gt;
&lt;p&gt;メガネ/ひかえめ/CSorHC/フェアリースキン(夢)&lt;/p&gt;
&lt;p&gt;多分いちばん強い。圧倒的暴力。&lt;/p&gt;
&lt;h2 id="_22"&gt;めざ炎&lt;/h2&gt;
&lt;p&gt;めざ炎/ハイパーボイス/&lt;/p&gt;
&lt;p&gt;ブイズは炎技に乏しいので貴重な炎技を入れていく型。&lt;/p&gt;
&lt;p&gt;目覚めるパワー炎の理想個体は以下の感じ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;３１－３１－３０－３０－３１－３０ &lt;/li&gt;
&lt;li&gt;３１－３０－３１－３０－３１－３０ &lt;/li&gt;
&lt;li&gt;３０－３１－３０－３０－３１－３０ &lt;/li&gt;
&lt;li&gt;３０－３０－３１－３０－３１－３０&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sは捨てるとして、CはUにしたいので３１－x－３１－３０－３１－xを狙うのが良さそう。&lt;/p&gt;
&lt;h1 id="_23"&gt;シャワーズ&lt;/h1&gt;
&lt;h2 id="_24"&gt;シンプルアタッカー&lt;/h2&gt;
&lt;p&gt;ねっとう/れいビ/シャドーボール/ねがいごとorてだすけ&lt;/p&gt;
&lt;p&gt;帯orオボン/ひかえめ/BC252/ちょすい&lt;/p&gt;
&lt;p&gt;BとDどっちがおいしいのか(オボン込み確3はダメージが41.6666%以下であれば可能、それを超えると確2)&lt;/p&gt;
&lt;p&gt;B252&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A252ガブリアス地震 45.3%～53.1%&lt;/li&gt;
&lt;li&gt;A252メガガルーラおんがえし 44.3%～52.6%+21.9%～26.3%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;D252&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C252特化メガネニンフィアハイパーボイス 58.5%～69.2%&lt;/li&gt;
&lt;li&gt;C252メガリザードンYねっぷう 30.7%～36.5%&lt;/li&gt;
&lt;li&gt;C252特化ギルガシャドボ 33.6%～40%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B特化しても確3耐えしないのでD252のほうが良い感じ。&lt;/p&gt;
&lt;h2 id="_25"&gt;ふうせん&lt;/h2&gt;
&lt;p&gt;ねっとう/れいビ/てだすけ/あくびorねがいごとor(他の変化技)&lt;/p&gt;
&lt;p&gt;ふうせん/ひかえめ/CD252/ちょすい&lt;/p&gt;
&lt;p&gt;ふうせんを持って、サンダースやブースターの後ろに控えさせる型。&lt;/p&gt;
&lt;p&gt;サンダースとサイクルさせることで、洗濯機あたりは完封できる。スカーフランドロスに対して高い圧力をかけていける。&lt;/p&gt;
&lt;p&gt;ダブルでは、シャワーズのてだすけが結構活躍したりしている。&lt;/p&gt;
&lt;h1 id="_26"&gt;グレイシア&lt;/h1&gt;
&lt;p&gt;かわいいけど厳しい。&lt;/p&gt;
&lt;p&gt;H252グレイシアダメージ計算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C252メガリザYねっぷう(晴れ) 126.7%～151.1%&lt;/li&gt;
&lt;li&gt;C252ヒードランねっぷう 74.4%～88.3%&lt;/li&gt;
&lt;li&gt;A252ランドロスじしん 37.2%～44.1%&lt;/li&gt;
&lt;li&gt;A252ランドロスいわなだれ 38.3%～45.3%&lt;/li&gt;
&lt;li&gt;A252メガガルーラおんがえし 45.9%～54.6% (22.6%～26.7%)&lt;/li&gt;
&lt;li&gt;C252特化ニンフィアハイパーボイス 44.1%～52.9%&lt;/li&gt;
&lt;li&gt;A252特化ファイアローフレアドライブ 88.3%～105.8%&lt;/li&gt;
&lt;li&gt;A252特化ファイアローブレバ 44.1%～52.9%&lt;/li&gt;
&lt;li&gt;A252特化鉢巻ファイアローブレバ 66.2%～78.4%&lt;/li&gt;
&lt;li&gt;A252メガミミロップドレパン 70.9%～84.8%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C252特化グレイシア吹雪&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;無振メガガル 42.2%～50.5%&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_27"&gt;自発的あられ&lt;/h2&gt;
&lt;p&gt;あられ/ふぶき/(あくび/てだすけ/れいとうビーム/凍える風)&lt;/p&gt;
&lt;p&gt;ひかえめ/HC252/ひかりのこな/ゆきがくれ&lt;/p&gt;
&lt;p&gt;躱して吹雪。&lt;/p&gt;</summary><category term="Pokemon"></category><category term="Buiz"></category></entry><entry><title>VimでインデントのTabをプラグインを使わずそれなりに可視化する方法</title><link href="https://muunyblue.github.io/b950ea26ca12daae142bd74dba4427c8.html" rel="alternate"></link><published>2016-01-15T06:55:50+09:00</published><updated>2016-01-15T06:55:50+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-01-15:b950ea26ca12daae142bd74dba4427c8.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/a91ba956cc612c7f2098d342e029cdc4.png" /&gt;&lt;/p&gt;
&lt;p&gt;ググるとプラグインを使う方法ばっかり出てきて、とりあえずプラグインを入れたけど、プラグインに依存しないでもそれなりにかっこよくできるのでそっちでいいやという話です。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;タブなどの見えない文字の可視化はlistを使うとできます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でひとまず見えますが、インデントは"^I"になって微妙です。インデント以外にもいろいろ可視化されて邪魔です。&lt;/p&gt;
&lt;p&gt;書式設定をするには、listcharを使います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="nb"&gt;listchars&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;tab&lt;/span&gt;:&lt;span class="p"&gt;|&lt;/span&gt;_
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;"| ¦ ┆ │ » ▸ &amp;gt;"あたりが使えそうです。&lt;/p&gt;
&lt;p&gt;色はSpecialKeyを設定することで変更できます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;hi&lt;/span&gt; SpecialKey ctremfg&lt;span class="p"&gt;=&lt;/span&gt;darkmagenta
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ubuntu 14.04のgnome-terminalを使っていてあまり目立ちすぎても邪魔なのでdarkmagentaに設定して使っています。お好みの色で使うと良いです。&lt;/p&gt;
&lt;p&gt;自分はvimrcに以下の設定を書いて使ってます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;hi&lt;/span&gt; SpecialKey ctermfg&lt;span class="p"&gt;=&lt;/span&gt;darkmagenta
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="nb"&gt;listchars&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;tab&lt;/span&gt;:¦_
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;プラグイン入れるよりお手軽でいい感じです。&lt;/p&gt;
&lt;p&gt;消したい時もあると思うのでトグルするときは&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でトグルできます、何かしらのキーにマッピングしておいてもいいかもです。&lt;/p&gt;
&lt;h3 id="_1"&gt;参考記事&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/2158305/is-it-possible-to-display-indentation-guides-in-vim" title="plugins - Is it possible to display Indentation guides in Vim? - Stack Overflow"&gt;plugins - Is it possible to display Indentation guides in Vim? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://usevim.com/2013/02/27/understanding-listchars/" title="Understanding 'listchars'"&gt;Understanding 'listchars'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/X___MOON___X/items/26d3f292537bad197f64" title="Vim - list表示オプションのトグルアラカルト - Qiita"&gt;Vim - list表示オプションのトグルアラカルト - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Vim"></category></entry><entry><title>docker-composeを使って最高の開発環境を手に入れた</title><link href="https://muunyblue.github.io/7d128c1d4a33165a8676d1650d8ff828.html" rel="alternate"></link><published>2016-01-27T05:12:02+09:00</published><updated>2016-01-27T05:12:02+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-01-13:7d128c1d4a33165a8676d1650d8ff828.html</id><summary type="html">&lt;p&gt;開発環境を作ってるの楽しい人種なので定期的に開発環境を見直したくなります。&lt;/p&gt;
&lt;p&gt;Dockerを使ってポータブルな開発環境を手に入れたので紹介します。&lt;/p&gt;
&lt;p&gt;開発用コンテナと各種データベースコンテナをdocker-composeを使って構築します。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;✗TOC&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#docker"&gt;Dockerポータブルな開発環境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;開発用コンテナ&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;ベース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;各言語&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ruby-rbenv"&gt;Ruby (rbenv)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-pyenv"&gt;Python (pyenv)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#golang-15"&gt;Golang (1.5)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nodejs-nvm"&gt;Node.js (nvm)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;データベース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;データベースコンテナ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;付録&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#dockerfile"&gt;Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#docker-composeyml"&gt;docker-compose.yml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="docker"&gt;Dockerポータブルな開発環境&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="https://slack-files.com/files-tmb/T02B7Q6RW-F0HAV7659-dfeef9aabc/screenshot_from_2015-12-25_16_17_28_360.png" /&gt;&lt;/p&gt;
&lt;p&gt;"docker-compose up -d"で開発環境が出来上がります、すごい。mysqlやredis他も使える、すごい。&lt;/p&gt;
&lt;p&gt;ディレクトリ構成は以下のようになっています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|-- data
|   |-- mongo
|   |-- mysql
|   |-- postgresql
|   |-- redis
|   `-- works
|-- docker-compose.yml
|-- Dockerfile
|-- id_rsa
`-- id_rsa.pub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;dataにコンテナ上の永続化したいデータをマウントしています。各データベースのデータと、worksは開発コンテナの~/worksをマウントしており作業はここで行い、作業中のデータは保存されるようになっています。&lt;/p&gt;
&lt;p&gt;動かすには、dockerとdocker-composeが入っている環境で以下のコマンドを打ちます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose build
$ docker-compose pull
$ docker-compose up -d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;新しい環境ではこのコマンドを実行して、二回目以降は最後のコマンドだけで立ち上がります。&lt;/p&gt;
&lt;p&gt;sshできるようになっているのでホストからsshすればDockerfileに書いてある内容の開発環境が出迎えてくれます。&lt;/p&gt;
&lt;p&gt;これで、どの開発機でもDockerとdocker-composeが入っていれば開発環境が立ち上がる体制が作れました。&lt;/p&gt;
&lt;p&gt;以下に詳しい内容を書いていきます。&lt;/p&gt;
&lt;h1 id="_1"&gt;開発用コンテナ&lt;/h1&gt;
&lt;p&gt;Dockerfileにsshで接続できる開発環境を記述します。含まれている内容は以下になります。&lt;/p&gt;
&lt;p&gt;ベース&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 14.04&lt;/li&gt;
&lt;li&gt;ssh&lt;/li&gt;
&lt;li&gt;zsh&lt;/li&gt;
&lt;li&gt;tmux&lt;/li&gt;
&lt;li&gt;dotfiles&lt;/li&gt;
&lt;li&gt;Vim&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各言語&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ruby (rbenv)&lt;/li&gt;
&lt;li&gt;Python (pyenv)&lt;/li&gt;
&lt;li&gt;Node.js (nvm)&lt;/li&gt;
&lt;li&gt;Golang (1.5)&lt;/li&gt;
&lt;li&gt;Clang (3.5)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;データベース&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQLite3&lt;/li&gt;
&lt;li&gt;各データベースのクライアントツール&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;普段の開発で雑多に使うため、複数言語+複数データベースの環境を富豪的に作っています。&lt;/p&gt;
&lt;p&gt;Webアプリを開発することが多いので、開発で使うお好みのポートをdocker-compose.ymlでポートフォワーディングしておきます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;
  &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5000:5000&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;8080:8080&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;8888:8888&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2222:22&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="sr"&gt;/works:/home/yymm/&lt;/span&gt;&lt;span class="n"&gt;works&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_2"&gt;ベース&lt;/h2&gt;
&lt;p&gt;OSはUbuntu 14.04、シェルはzsh、ターミナルマルチプレクサはtmux、エディタはVimです。&lt;/p&gt;
&lt;p&gt;基本的なパッケージもインストールしています。&lt;/p&gt;
&lt;p&gt;普段からTerminal上で開発することが多いのでVimを使っていて、プラグインにまみれているので、Vimはソースコードからビルドします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#&lt;span class="nv"&gt;vim&lt;/span&gt;
&lt;span class="nv"&gt;RUN&lt;/span&gt; &lt;span class="nv"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt; &lt;span class="nv"&gt;install&lt;/span&gt; &lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;mercurial&lt;/span&gt; &lt;span class="nv"&gt;gettext&lt;/span&gt; &lt;span class="nv"&gt;libncurses5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;  &lt;span class="nv"&gt;libperl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt; &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt; &lt;span class="nv"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt; &lt;span class="nv"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt; &lt;span class="nv"&gt;lua5&lt;/span&gt;.&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;liblua5&lt;/span&gt;.&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt; &lt;span class="nv"&gt;luajit&lt;/span&gt; &lt;span class="nv"&gt;libluajit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;.&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt;
&lt;span class="nv"&gt;RUN&lt;/span&gt; &lt;span class="nv"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;tmp&lt;/span&gt; \
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;clone&lt;/span&gt; &lt;span class="nv"&gt;https&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;github&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;vim&lt;/span&gt;.&lt;span class="nv"&gt;git&lt;/span&gt; \
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;vim&lt;/span&gt; \
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; .&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;configure&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;features&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;huge&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;perlinterp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;pythoninterp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;python3interp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;rubyinterp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;luainterp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;luajit&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;fail&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;missing&lt;/span&gt; \
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;make&lt;/span&gt; \
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;make&lt;/span&gt; &lt;span class="nv"&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;dotfilesは、各環境ごとにブランチで分けているので、os/ubuntu-dockerに切り替えて、bootstrap.shでブートストラップしてます。dotfilesのエイリアスを貼って、Vimプラグインをインストールしてくれます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# dotfiles
RUN git clone https://github.com/yymm/dotfiles.git ~/dotfiles \
    &amp;amp;&amp;amp; cd ~/dotfiles \
    &amp;amp;&amp;amp; git checkout os/ubuntu-docker \
    &amp;amp;&amp;amp; bash bootstrap.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sshできる環境を作るのにハマりどころがいくつかありますので以下の記事を参考にしました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/mopemope/items/495ab1f74bcbef0f88bb" title="Docker で開発環境も使い捨てにしよう！ - Qiita"&gt;Docker で開発環境も使い捨てにしよう！ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/examples/running_ssh_service/" title="Dockerizing an SSH service"&gt;Dockerizing an SSH service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;各言語&lt;/h2&gt;
&lt;p&gt;言語ごとのバージョンマネージャで使いそうなバージョンをドドっと入れておきます。&lt;/p&gt;
&lt;p&gt;必要なバージョンが増えたらDockerfileに追記してビルドし直します。&lt;/p&gt;
&lt;h3 id="ruby-rbenv"&gt;Ruby (rbenv)&lt;/h3&gt;
&lt;p&gt;rbenvをインストールして、使うバージョンをインストールします。"rbenv install"するときはまだパスが通っていないので直接叩きます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Ruby (rbenv)&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rbenv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;rbenv&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;rbenv&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export PATH=&amp;quot;$HOME/.rbenv/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;zshrc&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(rbenv init -)&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;zshrc&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rbenv&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="mf"&gt;2.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;rbenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;rbenv&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="mf"&gt;1.9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p551&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="python-pyenv"&gt;Python (pyenv)&lt;/h3&gt;
&lt;p&gt;個人的な事情で2系ではvirtualenvを使いたいので、virtualenvもインストールしています。&lt;/p&gt;
&lt;p&gt;pyenvをインストールして、使うバージョンをインストールします。"pyenv install"するときはまだパスが通っていないので直接叩きます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Python (virtualenv)&lt;/span&gt;
&lt;span class="n"&gt;USER&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;virtualenvwrapper&lt;/span&gt;
&lt;span class="n"&gt;USER&lt;/span&gt; &lt;span class="n"&gt;yymm&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export WORKON_HOME=$HOME/.virtualenvs&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;zshrc&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;source `which virtualenvwrapper.sh`&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;zshrc&lt;/span&gt;

&lt;span class="c1"&gt;# Python (pyenv)&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;yyuu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pyenv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;pyenv&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;zshrc&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;zshrc&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(pyenv init -)&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;zshrc&lt;/span&gt;
&lt;span class="n"&gt;USER&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libssl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;openssl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="c1"&gt;# need to install python 3.4 later&lt;/span&gt;
&lt;span class="n"&gt;USER&lt;/span&gt; &lt;span class="n"&gt;yymm&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;pyenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pyenv&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;pyenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pyenv&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="mf"&gt;2.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="golang-15"&gt;Golang (1.5)&lt;/h3&gt;
&lt;p&gt;gvmはDockerと相性が悪いらしく今のところ使えません。&lt;/p&gt;
&lt;p&gt;しょうがないので、ほしいバージョンを自分で入れるのが今は良いみたいです。&lt;/p&gt;
&lt;p&gt;golangはビルド済みのものをダウンロードすることができるので、ダウンロードして/usr/localに展開、環境変数を設定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Golang (1.5)&lt;/span&gt;
&lt;span class="n"&gt;USER&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;googleapis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;golang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;go1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;amd64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xzf&lt;/span&gt; &lt;span class="n"&gt;go1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;amd64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;go1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;amd64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;span class="n"&gt;USER&lt;/span&gt; &lt;span class="n"&gt;yymm&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export GOROOT=&amp;quot;/usr/local/go&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;zshrc&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export PATH=&amp;quot;$GOROOT/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;zshrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="nodejs-nvm"&gt;Node.js (nvm)&lt;/h3&gt;
&lt;p&gt;nvmをインストールして、使うバージョンをインストールします。&lt;/p&gt;
&lt;p&gt;globalで使うnpmパッケージがあるときはここでインストールしておきます。&lt;/p&gt;
&lt;p&gt;"nvm install"するときは、~/.nvm/nvm.shを実行する必要があるのでワンライナーにする必要があります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Node.js (nvm)
RUN curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash
ENV NODE_VERSION 5.4.0
ENV NVM_DIR /home/yymm/.nvm
RUN . ~/.nvm/nvm.sh &amp;amp;&amp;amp; nvm install $NODE_VERSION &amp;amp;&amp;amp; nvm alias default $NODE_VERSION &amp;amp;&amp;amp; npm install -g gulp yo hubot coffee-script browserify
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_4"&gt;データベース&lt;/h2&gt;
&lt;p&gt;SQLite3は開発コンテナにインストールして、その他のデータベースについてはクライアントを入れておきます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# SQLite&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt; &lt;span class="n"&gt;libsqlite3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="c1"&gt;# client&lt;/span&gt;
&lt;span class="n"&gt;RUN&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt; &lt;span class="n"&gt;postgresql&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="n"&gt;mongodb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_5"&gt;データベースコンテナ&lt;/h1&gt;
&lt;p&gt;docker-composeで開発サーバと連携したデータベースコンテナを立てます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql&lt;/li&gt;
&lt;li&gt;postgresql&lt;/li&gt;
&lt;li&gt;redis&lt;/li&gt;
&lt;li&gt;mongodb&lt;/li&gt;
&lt;li&gt;memcached&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を用意して、データはホストのdataディレクトリに永続化させます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;
  &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="sr"&gt;/mysql:/var/lib/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;
  &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;

&lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;postgres&lt;/span&gt;
  &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="sr"&gt;/postgresql:/var/lib/postgresql/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;
  &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="sr"&gt;/redis:/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
  &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;appendonly&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt;

&lt;span class="n"&gt;mongo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mongo&lt;/span&gt;
  &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="sr"&gt;/mongo:/data/&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;

&lt;span class="n"&gt;memcached&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;memcached&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;開発サーバからlinksでリンクすればよしなに使えます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;
  &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;5000:5000&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;8080:8080&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;8888:8888&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2222:22&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;postgres&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mongo&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;memcached&lt;/span&gt;
  &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="sr"&gt;/works:/home/yymm/&lt;/span&gt;&lt;span class="n"&gt;works&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;データベースコンテナについては以前に別の記事にまとめてます。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.muuny-blue.info/9f067d8d6df2d4b8c64fb4c084d6c208.html" title="docker-composeでデータベースコンテナを立てるときのTips"&gt;docker-composeでデータベースコンテナを立てるときのTips&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="_6"&gt;付録&lt;/h1&gt;
&lt;p&gt;実際に使ってるDockerfileとdocker-compose.ymlです。&lt;/p&gt;
&lt;h2 id="dockerfile"&gt;Dockerfile&lt;/h2&gt;
&lt;p&gt;
&lt;script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/gist-embed/2.4/gist-embed.min.js"&gt;&lt;/script&gt;
&lt;code data-gist-id="9d8fbbc52de8e500827a"&gt;&lt;/code&gt;
&lt;/p&gt;
&lt;h2 id="docker-composeyml"&gt;docker-compose.yml&lt;/h2&gt;
&lt;p&gt;
&lt;script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/gist-embed/2.4/gist-embed.min.js"&gt;&lt;/script&gt;
&lt;code data-gist-id="16cf829939aeecc5132d"&gt;&lt;/code&gt;
&lt;/p&gt;</summary><category term="Docker"></category></entry><entry><title>docker-composeでデータベースコンテナを立てるときのTips</title><link href="https://muunyblue.github.io/9f067d8d6df2d4b8c64fb4c084d6c208.html" rel="alternate"></link><published>2016-01-08T02:40:24+09:00</published><updated>2016-01-08T02:40:24+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-01-08:9f067d8d6df2d4b8c64fb4c084d6c208.html</id><summary type="html">&lt;p&gt;docker-composeを使うと連携する複数のコンテナを割と簡単に構築できます。&lt;/p&gt;
&lt;p&gt;アプリケーションコンテナや開発用コンテナからデータベースコンテナを扱う際に気になったことをまとめてみます。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;✗TOC&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;データベースの永続化&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#redis"&gt;redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mysql"&gt;mysql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#postgres"&gt;postgres&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mongo"&gt;mongo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;データベースを参照する方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#port"&gt;portの指定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="_1"&gt;データベースの永続化&lt;/h1&gt;
&lt;p&gt;データベース内のデータは永続化しないと消えてしまうので、残したい場合は明示的に永続化させておく必要があります。&lt;/p&gt;
&lt;p&gt;公式のイメージの設定例(redis, mysql, postgres, mongo)を書きます、ホストのディレクトリにマウントする方法(data volume)を採用しています。データコンテナを使う方法は書いていません。&lt;/p&gt;
&lt;h2 id="redis"&gt;redis&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://hub.docker.com/_/redis/" title="Docker Hub"&gt;Docker Hub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;/dataをマウントすると良いようです。docker-compose.ymlに以下のように記載します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;
  &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sr"&gt;/my/own/datadir:/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
  &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;appendonly&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;commandでデフォルトの起動コマンドを書き換えているのがポイントです、--appendonly yesがないとデータが作られないので注意です。&lt;/p&gt;
&lt;p&gt;マウントするホストのディレクトリは任意の場所にするのですが、相対パスが使えます。(Dockerのコマンドではダメだったような・・・)&lt;/p&gt;
&lt;p&gt;例えば、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  volumes:
    - ./data/redis:/data
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;という指定も問題ないです。&lt;/p&gt;
&lt;p&gt;GitLabで使っているsameersbn/redisでは、/var/lib/redisにデータがあり場所が違うのでそちらを使う場合はまた違う設定になるようです。&lt;/p&gt;
&lt;h2 id="mysql"&gt;mysql&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://hub.docker.com/_/mysql/" title="Docker Hub"&gt;Docker Hub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;/var/lib/mysqlをマウントします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;
  &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sr"&gt;/my/own/datadir:/var/lib/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;
  &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;環境変数にMYSQL_ROOT_PASSWORDを設定するのは必須で、MYSQL_USERやMYSQL_PASSWORDは必要な場合は設定します。&lt;/p&gt;
&lt;p&gt;vagrant+virtualbox上のDockerでmysqlを永続化したときパーミッションの問題が起こったのでそれに関しては以下の記事にまとめてます。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.muuny-blue.info/e9074df9d70cb6f30fa378e92edbb490.html" title="docker-composeでmysqlのデータ永続化したときのPermission Deniedの解決方法"&gt;docker-composeでmysqlのデータ永続化したときのPermission Deniedの解決方法&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="postgres"&gt;postgres&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://hub.docker.com/_/postgres/" title="Docker Hub"&gt;Docker Hub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;/var/lib/postgresql/dataをマウントします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;postgres&lt;/span&gt;
  &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sr"&gt;/my/own/datadir:/var/lib/postgresql/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="mongo"&gt;mongo&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://hub.docker.com/_/mongo/" title="Docker Hub"&gt;Docker Hub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;/data/dbをマウントします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mongo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mongo&lt;/span&gt;
  &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sr"&gt;/my/own/datadir:/data/&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_2"&gt;データベースを参照する方法&lt;/h1&gt;
&lt;p&gt;参照したいコンテナのdocker-compose.ymlの設定にlinksを追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;
  &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;postgresql&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mongo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;mongodb&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mongo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;linksはコンテナを他のサービスにリンクします、指定方法は2種類あって&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"&amp;lt;サービス&amp;gt;:&amp;lt;エイリアス&amp;gt;"&lt;/li&gt;
&lt;li&gt;"&amp;lt;サービス&amp;gt;"(エイリアスとしても使われる)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;複数個指定することもできます。&lt;/p&gt;
&lt;p&gt;linksを書くと、コンテナ内の/etc/hostsに指定したサービス名が追加されます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mf"&gt;172.17.0.6&lt;/span&gt;      &lt;span class="n"&gt;mongodb&lt;/span&gt;
&lt;span class="mf"&gt;172.17.0.4&lt;/span&gt;      &lt;span class="n"&gt;mysql&lt;/span&gt;
&lt;span class="mf"&gt;172.17.0.2&lt;/span&gt;      &lt;span class="nb"&gt;pos&lt;/span&gt;&lt;span class="n"&gt;tgresql&lt;/span&gt;
&lt;span class="mf"&gt;172.17.0.3&lt;/span&gt;      &lt;span class="n"&gt;redis&lt;/span&gt;
&lt;span class="mf"&gt;172.17.0.6&lt;/span&gt;      &lt;span class="n"&gt;mongo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DBにアクセスする場合は、ここにある名前を使ってアクセスするか、IPを直接指定すればできます。&lt;/p&gt;
&lt;p&gt;redis-cliで接続する例だと以下のようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ redis-cli -h redis
redis:6379&amp;gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;特に指定がなければデフォルトポートが使用されています。&lt;/p&gt;
&lt;h1 id="port"&gt;portの指定&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;公式のイメージでは&lt;/strong&gt;、portsの記載がなくても勝手にデフォルトポートがポートフォワーディングされるので、書かなくてもいい。&lt;/p&gt;
&lt;p&gt;公式のイメージ以外を使っている場合は明示的に指定する必要があるかもしれないです。&lt;/p&gt;
&lt;p&gt;redisの例だと、docker-compose.yml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;postgres&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;docker-compose psで確認すると&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt; Name                    Command               State   Ports&lt;/span&gt;
&lt;span class="nb"&gt;------------------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;postgres_1    /docker&lt;/span&gt;&lt;span class="nb"&gt;-&lt;/span&gt;&lt;span class="c"&gt;entrypoint&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;sh postgres   Up      5432/tcp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;特に指定がなくてもポートフォワーディングされています。&lt;/p&gt;</summary><category term="Docker"></category><category term="docker-compose"></category></entry><entry><title>docker-composeでmysqlのデータ永続化したときのPermission Deniedの解決方法</title><link href="https://muunyblue.github.io/e9074df9d70cb6f30fa378e92edbb490.html" rel="alternate"></link><published>2016-01-08T01:18:21+09:00</published><updated>2016-01-08T01:18:21+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2016-01-07:e9074df9d70cb6f30fa378e92edbb490.html</id><summary type="html">&lt;p&gt;vagrant+VirtualBox上(Ubuntu)で、公式のmysqlイメージを使って、コンテナを立ててデータを永続化(ホストにマウント(data volume))したときのマイナートラブルです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker --version
Docker version &lt;span class="m"&gt;1&lt;/span&gt;.9.1, build a34a1d5
$ docker-compose --version
docker-compose version &lt;span class="m"&gt;1&lt;/span&gt;.5.2, build 7240ff3
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="tldr"&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;Vagrant+VirtualBoxのVM上で動くDockerの話です。ホストでDocker動かしている場合は関係ないかもしれません。&lt;/p&gt;
&lt;p&gt;docker-composeでMySQLのデータ永続化をホストにマウントして使うときは、vagrantユーザーをvboxsfグループに入れておく必要があります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo gpasswd -a &lt;span class="nv"&gt;$USER&lt;/span&gt; vboxsf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;そうしないと、Permissionの問題でエラーが起こることがあるようです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;IOError: [Errno 13] Permission denied: &amp;#39;/home/vagrant/Dev/data/mysql/auto.cnf&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="mysql"&gt;MySQLコンテナのデータ永続化&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://hub.docker.com/_/mysql/" title="Docker Hub"&gt;Docker Hub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ドキュメントに書いてあるのはDockerの起動コマンド&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run --name some-mysql -v /my/own/datadir:/var/lib/mysql -e &lt;span class="nv"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;my-secret-pw -d mysql:tag
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これを、docker-composeのyamlに書き直すと下のようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;restart&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt;
  &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;
  &lt;span class="n"&gt;volumes&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sr"&gt;/my/own/datadir:/var/lib/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;
  &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pw&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでマウントできるので起動して、マウントしたディレクトリをtreeコマンドで見てみると以下のようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|-- datadir
|   |-- auto.cnf
|   |-- ib_buffer_pool
|   |-- ibdata1
|   |-- ib_logfile0
|   |-- ib_logfile1
|   |-- ibtmp1
|   |-- mysql [error opening dir]
|   |-- performance_schema [error opening dir]
|   `-- sys [error opening dir]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;「error opening dir」と不穏な空気です。&lt;/p&gt;
&lt;h1 id="docker-compose-build"&gt;docker-compose buildするとエラー&lt;/h1&gt;
&lt;p&gt;この状態でdocker-compose.yml内にあるbuildが必要なコンテナをビルドするとエラーになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/bin/docker-compose&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;load_entry_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;docker-compose==1.5.2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;docker-compose&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/lib/python2.7/dist-packages/compose/cli/main.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sys_dispatch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/lib/python2.7/dist-packages/compose/cli/docopt_command.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys_dispatch&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/lib/python2.7/dist-packages/compose/cli/docopt_command.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dispatch&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;global_options&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/lib/python2.7/dist-packages/compose/cli/main.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;171&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;perform_command&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command_options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/lib/python2.7/dist-packages/compose/cli/main.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
    &lt;span class="n"&gt;force_rm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb nb-Type"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--force-rm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/lib/python2.7/dist-packages/compose/project.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;235&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
    &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;no_cache&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force_rm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/lib/python2.7/dist-packages/compose/service.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;683&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
    &lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dockerfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/lib/python2.7/dist-packages/docker/api/build.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dockerfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/lib/python2.7/dist-packages/docker/utils/utils.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tar&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;arcname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recursive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/lib/python2.7/tarfile.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1994&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;
    &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;bltn_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Errno&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Permission&lt;/span&gt; &lt;span class="n"&gt;denied&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/home/vagrant/Dev/data/mysql/auto.cnf&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;やはりPermissionのエラーです。&lt;/p&gt;
&lt;p&gt;ビルド以外の動作でも起こりそうですが確認してません。&lt;/p&gt;
&lt;h1 id="mysql_1"&gt;マウントしたMySQLのディレクトリにアクセスできない&lt;/h1&gt;
&lt;p&gt;エラーメッセージからPermissionの問題だとわかったので、lsコマンドでdatadirの中を見てみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;drwxrwxr-x 5 vboxadd vboxsf      4096 Jan  7 06:49 .
drwxrwxr-x 7 vagrant vagrant     4096 Jan  7 07:25 ..
-rw-r----- 1 vboxadd vboxsf        56 Jan  7 05:08 auto.cnf
-rw-r----- 1 vboxadd vboxsf       694 Jan  7 06:19 ib_buffer_pool
-rw-r----- 1 vboxadd vboxsf  50331648 Jan  7 06:49 ib_logfile0
-rw-r----- 1 vboxadd vboxsf  50331648 Jan  7 05:08 ib_logfile1
-rw-r----- 1 vboxadd vboxsf  79691776 Jan  7 06:49 ibdata1
-rw-r----- 1 vboxadd vboxsf  12582912 Jan  7 06:49 ibtmp1
drwxr-x--- 2 vboxadd vboxsf      4096 Jan  7 05:08 mysql
drwxr-x--- 2 vboxadd vboxsf      4096 Jan  7 05:08 performance_schema
drwxr-x--- 2 vboxadd vboxsf     12288 Jan  7 05:08 sys
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;vboxsfグループである必要がありそうだとわかりましたので、現行のユーザー(vagrant)をvboxsfグループに追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo gpasswd -a &lt;span class="nv"&gt;$USER&lt;/span&gt; vboxsf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで、中身も見えて、ビルドも通ります。&lt;/p&gt;
&lt;p&gt;Vagrant+VirtualBox特有の問題な気がしますが、ホストで試した時もパーミッションの問題が起こった時はグループ足してあげれば治りそう。&lt;/p&gt;</summary><category term="Docker"></category><category term="docker-compose"></category></entry><entry><title>謝罪</title><link href="https://muunyblue.github.io/a2ce8f1706e52936dfad516c23904e3e.html" rel="alternate"></link><published>2015-12-21T01:48:53+09:00</published><updated>2015-12-21T01:48:53+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-12-21:a2ce8f1706e52936dfad516c23904e3e.html</id><summary type="html">&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/yymm6666/status/678745733403553792"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/yymm6666/status/678745846494588930"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;師走とは恐ろしいものです。&lt;/p&gt;</summary><category term="SushiCorp"></category></entry><entry><title>SushiCorpとは</title><link href="https://muunyblue.github.io/f9209b7866c9f69823201c1732cc8645.html" rel="alternate"></link><published>2015-12-07T00:46:36+09:00</published><updated>2015-12-07T00:46:36+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-12-07:f9209b7866c9f69823201c1732cc8645.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.adventar.org/calendars/942" title="Sushicorp Advent Calendar 2015 - Adventar"&gt;Sushicorp Advent Calendar 2015&lt;/a&gt;、7日目の記事です。&lt;/p&gt;
&lt;p&gt;SushiCorpについてぼく目線で簡単に紹介します。&lt;/p&gt;
&lt;h1 id="sushicorp"&gt;SushiCorpとは&lt;/h1&gt;
&lt;p&gt;ぼく(&lt;a href="https://twitter.com/yymm6666/" title="(く﹏も) .｡oO (λ)(@yymm6666)さん | Twitter"&gt;@yymm6666&lt;/a&gt;)と、&lt;a href="https://twitter.com/hashedrock" title="はっしゅろっく(@hashedrock)さん | Twitter"&gt;@hashedrock&lt;/a&gt;さんが&lt;del&gt;ノリで&lt;/del&gt;作りあげた任意団体です。&lt;/p&gt;
&lt;p&gt;技術といえば寿司なので寿司が食べたい気持ちで作られました。&lt;del&gt;ピザも肉も食べたいです&lt;/del&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;はっしゅろっく「名乗ると良いらしいよ」

ぼく「寿司食べたいです」

ぼく・はっしゅろっく「ｽｯｼｺｰﾌﾟ」
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;みたいな感じで設立したと記憶しています。&lt;del&gt;(覚えてない)&lt;/del&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;ｽｯｼｺｰﾌﾟ情報&lt;/h1&gt;
&lt;p&gt;SuhiCorpについての情報は、主にGitHubから確認できます。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/sushicorp"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/hashedrock" title="はっしゅろっく(@hashedrock)さん | Twitter"&gt;@hashedrock&lt;/a&gt;さんに作って頂いたホームページが秀逸です。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="http://sushicorp.github.io/#"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h1 id="_2"&gt;モチベーション&lt;/h1&gt;
&lt;p&gt;寿司が食べたいです。&lt;/p&gt;
&lt;p&gt;寿司を無限におごられるのが夢です。&lt;/p&gt;
&lt;h1 id="_3"&gt;活動&lt;/h1&gt;
&lt;p&gt;基本的にGitHubを見れば大体の活動の様子がわかります。時々社内勉強会を主催したりもしています。&lt;/p&gt;
&lt;h2 id="_4"&gt;社内勉強会を主催&lt;/h2&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/DevIPL"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;社内勉強会を主催したりしています。&lt;/p&gt;
&lt;p&gt;会社の若手を集めて、もくもくしたりLTしたり寿司を食べたりピザを食べたりしています。&lt;/p&gt;
&lt;p&gt;次回は外部から人が招待されたり営業の方が参戦したりと、徐々にｶｲｼｬで注目され始めています。この回はもしかしたら寿司をおごってもらえるかもしれないと思い一人で期待しています。&lt;/p&gt;
&lt;h2 id="_5"&gt;アドベントカレンダー&lt;/h2&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="http://www.adventar.org/calendars/942"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;勢いで始めました。&lt;/p&gt;
&lt;p&gt;頑張ります。&lt;/p&gt;
&lt;h1 id="_6"&gt;さいごに&lt;/h1&gt;
&lt;p&gt;HashiCorpと似た名前ですね。&lt;/p&gt;</summary><category term="SushiCorp"></category></entry><entry><title>Sushiコマンド</title><link href="https://muunyblue.github.io/0a7d7a81e8e3a20e4c34748e98ef45f6.html" rel="alternate"></link><published>2015-12-02T04:23:42+09:00</published><updated>2015-12-02T04:23:42+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-12-02:0a7d7a81e8e3a20e4c34748e98ef45f6.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.adventar.org/calendars/942" title="Sushicorp Advent Calendar 2015 - Adventar"&gt;Sushicorp Advent Calendar 2015&lt;/a&gt;、2日目の記事です。&lt;/p&gt;
&lt;p&gt;寿司のことを考えながらコマンドを打っているとつい"sushi"と打ってしまいますね。自分にはよくあります。&lt;/p&gt;
&lt;p&gt;というわけで、sushiとコマンドしてしまうと、寿司でかかれたSUSHIが流れてくるようにしました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/4bf05b48e4dc9b829d0180852766a1f4.gif" /&gt;&lt;/p&gt;
&lt;p&gt;めでたしめでたし。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;急遽寿司ネタをでっち上げたので雑な感じになりました。次回はｽｯｼｺｰﾌﾟとはについて書く予定にします。&lt;/p&gt;</summary><category term="Sushicorp"></category></entry><entry><title>IDCFクラウドで自分だけのHerokuを構築する</title><link href="https://muunyblue.github.io/c3daba8ba04565423e12eb8cb6237b46.html" rel="alternate"></link><published>2015-11-15T06:43:38+09:00</published><updated>2015-11-15T06:43:38+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-11-15:c3daba8ba04565423e12eb8cb6237b46.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.idcf.jp/cloud/cp/1st-present.html" title="IDCFクラウド１周年ありがとうキャンペーン！"&gt;IDCFクラウド１周年&lt;/a&gt;めでたいですね。&lt;/p&gt;
&lt;p&gt;この間からIDCFクラウドの最小インスタンスを借りて日々便利しています。&lt;/p&gt;
&lt;p&gt;個人用途で使っていたHerokuに乗せていたアプリをことごとくIDCFクラウドにのせ替えたので紹介します。個人用途なら最小インスタンスでも割りと快適です。&lt;/p&gt;
&lt;p&gt;その前に私の感じるIDCFの良さを紹介します。&lt;/p&gt;
&lt;h1 id="idcf"&gt;IDCFの良さ&lt;/h1&gt;
&lt;h2 id="_1"&gt;選んだ理由&lt;/h2&gt;
&lt;p&gt;子供のお小遣いで済みそうなくらい安いVPSを探していて最終的に、DigitalOceanとIDCFで迷っていました。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;IDCF&lt;/th&gt;
&lt;th&gt;DigitalOcean&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;料金/month&lt;/td&gt;
&lt;td&gt;500円&lt;/td&gt;
&lt;td&gt;$5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RAM&lt;/td&gt;
&lt;td&gt;1G&lt;/td&gt;
&lt;td&gt;1G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Storage&lt;/td&gt;
&lt;td&gt;20G&lt;/td&gt;
&lt;td&gt;20G&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;root&lt;/td&gt;
&lt;td&gt;あり&lt;/td&gt;
&lt;td&gt;あり&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;最小インスタンスの基本的なスペックの比較ですが、気のせいかもしれないですがDigitalOceanをメタっているふうに見えます。両者ともインスタンスを登録後すぐに起動できる点でも似てる..&lt;/p&gt;
&lt;p&gt;DigitalOceanのデメリットは為替の影響を受けるので大体700円くらいになってしまうのと、一番近いサーバでもシンガポールなのでアクセスが遅いことです。(あと、管理コンソールが英語)&lt;/p&gt;
&lt;p&gt;逆にDigitalOceanのメリットは選べるOSが充実しているところで、CoreOSを使えるのは面白いと思いました。&lt;/p&gt;
&lt;p&gt;結局IDCFにしたのですが、決め手はサーバが日本あるのでアクセスが速いことでした。&lt;/p&gt;
&lt;p&gt;用途が個人利用のアプリの運用や試運転なのでSSHでログインして作業することが多いのでコマンド１つ１つにいちいち遅延があるとすごくストレスなので、そういう場合サーバが日本にあるのはかなりメリットだと思いました。&lt;/p&gt;
&lt;h2 id="_2"&gt;使ってて良さを感じる点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;インスタンスが速攻で立ち上がる&lt;/li&gt;
&lt;li&gt;管理コンソールがわかりやすい&lt;/li&gt;
&lt;li&gt;グローバルIPに対して、ローカルIPからポートフォワーディングする仕組みが良い&lt;/li&gt;
&lt;li&gt;ロードバランサが使える&lt;/li&gt;
&lt;li&gt;Mackerelに公式対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="heroku"&gt;自分だけのHeroku構築&lt;/h1&gt;
&lt;p&gt;DokkuというOSSを使えば、IDCFでHerokuライクなPaaSを構築することができ、デプロイ先をHerokuからDokkuに変えるだけで手軽に移行できます。&lt;/p&gt;
&lt;h2 id="dokku"&gt;Dokku&lt;/h2&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/progrium/dokku"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;Dokkuはmini-herokuと書いてある通り、HerokuライクなPaaSエンジンです。&lt;/p&gt;
&lt;p&gt;Dockerを使っていて、アプリのビルドにはherokuishを使っているのでHerokuで動かしていたアプリは割りとすんなり動きます。&lt;/p&gt;
&lt;p&gt;しかし、miniというだけあってできないこともあるので、用法用量を守るのが大事です。&lt;/p&gt;
&lt;h2 id="_3"&gt;準備&lt;/h2&gt;
&lt;p&gt;IDCFの最小インスタンスでUbuntu14.04を立てます。&lt;/p&gt;
&lt;h2 id="_4"&gt;インストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget https://raw.githubusercontent.com/progrium/dokku/v0.4.4/bootstrap.sh
$ sudo &lt;span class="nv"&gt;DOKKU_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;v0.4.4 bash bootstrap.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで必要なパッケージ(dockerやnginxなど)も一緒にインストールされます。&lt;/p&gt;
&lt;h2 id="_5"&gt;設定&lt;/h2&gt;
&lt;p&gt;ホスト名とSSH公開鍵の設定をします。foo.barと&lt;name&gt;は適宜置き換えてください。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# echo &amp;quot;foo.bar&amp;quot; &amp;gt; /home/dokku/VHOST
# echo &amp;quot;foo.bar&amp;quot; &amp;gt; /home/dokku/HOSTNAME
# cat ~/.ssh/id_rsa.pub | sudo sshcommand acl-add dokku &amp;lt;name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ホスト名は使っているDNSサーバ側でAレコードの設定が必要です。&lt;/p&gt;
&lt;p&gt;IDCFクラウドの管理コンソールでファイアウォールとポートフォワーディングで22portを開けておきます。(22portをフルで開けるのは怖いのでファイアウォールでIPを制限すると良いです。)&lt;/p&gt;
&lt;h2 id="_6"&gt;使い方&lt;/h2&gt;
&lt;p&gt;Herokuにデプロイしていたアプリのgitリポジトリのremoteにdokkuを追加します。foo.barと&lt;project&gt;は適宜置き換えてください。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git remote add dokku dokku@foo.bar:&amp;lt;project&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;"git push dokku"するとdokkuにデプロイが始まり、Herokuで見たことあるような出力が返ってきます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dokku&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Counting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Delta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;compression&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Compressing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Writing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.81&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;KiB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Total&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reused&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Cleaning&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Building&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;herokuish&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Unable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;gliderlabs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nl"&gt;herokuish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;locally&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;latest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pulling&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gliderlabs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;herokuish&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;835&lt;/span&gt;&lt;span class="nl"&gt;c565d00e2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pulling&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;c5c659229e15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pulling&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;中略&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;359e311&lt;/span&gt;&lt;span class="nl"&gt;e765f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pull&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;359e311&lt;/span&gt;&lt;span class="nl"&gt;e765f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Already&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Digest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;aaa5dd65a7f90a47f2bb1266375b27d4f273ff94495527949536c9e944a871a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Downloaded&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;newer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gliderlabs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nl"&gt;herokuish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Adding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BUILD_ENV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;中略&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DOKKU_SCALE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Defaulting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;single&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DOKKU_SCALE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generated&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;flight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;checks&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;efficient&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;downtime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deployments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CHECKS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;See&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//progrium.viewdocs.io/dokku/checks-examples.md for examples&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;CHECKS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;simple&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Waiting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;successful&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;=====&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//0.0.0.0:5000/&lt;/span&gt;
&lt;span class="o"&gt;=====&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Creating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dokku&lt;/span&gt;&lt;span class="o"&gt;/&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&lt;/span&gt;&lt;span class="n"&gt;VHOST&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Configuring&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Creating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Reloading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;=====&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;deployed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//&amp;lt;project&amp;gt;.foo.bar&lt;/span&gt;

&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dokku&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_7"&gt;さらに詳しくは&lt;/h2&gt;
&lt;p&gt;以前にブログにまとめたものがあります。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.muuny-blue.info/9375084629cd055e6b819053bc9714de.html" title="IDCFクラウドの一番安いのでDokkuを使う"&gt;IDCFクラウドの一番安いのでDokkuを使う&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IDCF + お名前.com + Dokkuの構成を作っています。&lt;/p&gt;
&lt;p&gt;あと、Dokkuを構築する際にDockerを使っているのでSwap領域を作っておいたほうがいいです、そのへんの基本的な設定も以前にブログにまとめたので参考にどうぞ。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.muuny-blue.info/50982fb2f2cfa186d335310461dfa2be.html" title="IDCFクラウド借りました"&gt;IDCFクラウド借りました&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="_8"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;HerokuからIDCF+Dokkuにいくつかのアプリをのせ替えて使っていますが、今のところ快適に動いていますのでおすすめできるかなと思います。&lt;/p&gt;
&lt;p&gt;しかし、HerokuのAddonをガッツリ使っていたりなど、Dokkuではどうしようもない部分もあるので、Herokuを捨てられる銀の弾丸ではないのでご注意を。&lt;/p&gt;</summary><category term="IDCF"></category><category term="Dokku"></category></entry><entry><title>toxを使って複数のPythonバージョンでCIしてカバレッジする方法</title><link href="https://muunyblue.github.io/9523147e5a6707baf674941812ee5c94.html" rel="alternate"></link><published>2015-11-12T07:43:08+09:00</published><updated>2015-11-12T07:43:08+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-11-12:9523147e5a6707baf674941812ee5c94.html</id><summary type="html">&lt;p&gt;Pythonのプロジェクトでtoxを使って複数PythonバージョンでTravisCIしてCoverallsを使う方法です。&lt;/p&gt;
&lt;p&gt;手元ではPython3.5で開発して、2.xでも動くのかな？Coverageは大丈夫かな？という想いを全てをgit pushにのせていくスタイルです。&lt;/p&gt;
&lt;h1 id="tox-travisci"&gt;tox + TravisCI&lt;/h1&gt;
&lt;p&gt;toxを使ってPython2.7, 3.3, 3.4でテストする".travis.yml"と"tox.ini"です。&lt;/p&gt;
&lt;p&gt;testsディレクトリにテストが用意してあって、テストツールにはpytestを使っています。&lt;/p&gt;
&lt;p&gt;.travis.yml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;TOXENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;py27&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;TOXENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;py33&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;TOXENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;py34&lt;/span&gt;

&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;tox&lt;/span&gt; 

&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tox&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;tox.ini&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tox]&lt;/span&gt;
&lt;span class="na"&gt;envlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;py{27,33,34}&lt;/span&gt;

&lt;span class="k"&gt;[testenv]&lt;/span&gt;
&lt;span class="na"&gt;basepython&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="na"&gt;py27: python2.7&lt;/span&gt;
    &lt;span class="na"&gt;py33: python3.3&lt;/span&gt;
    &lt;span class="na"&gt;py34: python3.4&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="na"&gt;pytest&lt;/span&gt;
&lt;span class="na"&gt;commands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="na"&gt;py.test tests&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;TravisCIでリポジトリを有効してpushするとそれぞれのPythonでテストが始まります。&lt;/p&gt;
&lt;p&gt;PyPIに登録してあるパッケージを、toxでテストするとShields.ioでいい感じのバッジを作れます。&lt;/p&gt;
&lt;p&gt;&lt;a href=""&gt;&lt;img alt="PyPI" src="https://img.shields.io/pypi/pyversions/Django.svg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;READMEに貼ってあるとわかりやすくて良い感じです。&lt;/p&gt;
&lt;h1 id="travisci-coveralls"&gt;TravisCI + Coveralls&lt;/h1&gt;
&lt;p&gt;TravisCIのテストが成功したときCoverallsにカバレッジさせるようにします。&lt;/p&gt;
&lt;p&gt;PythonにはCoverallsのパッケージがあるのでこれを使うことで.travis.ymlに設定を追加するだけでCoverallsを使えます。&lt;/p&gt;
&lt;p&gt;Coverallsの公式ドキュメントでも紹介されています(&lt;a href="https://coveralls.zendesk.com/hc/en-us/articles/201342869-Python" title="Python – Coveralls"&gt;Python – Coveralls&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/coagulant/coveralls-python"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;Coverallsに対応した.travis.ymlの内容です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;TOXENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;py27&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;TOXENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;py33&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;TOXENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;py34&lt;/span&gt;

&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;tox&lt;/span&gt; 
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;coveralls&lt;/span&gt;

&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;tox&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;coverage&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;coverage&lt;/span&gt; &lt;span class="n"&gt;report&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;

&lt;span class="n"&gt;after_success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;coveralls&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Coverallsでリポジトリを有効にしておけば、TravisCIで成功後にCoverallsが走ります。&lt;/p&gt;
&lt;h1 id="_1"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;ローカルでtoxの用意したり、カバレッジを確認するのが面倒な方にはこの方法いいかもしれません。&lt;/p&gt;</summary><category term="Python"></category><category term="CI"></category></entry><entry><title>PyPIにパッケージを登録する必要最低限の流れ</title><link href="https://muunyblue.github.io/f4d87ed3b0dbf9c79746d00cedbb5e78.html" rel="alternate"></link><published>2015-11-13T09:42:48+09:00</published><updated>2015-11-13T09:42:48+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-11-12:f4d87ed3b0dbf9c79746d00cedbb5e78.html</id><summary type="html">&lt;p&gt;目次&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;1. 必要なファイル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-setuppy"&gt;2. setup.pyの内容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-pypi"&gt;3. PyPIへの登録&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;まとめ&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;参考記事&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;PyPIにパッケージを登録してみたので流れをまとめました、詳しい説明は抜きで必要最低限のことだけをまとめてあります。&lt;/p&gt;
&lt;p&gt;主にPyPAの公式sampleprojectを参考にしています。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/pypa/sampleproject"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h1 id="1"&gt;1. 必要なファイル&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── MANIFEST.in
├── README.rst
├── setup.cfg
├── setup.py
├── XXX
│   ├── __init__.py
│   └── XXX.py
└── tests
　   ├── __init__.py
　   └── test_XXX.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;※XXXは適宜置き換えます&lt;/p&gt;
&lt;p&gt;setup.cfgは以下のように書いておきます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[bdist_wheel]&lt;/span&gt;
&lt;span class="na"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;MANIFEST.inはPyPIにアップロードするファイル書きます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="nv"&gt;README&lt;/span&gt;.&lt;span class="nv"&gt;rst&lt;/span&gt;
&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="nv"&gt;setup&lt;/span&gt;.&lt;span class="nv"&gt;cfg&lt;/span&gt;
&lt;span class="nv"&gt;recursive&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="nv"&gt;tests&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;README.rstとなっているのでreStructuredTextです。PyPIでMarkdownは使えません。&lt;/p&gt;
&lt;h1 id="2-setuppy"&gt;2. setup.pyの内容&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools.command.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;TestCommand&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;codecs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;

&lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;README.rst&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PyTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCommand&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pytest-args=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Arguments to pass to py.test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize_options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;TestCommand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize_options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pytest_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;finalize_options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;TestCommand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finalize_options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_suite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_tests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;#import here, cause outside the eggs aren&amp;#39;t loaded&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
        &lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pytest_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sample&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://github.com/foo/sample&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo.bar@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MIT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;py_modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sample&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;classifiers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="c1"&gt;# How mature is this project? Common values are&lt;/span&gt;
        &lt;span class="c1"&gt;#   3 - Alpha&lt;/span&gt;
        &lt;span class="c1"&gt;#   4 - Beta&lt;/span&gt;
        &lt;span class="c1"&gt;#   5 - Production/Stable&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Development Status :: 3 - Alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;# Indicate who your project is intended for&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Intended Audience :: Developers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;License :: OSI Approved :: MIT License&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 2.7&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 3.3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Programming Language :: Python :: 3.4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sample&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;contrib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;docs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tests&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;peppercorn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;extras_require&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;check-manifest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;coverage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;tests_require&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pytest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;cmdclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PyTest&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;sample=sample:main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;※sampleというパッケージになっているので適宜置き換えます&lt;/p&gt;
&lt;p&gt;特筆すべき内容&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;README.rstをPyPIのトップに表示&lt;/li&gt;
&lt;li&gt;"python setup.py test"でテストが走る&lt;/li&gt;
&lt;li&gt;モジュール名の指定(py_modules)&lt;/li&gt;
&lt;li&gt;コンソールアプリのコマンド追加(entry_points)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;他は基本的なsetup.pyの内容です。&lt;/p&gt;
&lt;p&gt;setupの引数の、name,description,url,authorなどの内容は適宜書き換えて使います。&lt;/p&gt;
&lt;h1 id="3-pypi"&gt;3. PyPIへの登録&lt;/h1&gt;
&lt;p&gt;(1) &lt;a href="https://pypi.python.org/pypi" title="PyPI - the Python Package Index : Python Package Index"&gt;PyPI - the Python Package Index : Python Package Index&lt;/a&gt;でユーザーを作ります。&lt;/p&gt;
&lt;p&gt;(2) ~/.pypircを作成します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[distutils]&lt;/span&gt;
&lt;span class="na"&gt;index-servers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
   &lt;span class="na"&gt;pypi&lt;/span&gt;

&lt;span class="k"&gt;[pypi]&lt;/span&gt;
&lt;span class="na"&gt;username: {Username}&lt;/span&gt;
&lt;span class="na"&gt;password: {Password}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(3) setup.pyの内容を確認します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python setup.py check -r -s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(4) PyPIに登録します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python setup.py register
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(5) パッケージをアップロードします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;sdist&lt;/span&gt; &lt;span class="n"&gt;bdist_wheel&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;コマンドを実行するにあたって必要なパッケージがいくつかあるので適宜インストールが必要です。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;必要最低限の情報で説明はないので、PyPIについて詳しいことは他のブログエントリや公式のドキュメントを参照するといいです。&lt;/p&gt;
&lt;h2 id="_2"&gt;参考記事&lt;/h2&gt;
&lt;p&gt;PyPIについて多くのことはこちらのスライドに学びました。わかりやすかったです。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://tell-k.github.io/pyconjp2015/#1"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>Githubリポジトリにいっぱいバッジをつける方法</title><link href="https://muunyblue.github.io/1ae5168b14a6091d623291902ac36e7c.html" rel="alternate"></link><published>2015-11-12T04:59:12+09:00</published><updated>2015-11-12T04:59:12+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-11-12:1ae5168b14a6091d623291902ac36e7c.html</id><summary type="html">&lt;p&gt;&lt;a href="https://travis-ci.org/yymm/mdx_embedly"&gt;&lt;img alt="Build Status" src="https://travis-ci.org/yymm/mdx_embedly.svg?branch=master" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://coveralls.io/github/yymm/mdx_embedly?branch=master"&gt;&lt;img alt="Coverage Status" src="https://coveralls.io/repos/yymm/mdx_embedly/badge.svg?branch=master&amp;amp;service=github" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/mdx_embedly"&gt;&lt;img alt="PyPI" src="https://img.shields.io/pypi/v/mdx_embedly.svg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/mdx_embedly"&gt;&lt;img alt="PyPI" src="https://img.shields.io/pypi/pyversions/mdx_embedly.svg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/mdx_embedly"&gt;&lt;img alt="PyPI" src="https://img.shields.io/pypi/wheel/mdx_embedly.svg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/mdx_embedly"&gt;&lt;img alt="PyPI" src="https://img.shields.io/pypi/format/mdx_embedly.svg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/mdx_embedly"&gt;&lt;img alt="PyPI" src="https://img.shields.io/pypi/implementation/mdx_embedly.svg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/mdx_embedly"&gt;&lt;img alt="PyPI" src="https://img.shields.io/pypi/status/mdx_embedly.svg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/mdx_embedly"&gt;&lt;img alt="PyPI" src="https://img.shields.io/pypi/dm/mdx_embedly.svg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://opensource.org/licenses/MIT"&gt;&lt;img alt="GitHub license" src="https://img.shields.io/badge/license-MIT-blue.svg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pythonのリポジトリつけられそうなバッジです。&lt;/p&gt;
&lt;p&gt;主に、&lt;a href="http://shields.io/" title="Shields.io: Quality metadata badges for open source projects"&gt;Shields.io&lt;/a&gt;で作っています。&lt;/p&gt;
&lt;p&gt;すぐに作れるので紹介します。&lt;/p&gt;
&lt;h1 id="shieldsio"&gt;Shields.io&lt;/h1&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="http://shields.io"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;さまざまなバッジが用意されていて、しかもURLを適切に指定するとメタデータを取ってきてバッジの内容に反映してくれます。便利。かなり便利。&lt;/p&gt;
&lt;p&gt;例えば、PyPIのバッジだと以下のように作ります。(試しにDjango)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/386278bda4c28eaeab14f3689d298a22.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Djangoの最新バージョンのPyPIバッジがさくっと作れます。&lt;/p&gt;
&lt;p&gt;Shields.ioは、Node.js,Ruby,Rustなどのパッケージマネージャのバッジ、さまざまなCIサービスやカバレッジサービスに対応しています。&lt;/p&gt;
&lt;p&gt;バッジを作ったらMarkdownとreStructuredTextの形式でコピーできるので、READMEにペチペチ貼り付けるだけでokです。&lt;/p&gt;
&lt;p&gt;内容はサービスと連携されているので勝手に随時更新されます。&lt;/p&gt;
&lt;p&gt;あと、バッチがなかったらShields.ioのページの下のほうで自由に作れます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.gyazo.com/535f02ef901aa3f59785bd6f5a7ced45.gif" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://img.shields.io/badge/Benri-Benri-green.svg" /&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;Sheilds.ioを使うとバッジを量産できます。&lt;/p&gt;
&lt;p&gt;そして、GitHubリポジトリにバッジいっぱいあると謎の満足感を得られます。&lt;/p&gt;</summary><category term="GitHub"></category><category term="Python"></category></entry><entry><title>ASUS Zenfone2 laserの裏蓋を開ける方法</title><link href="https://muunyblue.github.io/09ab23b6b607496f095feed7aaa1259b.html" rel="alternate"></link><published>2015-11-12T05:39:35+09:00</published><updated>2015-11-12T05:39:35+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-11-12:09ab23b6b607496f095feed7aaa1259b.html</id><summary type="html">&lt;p&gt;目次&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;裏蓋が開かない&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sdsim"&gt;SDカードとSIMをどこに入れるのか&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;IIJmioで音声通話付きSIMとZenfone2 lazerを購入しました。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/yymm6666/status/664422645010579456"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;裏蓋が開かない問題と、どこにSDカードとSIMを挿せば良いのか迷ったので参考のためここに記しておきます。&lt;/p&gt;
&lt;h1 id="_1"&gt;裏蓋が開かない&lt;/h1&gt;
&lt;p&gt;ググると&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;右下のところから普通に開くよ！&lt;/li&gt;
&lt;li&gt;爪が長かったら開くよ！&lt;/li&gt;
&lt;li&gt;電源付近は開きやすいよ！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;とでてきますが、個体差があるのか全然開きません。&lt;/p&gt;
&lt;p&gt;ぼくは爪がやられました。&lt;/p&gt;
&lt;p&gt;そこで最強の方法が、&lt;strong&gt;財布に入ってる薄いけど割りと頑丈なカードをどこでも良いのでちょっと隙間があるところに刺す作戦&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;こういう感じです。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/yymm6666/status/664434394682134528"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;微妙に隙間がある箇所がきっとあるので刺さったらそのままぐるーっと隙間を広げるように一周すると開きました。&lt;/p&gt;
&lt;p&gt;B−PUMPのカードで試していますが、フィルムで挟んで保護してあるタイプのカードが薄さと強度の面で良いかもしれません。&lt;/p&gt;
&lt;p&gt;お試しあれ。&lt;/p&gt;
&lt;h1 id="sdsim"&gt;SDカードとSIMをどこに入れるのか&lt;/h1&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/yymm6666/status/664602679096664064"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SDカードは写真の向きで上の層にぐっと入れます、結構差し込みます&lt;/li&gt;
&lt;li&gt;SIMはSDカードを入れた真下に金属面を下にして、切れ込みのある方を先端にして差し込みます&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Phone"></category></entry><entry><title>PelicanとPython-MarkdownでEmbedlyが使える便利なExtensionを作った</title><link href="https://muunyblue.github.io/5747a0021eb349e9c8d3667cf1a5e9ec.html" rel="alternate"></link><published>2015-11-12T00:55:58+09:00</published><updated>2015-11-12T00:55:58+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-11-11:5747a0021eb349e9c8d3667cf1a5e9ec.html</id><summary type="html">&lt;p&gt;&lt;a href="http://blog.muuny-blue.info/e38e37a99f7de1f45d169efcdb288dd1.html" title="埋め込み機能がほしい"&gt;埋め込み機能がほしい&lt;/a&gt;ので作りました。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/yymm/mdx_embedly"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;書式はよくあるembedの形式です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;URL&lt;span class="p"&gt;}:&lt;/span&gt;embed&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;やたらに便利です。&lt;/p&gt;
&lt;h1 id="pelican"&gt;Pelicanで使う方法&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install mdx_embedly
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pelicanconf.pyのMD_EXTENSIONSに'embedly'を追加すると使えます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MD_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;embedly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="pythonmarkdown"&gt;PythonのMarkdownを拡張する方法&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install mdx_embedly
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;markdownの引数のextensionsに'embedly'を追加すると使えます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[&lt;/span&gt;&lt;span class="si"&gt;{URL}&lt;/span&gt;&lt;span class="s2"&gt;:embed]&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;embedly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="embedly"&gt;Embedly&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://embed.ly/" title="Embedly makes your content more engaging and easier to share | Embedly"&gt;Embedly&lt;/a&gt;のCardsを使っています。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="http://embed.ly/cards"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h1 id="-gist"&gt;例外 - gist&lt;/h1&gt;
&lt;p&gt;gistはgist-embedが便利なのでこちらを使用しています。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/blairvanderhoof/gist-embed"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;便利です。&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/gist-embed/2.4/gist-embed.min.js"&gt;&lt;/script&gt;
&lt;code data-gist-id="726df7f0e4ed48e54a06"&gt;&lt;/code&gt;
&lt;/p&gt;
&lt;h1 id="_1"&gt;ギャラリー&lt;/h1&gt;
&lt;p&gt;むやみやたらに便利な様子です。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/yymm6666/status/664368716809834496"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="http://www.amazon.co.jp/TransBook-T100TAM-10-1inch-Microsoft-T100TAM-B-64S-/dp/B00UL73PT0/ref=sr_1_6?ie=UTF8&amp;amp;qid=1447232716&amp;amp;sr=8-6&amp;amp;keywords=asus"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://www.youtube.com/watch?v=EXYTyVR1Eac"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="http://www.slideshare.net/suhasmallya/sample-slidesharepresentation"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://speakerdeck.com/samlambert/the-mysql-ecosystem-at-github-2015"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;</summary><category term="Python"></category><category term="Markdown"></category><category term="Pelican"></category></entry><entry><title>Chrome46でDuet Displayの表示が乱れるのを治す方法</title><link href="https://muunyblue.github.io/c9bc734c0663a142b7bec265098f8dbf.html" rel="alternate"></link><published>2015-10-22T01:04:42+09:00</published><updated>2015-10-22T01:04:42+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-10-22:c9bc734c0663a142b7bec265098f8dbf.html</id><summary type="html">&lt;p&gt;Duet Displayを愛用しているのですが、Duet Display内のChromeの表示がv46で乱れる現象がありました。&lt;/p&gt;
&lt;p&gt;例えばGIGAZINEを開くとこうなってしまいました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="GIGAAAAAAZINE" src="https://pbs.twimg.com/media/CRPOH6EUwAALixr.png" /&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;治し方&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://help.duetdisplay.com/faq/when-chrome-is-dragged-over-to-the-ipad-it-distorts-the-website" title="Duet Display — When Chrome is dragged over to the iPad it distorts the website."&gt;Duet Display — When Chrome is dragged over to the iPad it distorts the website.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;公式のFAQに治す方法が書いてありました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Chromeの設定を開く&lt;br /&gt;
2.下の方にある「 詳細設定を表示」をクリック&lt;/li&gt;
&lt;li&gt;システムの「ハードウェアアクセラレーションが使用可能な場合は使用する」のチェックを外す&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;この方法以外はChrome45に戻す方法が書いてありますが、めんどくさいので試してません。&lt;/p&gt;
&lt;p&gt;これで快適にDuetできるように戻りました。めでたしめでたし。&lt;/p&gt;</summary><category term="Chrome"></category><category term="Duet Display"></category></entry><entry><title>pyenvとvenvでPython3開発環境を整える</title><link href="https://muunyblue.github.io/b3ddb7c5b10be95dbc3f9152c58becce.html" rel="alternate"></link><published>2015-11-11T08:53:52+09:00</published><updated>2015-11-11T08:53:52+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-10-21:b3ddb7c5b10be95dbc3f9152c58becce.html</id><summary type="html">&lt;p&gt;Python3.3からvenvというのが入ってきてvirtualenvを置き換えられるという感じでしたが、日本語情報では色々不便という情報が多かったのでなんとなく敬遠していました。しかし、Python3.4からensurepipという便利なものがvenvで使えるようになって、煩わしさがなくなっているようなので使ってみました。&lt;/p&gt;
&lt;p&gt;※Python3.4以上を対象にしています。&lt;/p&gt;
&lt;h1 id="pyenv"&gt;pyenv&lt;/h1&gt;
&lt;p&gt;使っているOSのパッケージマネージャでは新しいPythonはすぐにインストール出来ないので、Pythonのバージョンマネージャが必要です。&lt;/p&gt;
&lt;p&gt;そこでpyenvです。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://github.com/yyuu/pyenv"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;インストールは&lt;a href="https://github.com/yyuu/pyenv#installation" title="yyuu/pyenv"&gt;README&lt;/a&gt;にまとまっていますのでそちらを参考にするといいです。&lt;/p&gt;
&lt;p&gt;インストール可能なPythonの一覧を確認して、3.5と3.4をインストールしてみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv install -l
$ pyenv install &lt;span class="m"&gt;3&lt;/span&gt;.5.0
$ pyenv install &lt;span class="m"&gt;3&lt;/span&gt;.4.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;インストールしたPythonは"pyenv global"コマンドで使えます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv global &lt;span class="m"&gt;3&lt;/span&gt;.5.0
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;バージョンが変わらない問題&lt;/p&gt;
&lt;p&gt;自分はMacOSXで起こりました。他のOSでも起こるかもしれません。&lt;br /&gt;
MaOSXの場合、brewでインストールしたPythonが優先されてしまうのが問題みたいです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ brew uninstall python&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;brewのpythonを消したくない場合はやむを得なくPATHを書き換える方法があります。(.bashrcや.zshrcに書く)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PATH=/Users/&amp;lt;USER&amp;gt;/.pyenv/shims:$PATH&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;大変暴力的なのでお勧めできませんが、これで共存できます。&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="venv"&gt;venv&lt;/h1&gt;
&lt;p&gt;パッケージはグローバルにインストールするのではなくプロジェクトごとに独立してインストールして使いたいです、そういう場合にvenvを使います。&lt;/p&gt;
&lt;p&gt;さっきglobalに設定した3.5.0を使ってやってみます。venvはPython3.3以降だとデフォルトで使用可能です。&lt;/p&gt;
&lt;p&gt;venvはpyvenvコマンドから実行できます。プロジェクトを作成してvenvを初期化し有効化します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir venv_test
$ pyvenv venv_test
$ &lt;span class="nb"&gt;source&lt;/span&gt; venv_test/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv_test&lt;span class="o"&gt;)&lt;/span&gt; $ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;venvが有効化されると"([evn名]) "がシェルの先頭につきます。&lt;/p&gt;
&lt;p&gt;この状態でpipもこの環境内のみで有効なpipなので必要なパッケージをインストールして開発を開始できます。&lt;/p&gt;
&lt;p&gt;venvを無効化する場合は、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;するだけです。&lt;/p&gt;
&lt;h1 id="_1"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;Python3.5が便利そうという情報を聞いて、Python3の環境構築をまとめてみました。&lt;/p&gt;
&lt;p&gt;venvはデフォルト使えるのでインストールの手間などが無く便利だと思っています、言語標準になってくれて良さを感じます。&lt;/p&gt;
&lt;p&gt;これでpython2+virtualenvを捨ててpython3+venvライフを送れそうです。&lt;/p&gt;
&lt;p&gt;ensurepipの詳しいことなどは以下の参考記事を見ると良いかもしれません。&lt;/p&gt;
&lt;h1 id="_2"&gt;参考記事&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/venv.html" title="28.3. venv — Creation of virtual environments — Python 3.5.0 documentation"&gt;28.3. venv — Creation of virtual environments — Python 3.5.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kainokikaede.hatenablog.com/entry/2014/04/04/162125" title="Python の venv と ensurepip とを「正しく」使う - KainokiKaede's diary"&gt;Python の venv と ensurepip とを「正しく」使う - KainokiKaede's diary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pelican.aodag.jp/python34noensurepipsoretopyvenvnogeng-xin.html" title="Python3.4のensurepip(それとpyvenvの更新)"&gt;Python3.4のensurepip(それとpyvenvの更新)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category></entry><entry><title>最近やりたさが高まってきていること</title><link href="https://muunyblue.github.io/80a9efd37c62cbdee2351192983a43d6.html" rel="alternate"></link><published>2015-10-19T08:31:49+09:00</published><updated>2015-10-19T08:31:49+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-10-19:80a9efd37c62cbdee2351192983a43d6.html</id><summary type="html">&lt;p&gt;モチベーションを保つための個人的なメモである。&lt;/p&gt;
&lt;h1 id="cyclejs"&gt;Cycle.js&lt;/h1&gt;
&lt;p&gt;Vue.jsで書いていたアプリを置き換えたい。&lt;/p&gt;
&lt;p&gt;Cycle.jsが肌に合わない場合はReact.jsを検討しようと思ってる。&lt;/p&gt;
&lt;h1 id="electron"&gt;Electron&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Windowsでビルドする方法とか&lt;/li&gt;
&lt;li&gt;Golangで書いたサーバを内部で動かせるかどうかとか(無理だったらNode.jsで書き直す)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mainyaa/gulp-electron" title="mainyaa/gulp-electron"&gt;mainyaa/gulp-electron&lt;/a&gt;とか使いたい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Electron勉強会行ったけどあまり成果出してないのなんかアレな気持ちなので何か作りたい。&lt;/p&gt;
&lt;h1 id="google-extension"&gt;Google Extension&lt;/h1&gt;
&lt;p&gt;MarkdownとかReSTのURLをクリップボードにコピーするの雑に作ったけど、かなり雑でローカルでしか動かしてないので修正してちゃんとリリースしたい。&lt;/p&gt;
&lt;h1 id="_1"&gt;便利に記事を書きたい&lt;/h1&gt;
&lt;p&gt;最近は、もっぱらMarkdownで記事を書くことが多い。Pythonでも便利にMarkdown書けるのでreStructuredTextの登場回数がめっきり減っている。&lt;/p&gt;
&lt;h2 id="_2"&gt;埋め込み機能がほしい&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://blog.muuny-blue.info/e38e37a99f7de1f45d169efcdb288dd1.html" title="埋め込み機能がほしい"&gt;埋め込み機能がほしい&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;embededなURLを書くといい感じに表示してくれるMarkdown Extensionが欲しい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[url:embed]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とか書くと、URLになるやつ。hatenaにあるやつ。&lt;/p&gt;
&lt;p&gt;hatenaは良しなにブログカード作ってくれるAPIを公開しているので基本的にそれを利用させて頂く予定。&lt;/p&gt;
&lt;p&gt;でも、oEmbed APIを提供しているサイトはできるだけそちらを使いたい気持ち。&lt;/p&gt;
&lt;h2 id="tex"&gt;TEXとか書きたい&lt;/h2&gt;
&lt;p&gt;mdx_mathみたいなTEXを書けそうなPythonのMarkdown Extensionがあるらしいので導入したさがある。&lt;/p&gt;
&lt;p&gt;Google Chart APIを使って自分で作っても良いかもしれない。&lt;/p&gt;</summary><category term="Mochi"></category></entry><entry><title>Pelicanのブログにsitemapを追加する方法 - Python</title><link href="https://muunyblue.github.io/fd9e2ae32b53addc06c63208be3aaa43.html" rel="alternate"></link><published>2015-10-15T07:46:54+09:00</published><updated>2015-10-15T07:46:54+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-10-15:fd9e2ae32b53addc06c63208be3aaa43.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican/wiki/Tips-n-Tricks#generate-sitemapxml" title="Tips n Tricks · getpelican/pelican Wiki"&gt;Tips n Tricks · getpelican/pelican Wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こちらに方法がのっていたので実践してみた。&lt;/p&gt;
&lt;h1 id="sitemaphtml"&gt;sitemap.htmlを作成&lt;/h1&gt;
&lt;p&gt;使っているテーマのtemplatesにsitemap.htmlを作成し、以下の内容を記入。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;urlset&lt;/span&gt; &lt;span class="na"&gt;xmlns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.sitemaps.org/schemas/sitemap/0.9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

{% for article in articles %}
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ SITEURL }}/{{ article.url }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;0.8&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  {% for translation in article.translations %}
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ SITEURL }}/{{ translation.url }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;0.8&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  {% endfor %}
{% endfor %}

{% for page in pages %}
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ SITEURL }}/{{ page.url }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;1.0&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  {% for translation in page.translations %}
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;{{ SITEURL }}/{{ translation.url }}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;1.0&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  {% endfor %}
{% endfor %}

&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;urlset&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="pelicanconfpy"&gt;pelicanconf.pyの編集&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DIRECT_TEMPLATES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;categories&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;archives&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sitemap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SITEMAP_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sitemap.xml&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;あとはデブロイすると、きっとsitemap.xmlができていていい感じになっているはずです。&lt;/p&gt;
&lt;h1 id="_1"&gt;できている様子&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="https://speedline.herokuapp.com/process?url=https%3A%2F%2Fi.gyazo.com%2Fb88c0135e1d7bd48c9f78fcddc3f8238.png" /&gt;&lt;/p&gt;
&lt;p&gt;できたー&lt;/p&gt;</summary><category term="Pelican"></category><category term="Python"></category></entry><entry><title>Google Adsenseがあっさり通った(2015/10)</title><link href="https://muunyblue.github.io/818cdcf067c824a4e34f9293de3b15a9.html" rel="alternate"></link><published>2015-10-15T07:34:32+09:00</published><updated>2015-10-15T07:34:32+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-10-15:818cdcf067c824a4e34f9293de3b15a9.html</id><summary type="html">&lt;p&gt;Google Adsenseが通りました、なんかドキドキ、何日待てばいいのかなぁって思ってたら1日待ったら通っていました。&lt;/p&gt;
&lt;p&gt;色々Google Adsenseについて調べていると、申し込みの流れや審査の基準などが調べて出てきたのと違う場合が多かったです、古い情報は参考にならないことが多いので注意です。&lt;/p&gt;
&lt;h1 id="_1"&gt;通った様子&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;2015/10/15 15:00頃、Google Adsenseを申し込む&lt;/li&gt;
&lt;li&gt;1時間くらいで、"Google AdSense: お支払いの連絡先情報が変更されました "という件名のメールが届く&lt;/li&gt;
&lt;li&gt;Adsenseの管理ページで広告を設置して下さいとなっているので、広告を作成し設置。&lt;/li&gt;
&lt;li&gt;次の日、2015/10/16 12:00に"Google AdSense アカウントの有効化が完了いたしました"というメールが届く&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.が一次審査と呼ばれるもの、4.が二次審査と巷では呼ばれるものだと思います。&lt;/p&gt;
&lt;p&gt;結構待たされるし通らないという情報が多かったので、即効で通って逆に不安になりました。&lt;/p&gt;
&lt;p&gt;ちまみに、申し込時は15記事くらいあって、4.のメールが届くまでに2つ記事を更新下感じでした。&lt;/p&gt;
&lt;p&gt;このブログのこの記事より前の記事を見ていただければどんな感じで書いていればいいのかわかるはずです。&lt;/p&gt;
&lt;p&gt;他にやったことは、は"Google Adsense 審査 通らない"などでぐぐり、ダメっぽいことはしないようにしました。&lt;/p&gt;
&lt;h1 id="_2"&gt;通った後&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;他に広告をのせられそうなサイトにも広告を設置&lt;/li&gt;
&lt;li&gt;一つのサイトには広告は3つまでみたいなので守る&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_3"&gt;さいごに&lt;/h1&gt;
&lt;p&gt;1000円超えないと報酬もらえないです。&lt;/p&gt;</summary><category term="Adsense"></category></entry><entry><title>PelicanのTheme【作る編】 - Python</title><link href="https://muunyblue.github.io/51fd081fb2f037078fc8a4e037daabe4.html" rel="alternate"></link><published>2015-10-15T00:14:15+09:00</published><updated>2015-10-15T00:14:15+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-10-14:51fd081fb2f037078fc8a4e037daabe4.html</id><summary type="html">&lt;p&gt;&lt;a href="http://blog.muuny-blue.info/4738a8f6fab937d899ae9631beab116f.html" title="PelicanのTheme【使う編】"&gt;前回&lt;/a&gt;は人の作ったThemeを使う話でしたが、今回は作る話です。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;目次&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#theme"&gt;Themeを作成する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#themetips"&gt;Theme作成Tips&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#include-xxxhtml"&gt;include xxx.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#if-pelicanconfpy"&gt;if [pelicanconf.pyの変数]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#if-article"&gt;if article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pelican-plugins"&gt;pelican-plugins&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#always-modified"&gt;Always Modified&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pelican-youtube"&gt;Pelican YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="theme"&gt;Themeを作成する&lt;/h1&gt;
&lt;p&gt;Pelicanのドキュメントはとても親切でThemeを作る場合のことも書いてあります。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/3.6.3/themes.html" title="Creating themes — Pelican 3.6.3 documentation"&gt;Creating themes — Pelican 3.6.3 documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;構成は以下のようにします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;├── &lt;span class="nv"&gt;static&lt;/span&gt;
│   ├── &lt;span class="nv"&gt;css&lt;/span&gt;
│   └── &lt;span class="nv"&gt;images&lt;/span&gt;
└── &lt;span class="nv"&gt;templates&lt;/span&gt;
    ├── &lt;span class="nv"&gt;archives&lt;/span&gt;.&lt;span class="nv"&gt;html&lt;/span&gt;         &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;display&lt;/span&gt; &lt;span class="nv"&gt;archives&lt;/span&gt;
    ├── &lt;span class="nv"&gt;period_archives&lt;/span&gt;.&lt;span class="nv"&gt;html&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;display&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;period&lt;/span&gt; &lt;span class="nv"&gt;archives&lt;/span&gt;
    ├── &lt;span class="nv"&gt;article&lt;/span&gt;.&lt;span class="nv"&gt;html&lt;/span&gt;          &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;processed&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;article&lt;/span&gt;
    ├── &lt;span class="nv"&gt;author&lt;/span&gt;.&lt;span class="nv"&gt;html&lt;/span&gt;           &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;processed&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;author&lt;/span&gt;
    ├── &lt;span class="nv"&gt;authors&lt;/span&gt;.&lt;span class="nv"&gt;html&lt;/span&gt;          &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;must&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;all&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;authors&lt;/span&gt;
    ├── &lt;span class="nv"&gt;categories&lt;/span&gt;.&lt;span class="nv"&gt;html&lt;/span&gt;       &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;must&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;all&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;categories&lt;/span&gt;
    ├── &lt;span class="nv"&gt;category&lt;/span&gt;.&lt;span class="nv"&gt;html&lt;/span&gt;         &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;processed&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;category&lt;/span&gt;
    ├── &lt;span class="nv"&gt;index&lt;/span&gt;.&lt;span class="nv"&gt;html&lt;/span&gt;            &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;index&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;all&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;articles&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    ├── &lt;span class="nv"&gt;page&lt;/span&gt;.&lt;span class="nv"&gt;html&lt;/span&gt;             &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;processed&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;page&lt;/span&gt;
    ├── &lt;span class="nv"&gt;tag&lt;/span&gt;.&lt;span class="nv"&gt;html&lt;/span&gt;              &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;processed&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;each&lt;/span&gt; &lt;span class="nv"&gt;tag&lt;/span&gt;
    └── &lt;span class="nv"&gt;tags&lt;/span&gt;.&lt;span class="nv"&gt;html&lt;/span&gt;             &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nv"&gt;must&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="nv"&gt;all&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;tags&lt;/span&gt;. &lt;span class="nv"&gt;Can&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;tag&lt;/span&gt; &lt;span class="nv"&gt;cloud&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;staticとtemplatesというディレクトリに分かれていて、staticにはcssや画像、jsなどを配置、templatesにはhtmlを配置します。&lt;/p&gt;
&lt;p&gt;上記のtemplates内にあるファイルは必要なファイルです、jinja2を使っているのでオリジナルのhtmlを追加して他のhtmlからincludeすることもできます。&lt;/p&gt;
&lt;p&gt;個人的に一から全て書くのは割とつらいので、他のThemeを参考にアレンジする方法にしたほうが良いと思います。自分の場合、notmyideaをベースにしました。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican/tree/master/pelican/themes/notmyidea" title="pelican/pelican/themes/notmyidea at master · getpelican/pelican"&gt;pelican/pelican/themes/notmyidea at master · getpelican/pelican&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;このThemeを参考にする場合、編集の中心になるのは、base.html, index.html, article.htmlです。どういう配置にするのか、CSSフレームワークを使うのか、など好みの条件に合わせて書くと良いと思います。&lt;/p&gt;
&lt;p&gt;templates内で使用できる変数などはドキュメントにまとめられているので参考にするといいです。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/3.6.3/themes.html#templates-and-variables" title="Creating themes — Pelican 3.6.3 documentation"&gt;Creating themes — Pelican 3.6.3 documentation #templates-and-variables&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="themetips"&gt;Theme作成Tips&lt;/h1&gt;
&lt;p&gt;PelicanのThemeは基本的にjinja2の機能をフルに活かして書いていきます、細かいところは色々ありますのでよく使ったところをまとめました。&lt;/p&gt;
&lt;h2 id="include-xxxhtml"&gt;include xxx.html&lt;/h2&gt;
&lt;p&gt;jinja2の機能でincludeがあります、サイドバーなどのパーツをincludeするように設計するといい感じになります。&lt;/p&gt;
&lt;p&gt;Bootstrapのグリットデザインにサイドバーを組み込んでいる例です。&lt;/p&gt;
&lt;p&gt;base.html&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;col-lg-9&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bs-component&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- /.bs-component --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;extras&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;col-lg-3&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bs-component&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sitebar.html&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- /.bs-component --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- /#extras --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!--./row --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!--./container --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sidebar.html&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;{# ... #}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;DETAILS&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;  &lt;/span&gt;&lt;span class="c"&gt;{# 内容 #}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;SOCIAL&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;FEED_ALL_RSS&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;  &lt;/span&gt;&lt;span class="c"&gt;{# 内容 #}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="c"&gt;{# ... #}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="if-pelicanconfpy"&gt;if [pelicanconf.pyの変数]&lt;/h2&gt;
&lt;p&gt;pelicanconfの内容で表示/非表示したい内容に使えます。&lt;/p&gt;
&lt;p&gt;例えば、Disqusの場合は以下のようになります。&lt;/p&gt;
&lt;p&gt;disqus_script.html&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    var disqus_shortname = &amp;#39;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&amp;#39;;
    (function () {
        var s = document.createElement(&amp;#39;script&amp;#39;); s.async = true;
        s.type = &amp;#39;text/javascript&amp;#39;;
        s.src = &amp;#39;https://&amp;#39; + disqus_shortname + &amp;#39;.disqus.com/count.js&amp;#39;;
        (document.getElementsByTagName(&amp;#39;HEAD&amp;#39;)[0] || document.getElementsByTagName(&amp;#39;BODY&amp;#39;)[0]).appendChild(s);
    }());
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pelicanconf.pyに"DISQUS_SITENAME"が設定されていたらDISQUSのscriptをロードするようになります。&lt;/p&gt;
&lt;p&gt;このファイルは必要な部分でincludeします。コメントなのでarticle.htmlの下のほうにincludeします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;disqus_script.html&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="if-article"&gt;if article&lt;/h2&gt;
&lt;p&gt;これは、記事ページのときのみ表示したい(記事一覧やタグ一覧のときは表示しない)、SNSリンクボタンなどを表示するとき使えます。&lt;/p&gt;
&lt;p&gt;sitebar.html&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;article&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sns&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Share&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
            &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sns.html&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="pelican-plugins"&gt;pelican-plugins&lt;/h1&gt;
&lt;p&gt;Themeを作成するときにpelican-pluginsには便利なものが色々落ちています。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican-plugins" title="getpelican/pelican-plugins"&gt;getpelican/pelican-plugins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;インストールは、このリポジトリを好きなところにクローンして、pelicanconf.pyでパスと使用するプラグインを指定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone --recursive https://github.com/getpelican/pelican-plugins
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PLUGIN_PATHS = [&amp;#39;path/to/pelican-plugins&amp;#39;]
PLUGINS = [&amp;#39;always_modified&amp;#39;, &amp;#39;pelican_youtube&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;色々便利なものがありますが、使っているものだけ紹介します。&lt;/p&gt;
&lt;h2 id="always-modified"&gt;Always Modified&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/always_modified" title="pelican-plugins/always_modified at master · getpelican/pelican-plugins"&gt;pelican-plugins/always_modified at master · getpelican/pelican-plugins&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近の記事を表示するために必要なプラグインです。Pelicanはデフォルトでは、index.htmlでしかarticlesを参照できないのでこのプラグインは便利です。&lt;/p&gt;
&lt;p&gt;サイドバーなどに以下のような記述を追加すると、最新の記事を表示できます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;article&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;articles&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;True&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;attribute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;loop&lt;/span&gt;&lt;span class="nv"&gt;.index0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.title&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;striptags&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;articleには記事情報全て含まれているので、ループ内で日付"{{ article.date.strftime("%Y %B %d") }}"なども参照できます。&lt;/p&gt;
&lt;h2 id="pelican-youtube"&gt;Pelican YouTube&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/kura/pelican_youtube" title="kura/pelican_youtube"&gt;kura/pelican_youtube&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;reStructuredTextのディレクトリに"youtube"を追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;youtube&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;video_id&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;:width:&lt;/span&gt; 800
&lt;span class="nc"&gt;:height:&lt;/span&gt; 500
&lt;span class="nc"&gt;:align:&lt;/span&gt; center
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こういう記述が使えます。&lt;/p&gt;
&lt;h1 id="_1"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;このブログもPelicanのThemeを作成しています。この内容は主にそのときに調べたことをまとめてみました。&lt;/p&gt;
&lt;p&gt;ちなみにこのブログのThemeは以下にあります。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/yymm/mokumoku" title="yymm/mokumoku"&gt;yymm/mokumoku&lt;/a&gt;&lt;/p&gt;</summary><category term="Pelican"></category><category term="Python"></category></entry><entry><title>PythonでMarkdownをGFM的に使う方法</title><link href="https://muunyblue.github.io/234e5dc39dc52740524f9d863bec963c.html" rel="alternate"></link><published>2015-10-14T07:44:28+09:00</published><updated>2015-10-14T07:44:28+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-10-14:234e5dc39dc52740524f9d863bec963c.html</id><summary type="html">&lt;p&gt;Pythonには、&lt;a href="http://daringfireball.net/projects/markdown/syntax" title="Daring Fireball: Markdown Syntax Documentation"&gt;Daring Fireball: Markdown&lt;/a&gt;を実装したMarkdownというパッケージがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pythonhosted.org/Markdown/index.html" title="Python Markdown"&gt;Python Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pythonhosted.org/Markdown/reference.html" title="Library Reference — Python Markdown"&gt;Library Reference — Python Markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使い方は以下のようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;markdown&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;extensionsで拡張できます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;markdown&lt;/span&gt;
&lt;span class="n"&gt;extensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fenced_code&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tables&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/index.html" title="Extensions — Python Markdown"&gt;Extensions — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここに書いてあるExtensionsはデフォルトで利用可能です。このドキュメントには指定するのに'markdown.extensions.footnotes'と書いていますが、単に'footnotes'だけでも使えます。&lt;/p&gt;
&lt;h1 id="gfm"&gt;おすすめ設定(GFM的に使える)&lt;/h1&gt;
&lt;p&gt;delタグとinsタグを使うために以下のパッケージをインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install mdx_del_ins
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;del_insがExtensionで使えますので以下のように設定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;markdown&lt;/span&gt;
&lt;span class="n"&gt;extensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;admonition&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;codehilite(css_class=highlight)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s1"&gt;&amp;#39;nl2br&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sane_lists&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;toc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;del_ins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;GFMライクに使えます。&lt;/p&gt;
&lt;p&gt;Pelicanで使用する場合には、pelicanconf.pyに以下のように書きます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MD_EXTENSIONS = [&amp;#39;extra&amp;#39;, &amp;#39;admonition&amp;#39;, &amp;#39;codehilite(css_class=highlight)&amp;#39;,
                 &amp;#39;nl2br&amp;#39;, &amp;#39;sane_lists&amp;#39;, &amp;#39;toc&amp;#39;, &amp;#39;del_ins&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;この記事もこの設定で書いています。&lt;/p&gt;
&lt;h1 id="extension"&gt;標準のExtensionリファレンス&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/index.html" title="Extensions — Python Markdown"&gt;Extensions — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下は上記のドキュメントを簡単にまとめました。興味のある方どうぞ。&lt;/p&gt;
&lt;p&gt;&lt;ins&gt;目次&lt;/ins&gt;&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#gfm"&gt;おすすめ設定(GFM的に使える)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extension"&gt;標準のExtensionリファレンス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extras"&gt;extras&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#abbreviations-abbr"&gt;Abbreviations (abbr)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#attribute-lists-attr_list"&gt;Attribute Lists (attr_list)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#definition-lists-def_list"&gt;Definition Lists (def_list)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fenced-code-blocks-fenced_code"&gt;Fenced Code Blocks (fenced_code)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#footnotes-footnotes"&gt;Footnotes (footnotes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tables-tables"&gt;Tables (tables)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#smart_strong-smart_strong"&gt;Smart_Strong (smart_strong)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#admonition-admonition"&gt;Admonition (admonition)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#codehilite-codehilite"&gt;CodeHilite (codehilite)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#headerid-headerid"&gt;HeaderId (headerid)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#meta-data-meta"&gt;Meta-Data (meta)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#new-line-to-break-extension-nl2br"&gt;New-Line-to-Break Extension (nl2br)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sane-lists-sane_lists"&gt;Sane Lists (sane_lists)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#smartypants-smarty"&gt;SmartyPants (smarty)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#table-of-contents-toc"&gt;Table of Contents (toc)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wikilinks"&gt;WikiLinks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="extras"&gt;extras&lt;/h1&gt;
&lt;p&gt;色々含まれているので1つずつ見てみます。&lt;/p&gt;
&lt;h2 id="abbreviations-abbr"&gt;Abbreviations (abbr)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/abbreviations.html" title="Abbreviations Extension — Python Markdown"&gt;Abbreviations Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;略語tag(\&amp;lt;abbr&gt;)を追加できます。以下に例を示します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The HTML specification 
is maintained by the W3C.

*[HTML]: Hyper Text Markup Language
*[W3C]:  World Wide Web Consortium
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt; specification &lt;br /&gt;
is maintained by the &lt;abbr title="World Wide Web Consortium"&gt;W3C&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;(正直余り使わないし、調べるまで知りませんでした)&lt;/p&gt;
&lt;h2 id="attribute-lists-attr_list"&gt;Attribute Lists (attr_list)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/attr_list.html" title="Attribute Lists Extension — Python Markdown"&gt;Attribute Lists Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;classやidなどのattributeを追加できます。便利そう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This is a paragraph.
{: &lt;span class="ni"&gt;#an_id&lt;/span&gt; .a_class }

&lt;span class="gh"&gt;A setext style header {: #setext}&lt;/span&gt;
&lt;span class="gh"&gt;=================================&lt;/span&gt;

&lt;span class="gu"&gt;### A hash style header ### {: #hash }&lt;/span&gt;

[&lt;span class="nt"&gt;link&lt;/span&gt;](&lt;span class="na"&gt;http://example.com&lt;/span&gt;){: class=&amp;quot;foo bar&amp;quot; title=&amp;quot;Some title!&amp;quot; }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;blockに対して, inlineに対して両方使えます。&lt;/p&gt;
&lt;p&gt;cssセレクタぽく書けます。ダブルクォーテーション("")で囲むことで複数指定もできます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{: #someid .someclass somekey=&amp;#39;some value&amp;#39; }

{: #id1 .class1 id=id2 class=&amp;quot;class2 class3&amp;quot; .class4 }
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="definition-lists-def_list"&gt;Definition Lists (def_list)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/definition_lists.html" title="Definition Lists Extension — Python Markdown"&gt;Definition Lists Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dl&amp;gt;dt&amp;gt;ddを書けます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Apple&lt;/span&gt;
&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;Pomaceous&lt;/span&gt; &lt;span class="n"&gt;fruit&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;plants&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;genus&lt;/span&gt; &lt;span class="n"&gt;Malus&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; 
    &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;family&lt;/span&gt; &lt;span class="n"&gt;Rosaceae&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Orange&lt;/span&gt;
&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;fruit&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;evergreen&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;genus&lt;/span&gt; &lt;span class="n"&gt;Citrus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;dl&gt;
&lt;dt&gt;Apple&lt;/dt&gt;
&lt;dd&gt;Pomaceous fruit of plants of the genus Malus in &lt;br /&gt;
the family Rosaceae.&lt;/dd&gt;
&lt;dt&gt;Orange&lt;/dt&gt;
&lt;dd&gt;The fruit of an evergreen tree of the genus Citrus.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id="fenced-code-blocks-fenced_code"&gt;Fenced Code Blocks (fenced_code)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/fenced_code_blocks.html" title="Fenced Code Blocks Extension — Python Markdown"&gt;Fenced Code Blocks Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;```で書こうとコードブロックになります。デフォルトの機能にしてほしいくらいです。&lt;/p&gt;
&lt;p&gt;このExtensionは指定行だけハイライトするということもできるみたいです。以下のように指定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python hl_lines=&amp;quot;2 3 4&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こんな感じになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="c1"&gt;# cat result&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="c1"&gt;# code block [python]&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;antigravity&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="footnotes-footnotes"&gt;Footnotes (footnotes)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/footnotes.html" title="Footnotes Extension — Python Markdown"&gt;Footnotes Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;脚注です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Footnotes[^1] have a label[^@#$%] and the footnote&amp;#39;s content.

[^1]: This is a footnote content.
[^@#$%]: A footnote on the label: &amp;quot;@#$%&amp;quot;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Footnotes&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; have a label&lt;sup id="fnref:@#$%"&gt;&lt;a class="footnote-ref" href="#fn:@#$%" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; and the footnote's content.&lt;/p&gt;
&lt;p&gt;脚注内に複数行を入れることもできます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[^1]: 
    The first paragraph of the definition.

    Paragraph two of the definition.

    &amp;gt; A blockquote with
    &amp;gt; multiple lines.

        a code block

    A final paragraph.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="tables-tables"&gt;Tables (tables)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/tables.html" title="Tables Extension — Python Markdown"&gt;Tables Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;テーブルが使えます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;First Header  | Second Header
------------- | -------------
Content Cell  | Content Cell
Content Cell  | Content Cell
&lt;/pre&gt;&lt;/div&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="smart_strong-smart_strong"&gt;Smart_Strong (smart_strong)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/smart_strong.html" title="Smart Strong Extension — Python Markdown"&gt;Smart Strong Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;賢く強調してくれます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;markdown&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Text with double__underscore__words.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
                      &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;markdown.extensions.smart_strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;Text with double__underscore__words.&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__Strong__ still works.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
                      &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;markdown.extensions.smart_strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Strong&amp;lt;/strong&amp;gt; still works.&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__this__works__too__.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
                      &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;markdown.extensions.smart_strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;this__works__too&amp;lt;/strong&amp;gt;.&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="admonition-admonition"&gt;Admonition (admonition)&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/admonition.html" title="Admonition Extension — Python Markdown"&gt;Admonition Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;reStructuredTextにあるAdminisions(&lt;a href="http://docutils.sourceforge.net/docs/ref/rst/directives.html#specific-admonitions" title="reStructuredText Directives"&gt;reStructuredText Directives&lt;/a&gt;)のMarkdown版を使えます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!!! note
    You should note that the title will be automatically capitalized.

!!! warning &amp;quot;WARNING&amp;quot;
    ...

!!! important &amp;quot;&amp;quot;
    This is a admonition box without a title.
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;You should note that the title will be automatically capitalized.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;WARNING&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonition important"&gt;
&lt;p&gt;This is a admonition box without a title.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;CSSをいい感じに書いておくと良いです。&lt;/p&gt;
&lt;h1 id="codehilite-codehilite"&gt;CodeHilite (codehilite)&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/code_hilite.html" title="CodeHilite Extension — Python Markdown"&gt;CodeHilite Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;css_classを指定しないとうまくハイライトされませんでした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;extensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;codehilite(css_class=highlight)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="headerid-headerid"&gt;HeaderId (headerid)&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/header_id.html" title="HeaderId Extension — Python Markdown"&gt;HeaderId Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;headerにheader_&amp;lt;数字&amp;gt;というIDをつけてくれます。&lt;/p&gt;
&lt;h1 id="meta-data-meta"&gt;Meta-Data (meta)&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/meta_data.html" title="Meta-Data Extension — Python Markdown"&gt;Meta-Data Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下の様にメタデータを定義できるようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;brief&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Waylan&lt;/span&gt; &lt;span class="n"&gt;Limberg&lt;/span&gt;
         &lt;span class="n"&gt;John&lt;/span&gt; &lt;span class="n"&gt;Doe&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;October&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2007&lt;/span&gt;
&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
&lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;paragraph&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="new-line-to-break-extension-nl2br"&gt;New-Line-to-Break Extension (nl2br)&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/nl2br.html" title="New Line to Break Extension — Python Markdown"&gt;New Line to Break Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下の例に示すように、改行が新しい行になるようにパースされます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;markdown&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;... Line 1&lt;/span&gt;
&lt;span class="s2"&gt;... Line 2&lt;/span&gt;
&lt;span class="s2"&gt;... &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;markdown.extensions.nl2br&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;Line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="sane-lists-sane_lists"&gt;Sane Lists (sane_lists)&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/sane_lists.html" title="Sane Lists Extension — Python Markdown"&gt;Sane Lists Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;listを賢くパースしてくれます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ordered item 1&lt;/li&gt;
&lt;li&gt;Ordered item 2&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Unordered item 1&lt;/li&gt;
&lt;li&gt;Unordered item 2&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="smartypants-smarty"&gt;SmartyPants (smarty)&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/smarty.html" title="SmartyPants Extension — Python Markdown"&gt;SmartyPants Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文字参照を置き換えてくれます。詳しくは以下を参照。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ja.wikipedia.org/wiki/%E6%96%87%E5%AD%97%E5%8F%82%E7%85%A7" title="文字参照 - Wikipedia"&gt;文字参照 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.koikikukan.com/archives/2007/07/24-000751.php" title="SmartyPants とは: 小粋空間"&gt;SmartyPants とは: 小粋空間&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="table-of-contents-toc"&gt;Table of Contents (toc)&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/toc.html" title="Table of Contents Extension — Python Markdown"&gt;Table of Contents Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目次を表示します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TOC&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#gfm"&gt;おすすめ設定(GFM的に使える)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extension"&gt;標準のExtensionリファレンス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extras"&gt;extras&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#abbreviations-abbr"&gt;Abbreviations (abbr)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#attribute-lists-attr_list"&gt;Attribute Lists (attr_list)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#definition-lists-def_list"&gt;Definition Lists (def_list)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fenced-code-blocks-fenced_code"&gt;Fenced Code Blocks (fenced_code)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#footnotes-footnotes"&gt;Footnotes (footnotes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tables-tables"&gt;Tables (tables)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#smart_strong-smart_strong"&gt;Smart_Strong (smart_strong)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#admonition-admonition"&gt;Admonition (admonition)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#codehilite-codehilite"&gt;CodeHilite (codehilite)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#headerid-headerid"&gt;HeaderId (headerid)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#meta-data-meta"&gt;Meta-Data (meta)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#new-line-to-break-extension-nl2br"&gt;New-Line-to-Break Extension (nl2br)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sane-lists-sane_lists"&gt;Sane Lists (sane_lists)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#smartypants-smarty"&gt;SmartyPants (smarty)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#table-of-contents-toc"&gt;Table of Contents (toc)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wikilinks"&gt;WikiLinks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="wikilinks"&gt;WikiLinks&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://pythonhosted.org/Markdown/extensions/wikilinks.html" title="WikiLinks Extension — Python Markdown"&gt;WikiLinks Extension — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;内部参照が使えるようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;[Bracketed&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;パースすると以下のようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/Bracketed/&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wikilink&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Bracketed&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;The first paragraph of the definition.&lt;/p&gt;
&lt;p&gt;Paragraph two of the definition.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A blockquote with&lt;br /&gt;
multiple lines.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a code block
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A final paragraph.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:@#$%"&gt;
&lt;p&gt;A footnote on the label: "@#$%".&amp;#160;&lt;a class="footnote-backref" href="#fnref:@#$%" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Python"></category><category term="Pelican"></category><category term="Markdown"></category></entry><entry><title>PelicanのTheme【使う編】- Python</title><link href="https://muunyblue.github.io/4738a8f6fab937d899ae9631beab116f.html" rel="alternate"></link><published>2015-10-15T00:13:05+09:00</published><updated>2015-10-15T00:13:05+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-10-14:4738a8f6fab937d899ae9631beab116f.html</id><summary type="html">&lt;p&gt;&lt;a href="http://blog.muuny-blue.info/64517d8435994992e682b3e4aa0a0661.html" title="Pelicanでブログを始める最初の一歩"&gt;前回の記事&lt;/a&gt;でPelicanをgh-pagesにデプロイする方法を書きましたが、PelicanはThemeがデフォルトで2つしかなくてパッとしません。&lt;/p&gt;
&lt;p&gt;デフォルトのThemeをカスタムして使う方法から、Themeリポジトリを利用する方法をまとめました。&lt;/p&gt;
&lt;h1 id="theme"&gt;デフォルトのTheme&lt;/h1&gt;
&lt;p&gt;notmyideaというThemeがデフォルトで使用できます。もう一つ"simple"というThemaがありますが、プレーンテキストです。&lt;/p&gt;
&lt;p&gt;notmyideaについてはドキュメントに詳しく書いてあります。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/3.6.3/settings.html#themes" title="Settings — Pelican 3.6.3 documentation"&gt;Settings — Pelican 3.6.3 documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;このThemeはpelicanconf.pyに変数を追記することである程度拡張できます。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;変数名&lt;/th&gt;
&lt;th&gt;効果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SITESUBTITLE&lt;/td&gt;
&lt;td&gt;サブタイトル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DISQUS_SITENAME&lt;/td&gt;
&lt;td&gt;DISQUSのsitenameを書くと、DISQUSのコメント欄が追加されます&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GITHUB_URL&lt;/td&gt;
&lt;td&gt;githubのリンクリボンが追加されます&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GOOGLE_ANALYTICS&lt;/td&gt;
&lt;td&gt;Google AnalyticsのIDをセットできます&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GOSQUARED_SITENAME&lt;/td&gt;
&lt;td&gt;GoSquaredのIDをセットできます&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MENUITEMS&lt;/td&gt;
&lt;td&gt;(Title, URL)のタプルのリストでメニューを追加できます&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PIWIK_URL&lt;/td&gt;
&lt;td&gt;PiwikiのURL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PIWIK_SSL_URL&lt;/td&gt;
&lt;td&gt;PiwikiのSSK-URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PIWIK_SITE_ID&lt;/td&gt;
&lt;td&gt;PiwikiのSite ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LINKS&lt;/td&gt;
&lt;td&gt;(Title, URL)のタプルのリストでリンクリストを作れます&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SOCIAL&lt;/td&gt;
&lt;td&gt;(Title, URL)のタプルのリストでsocialセクションを作れます&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TWITTER_USERNAME&lt;/td&gt;
&lt;td&gt;Twitterのボタンが追加されます&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;CSSも拡張することができて、pelicanconf.pyに以下のように書きます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CSS_FILE = &amp;quot;wide.css&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでもそこそこ使えそうです。&lt;/p&gt;
&lt;h1 id="theme_1"&gt;Themeリポジトリを使う&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican-themes" title="getpelican/pelican-themes"&gt;getpelican/pelican-themes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;色々なThemeが落ちています。&lt;/p&gt;
&lt;p&gt;このリポジトリをクローンして、pelicanconf.pyの”THEME"にパスを指定する or ビルド時に-tオプションでパスを指定すると使えます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone --recursive https://github.com/getpelican/pelican-themes ~/pelican-themes
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;THEME = &amp;quot;path/to/pelican-themes/theme-name&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pelican contents -s pelicanconf.py -t path/to/pelican-themes/theme-name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;お気に入りのものが見つかればこれで良さそう。&lt;/p&gt;
&lt;h1 id="_1"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;Pelican、英語圏では割りと流行っていそうな様子。日本でももっと流行っていい気がする。&lt;/p&gt;</summary><category term="Pelican"></category><category term="Python"></category></entry><entry><title>IT系主夫のエビチリ</title><link href="https://muunyblue.github.io/281683d0650eb208fa2138978a675665.html" rel="alternate"></link><published>2015-10-16T00:57:14+09:00</published><updated>2015-10-16T00:57:14+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-10-13:281683d0650eb208fa2138978a675665.html</id><summary type="html">&lt;p&gt;ｸｯｸﾄﾞｩじゃないｴﾋﾞﾁﾘ。&lt;/p&gt;
&lt;p&gt;&lt;img alt="作ってみたエビチリの写真" src="https://i.gyazo.com/d60a4e18470073ff38edd0b46778c63e.png" /&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;材料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;エビ200g&lt;/li&gt;
&lt;li&gt;たまねぎ中1&lt;/li&gt;
&lt;li&gt;長ネギ1本&lt;/li&gt;
&lt;li&gt;片栗粉大1&lt;/li&gt;
&lt;li&gt;酒大1&lt;/li&gt;
&lt;li&gt;塩・こしょう&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;合わせ調味料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ケチャップ大3&lt;/li&gt;
&lt;li&gt;醤油小2&lt;/li&gt;
&lt;li&gt;酒小1&lt;/li&gt;
&lt;li&gt;砂糖小1&lt;/li&gt;
&lt;li&gt;豆板醤小1(辛くしたいときは増やす)&lt;/li&gt;
&lt;li&gt;にんにく一欠片&lt;/li&gt;
&lt;li&gt;しょうが一欠片&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_2"&gt;作り方&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;エビを酒大1と塩コショウ(ひとつまみずつ)を入れて少し放置&lt;/li&gt;
&lt;li&gt;たまねぎと長ネギをみじん切りにする&lt;/li&gt;
&lt;li&gt;合わせ調味料を作る(にんにくとしょうがはみじん切りにする、チューブなら2cmくらい)&lt;/li&gt;
&lt;li&gt;エビに片栗粉大1をつけて多めのごま油で火を通す、さっと火が通ったらフライパンから上げておく&lt;/li&gt;
&lt;li&gt;みじん切りにしたたまねぎと長ネギを炒める&lt;/li&gt;
&lt;li&gt;軽く炒めたらエビを戻して、合わせ調味料を入れて少し炒めて完成&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="_3"&gt;感想&lt;/h1&gt;
&lt;p&gt;北海道からボタンエビが届いてそれで作ったら最高だった。&lt;/p&gt;
&lt;p&gt;IT系主夫レシピシリーズとしてレシピを書いていこうと思った。&lt;/p&gt;</summary><category term="Recipe"></category></entry><entry><title>Pelicanでブログを始める最初の一歩 - Python</title><link href="https://muunyblue.github.io/64517d8435994992e682b3e4aa0a0661.html" rel="alternate"></link><published>2015-10-16T05:03:16+09:00</published><updated>2015-10-16T05:03:16+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-10-13:64517d8435994992e682b3e4aa0a0661.html</id><summary type="html">&lt;p&gt;PelicanはPython製の静的サイトジェネレータ。&lt;/p&gt;
&lt;p&gt;このブログもPelicanで作られています。&lt;/p&gt;
&lt;p&gt;Pelicanでgh-pagesにブログをデプロイする方法をまとめました。&lt;/p&gt;
&lt;h1 id="pelican"&gt;Pelicanのインストールとセットアップ&lt;/h1&gt;
&lt;p&gt;Pythonをある程度触ったことのある人ならPelicanを使うのは簡単です。&lt;/p&gt;
&lt;p&gt;まず、Pelicanと必要なパッケージをインストールします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pelican Markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pelicanはquickstartコマンドが用意されているので、それを利用して環境を整えます。質問を幾つかされるので答えていく形式です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下のようなディレクトリが作られます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yourproject/
├── content
│   └── (pages)
├── output
├── develop_server.sh
├── fabfile.py
├── Makefile
├── pelicanconf.py       # Main settings file
└── publishconf.py       # Settings to use when ready to publish
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_1"&gt;記事を書く&lt;/h1&gt;
&lt;p&gt;記事はcontent以下に書きます。&lt;/p&gt;
&lt;p&gt;記事にはタイトルや日付、タグなどのメタデータを書く必要があります。&lt;/p&gt;
&lt;p&gt;reStructuredTextの場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:title: &amp;lt;title&amp;gt;
:date: YYYY-MM-DD HH:MM
:modified: YYYY-MM-DD HH:MM
:tags: &amp;lt;tag&amp;gt;, &amp;lt;tag&amp;gt;
:category: &amp;lt;category&amp;gt;
:slug: &amp;lt;slug&amp;gt;
:authors: &amp;lt;author&amp;gt;, &amp;lt;author&amp;gt;
:summary: &amp;lt;summary&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Markdownの場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: &amp;lt;title&amp;gt;
Date: YYYY-MM-DD HH:MM
Modified: YYYY-MM-DD HH:MM
Tags: &amp;lt;tag&amp;gt;, &amp;lt;tag&amp;gt;
Category: &amp;lt;category&amp;gt;
Slug: &amp;lt;slug&amp;gt;
Authors: &amp;lt;author&amp;gt;, &amp;lt;author&amp;gt;
Summary: &amp;lt;summary&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;titleとdate以外は省略可能です。&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;slugは記事のURLを指定できます。&lt;br /&gt;
slugを省略するとtitleのlower-caseがURLになります。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Markdownをインストールしたので*.mdという拡張子でファイルを作ればMarkdownが使えます。&lt;/p&gt;
&lt;p&gt;ビルドは以下のコマンドで、outputに静的ページがビルドされます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pelican content -s pelicanconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="content"&gt;contentのディレクトリ構成&lt;/h2&gt;
&lt;p&gt;contentにディレクトリを作成するとcategoryとして扱われます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;├── content
│   ├── category1
│   ├── category2
│   ├── category3
│   ├── no_category.md
│   └── pages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ディレクトリでカテゴリ分けをすれば、メタデータにcategoryを書く必要がない+わかりやすいので基本的にカテゴリ分けはディレクトリですれば良いと思います。&lt;/p&gt;
&lt;p&gt;content以下のディレクトリでpagesは特殊なディレクトリ名で、メタデータ不要で書けます。基本的に、AboutやContactなどの独立したページの作成を目的としているのでそのような用途で使用します。&lt;/p&gt;
&lt;h2 id="gfm"&gt;GFMぽく使う&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://qiita.com/5t111111/items/d745af778969bf00f038" title="PelicanでGitHub Flavored Markdown(GFM)をマジで使いたい！ - Qiita"&gt;PelicanでGitHub Flavored Markdown(GFM)をマジで使いたい！ - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上記の記事を参考にパッケージのインストール、pelicanconf.pyの編集をします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install mdx_del_ins
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pelicanconf.pyにMD_EXTENSIONを追加して、必要な項目を書きます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MD_EXTENSIONS = [&amp;#39;del_ins&amp;#39;, &amp;#39;fenced_code&amp;#39;, &amp;#39;codehilite(css_class=highlight)&amp;#39;, &amp;#39;tables&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;デフォルトのExtensionは以下にまとまっています。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonhosted.org/Markdown/extensions/" title="Extensions — Python Markdown"&gt;Extensions — Python Markdown&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;PythonのMarkdownを調べて、おすすめ設定を以下にまとめましたので参考までに。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.muuny-blue.info/234e5dc39dc52740524f9d863bec963c.html" title="PythonでMarkdownをGFM的に使う方法"&gt;PythonでMarkdownをGFM的に使う方法&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="gh-pagespush"&gt;gh-pagesにpushする&lt;/h1&gt;
&lt;p&gt;gh-pagesブランチを作ります。さくっと作るためにghp-importというPythonパッケージをインストールします。ghp-inmportは指定したディレクトリをgh-pagesブランチにしてくれます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;output&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでgh-pagesブランチが作られたのでpushします。&lt;/p&gt;
&lt;p&gt;ユーザーページ(&lt;username&gt;.github.io)の方にデプロイする場合は、ローカルのgh-pagesブランチをmasterにpushします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git push origin gh-pages:master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;プロジェクトのgh-pagesの場合はそのままローカルのgh-pagesブランチをpushします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git push origin gh-pages
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="_2"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;Pythonに慣れているのであれば、reStructuredTextとMarkdown両方使えるPelicanはすごく良い気がする。&lt;/p&gt;
&lt;p&gt;ドキュメントも英語だけど読みやすくて詳しくまとまっていて良い。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/3.6.3/index.html" title="Pelican 3.6.3 — Pelican 3.6.3 documentation"&gt;Pelican 3.6.3 — Pelican 3.6.3 documentation&lt;/a&gt;&lt;/p&gt;</summary><category term="Pelican"></category><category term="Python"></category></entry><entry><title>IT系主夫の塩麹鶏肉じゃが</title><link href="https://muunyblue.github.io/08b7dc6e8b36bcaac15847827b7951a9.html" rel="alternate"></link><published>2015-10-16T00:57:26+09:00</published><updated>2015-10-16T00:57:26+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-10-08:08b7dc6e8b36bcaac15847827b7951a9.html</id><summary type="html">&lt;p&gt;肉じゃがが得意料理という女子力の高さ手に入れたかった。&lt;/p&gt;
&lt;p&gt;&lt;img alt="作ってみた塩麹鳥肉じゃがの写真" src="https://i.gyazo.com/719ea39d92291e50aa547bcddfd50e04.png" /&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;材料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;にんじん1&lt;/li&gt;
&lt;li&gt;じゃがいも中3&lt;/li&gt;
&lt;li&gt;たまねぎ1&lt;/li&gt;
&lt;li&gt;インゲン(お好みの量)&lt;/li&gt;
&lt;li&gt;鶏肉300g&lt;/li&gt;
&lt;li&gt;こんぶだし(500mlに対して必要な量)&lt;/li&gt;
&lt;li&gt;水300ml&lt;/li&gt;
&lt;li&gt;塩麹大さじ2&lt;/li&gt;
&lt;li&gt;オリーブオイル大さじ1&lt;/li&gt;
&lt;li&gt;(きのこ、舞茸とかしめじとか)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_2"&gt;作り方&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;鶏肉を一口大に切って、塩麹大さじ1と和えて小1時間ほどつけておく&lt;/li&gt;
&lt;li&gt;じゃがいも、にんじん、たまねぎを一口大に切る&lt;/li&gt;
&lt;li&gt;オリーブオイル大さじ1でつけておいた鶏肉を中火で炒める&lt;/li&gt;
&lt;li&gt;鶏肉の色が変わったくらいで水300mlとこんぶだしを入れて、切ったじゃがいも、にんじん、たまねぎを入れる(きのこがあったらここで入れる)&lt;/li&gt;
&lt;li&gt;10〜15分、弱火で煮詰める&lt;/li&gt;
&lt;li&gt;2~3cmくらいに切ったインゲンを入れて1,2分くらい煮て完成&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="_3"&gt;感想&lt;/h1&gt;
&lt;p&gt;待ち時間が長く、意外と作業が少ないのでその間に色々できるしうまいので最高。&lt;/p&gt;
&lt;p&gt;塩麹は自家製を使用しています。市販のものを使用する場合は分量を変えたほうが良いかもしれないので注意。&lt;/p&gt;
&lt;p&gt;イメージ画像がないのでそのうち追記しよう。&lt;/p&gt;</summary><category term="Recipe"></category></entry><entry><title>Node.jsでささっとSPA始める個人的なメモ</title><link href="https://muunyblue.github.io/bcf9d6bd14a2095866ce8c950b702341.html" rel="alternate"></link><published>2015-10-05T01:47:27+09:00</published><updated>2015-10-05T01:47:27+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-10-05:bcf9d6bd14a2095866ce8c950b702341.html</id><summary type="html">&lt;p&gt;朝活#3&lt;/p&gt;
&lt;p&gt;※個人的なメモです、簡単なアプリしか想定していません。&lt;/p&gt;
&lt;p&gt;gulp, browserify, reactjs, coffee-script, sass(scss), hamlで始めます。&lt;/p&gt;
&lt;h1 id="_1"&gt;ディレクトリ構成&lt;/h1&gt;
&lt;p&gt;srcにあるcoffee-script, haml, scssを編集して、そこをgulpでwatchします。&lt;/p&gt;
&lt;p&gt;dest/, *.htmlはgulpが勝手に作ります。libにはダウンロードしたCSS及びJSライブラリを入れる構成です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── package.json
├── gulpfile.coffee
├── *.html
├── dest
│   ├── css
│   └── js
├── lib
│   ├── css
│   └── js
└── src
    ├── coffee
    ├── haml
    └── scss
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="bootstrapping"&gt;Bootstrapping&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install gulp -g
$ npm init
$ npm install gulp browserify gulp-sass gulp-haml gulp-watch glob vinyl-source-stream react coffee-script coffee-reactify superagent sanitize.css -save
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;CSSで困らないために、&lt;a href="http://10up.github.io/sanitize.css/" title="sanitize.css"&gt;sanitize.css&lt;/a&gt;を使います。&lt;/p&gt;
&lt;p&gt;-&amp;gt; src/scss/style.scss&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sanitize.scss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-&amp;gt; src/haml/index/haml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;!!!&lt;/span&gt;
&lt;span class="nt"&gt;%html&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ja&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;%head&lt;/span&gt;
    &lt;span class="nt"&gt;%meta&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;charset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;%title&lt;/span&gt; Title
    &lt;span class="nt"&gt;%link&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dest/css/style.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;/%link{rel: &amp;quot;stylesheet&amp;quot;, type: &amp;quot;text/css&amp;quot;, href: &amp;quot;lib/css/xxx.css&amp;quot;}&lt;/span&gt;
  &lt;span class="nt"&gt;%body&lt;/span&gt;
    &lt;span class="nt"&gt;%script&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dest/js/app.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;/%script{src: &amp;quot;lib/js/xxx.js&amp;quot;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;エントリポイントです、Reactを使う場合、bodyをReactで扱えばこれ以上書かなくても良いかもしれないです。libに追加したCSS/JSがあればロードします。&lt;/p&gt;
&lt;h1 id="gulpfile"&gt;gulpfile&lt;/h1&gt;
&lt;p&gt;watchしていますが、コンパイルエラーでgulpのプロセスが落ちるという欠陥がありますが、個人用途ですぐに捨てゆくのもなので気にせず使っています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;gulp       = &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gulp&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;browserify = &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;browserify&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;sass       = &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gulp-sass&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;haml       = &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gulp-haml&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;watchify   = &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;gulp-watch&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;source     = &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;vinyl-source-stream&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;glob       = &lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;glob&amp;#39;&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;build&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;build&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="s"&gt;&amp;#39;build:coffee&amp;#39;&lt;/span&gt;
  &lt;span class="s"&gt;&amp;#39;build:scss&amp;#39;&lt;/span&gt;
  &lt;span class="s"&gt;&amp;#39;build:haml&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;build:coffee&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nv"&gt;srcFiles = &lt;/span&gt;&lt;span class="nx"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;./src/coffee/*.coffee&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;browserify&lt;/span&gt;
      &lt;span class="nv"&gt;entries: &lt;/span&gt;&lt;span class="nx"&gt;srcFiles&lt;/span&gt;
      &lt;span class="nv"&gt;transform: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;coffee-reactify&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bundle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;app.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt; &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dest/js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;build:scss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;gulp&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;src/scss/*.scss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;dest/css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;build:haml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;gulp&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;src/haml/*.haml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;haml&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;build&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nf"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;watch&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;src/coffee/*.coffee&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;build:coffee&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;watch&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;src/scss/*.scss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;build:scss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;gulp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;watch&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;src/haml/*.haml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;build:haml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gulp watch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で開発スタートです。&lt;/p&gt;</summary><category term="Asakatsu"></category><category term="Node.js"></category></entry><entry><title>Goでnet/httpな簡単なJSON API</title><link href="https://muunyblue.github.io/ebeb300882677f350ea818c8f333f5b9.html" rel="alternate"></link><published>2015-10-02T04:12:43+09:00</published><updated>2015-10-02T04:12:43+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-10-02:ebeb300882677f350ea818c8f333f5b9.html</id><summary type="html">&lt;p&gt;朝活#2&lt;/p&gt;
&lt;h1 id="code"&gt;code&lt;/h1&gt;
&lt;p&gt;localhost:8080/jsonに向けてJSONをPOSTするとJSONが返ってきます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;encoding/json&amp;quot;&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;io/ioutil&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;In&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Output&lt;/span&gt; &lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Out&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;jsonHandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rw&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;返ってくる&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;outjson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;outjson&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Method&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Out&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Not post...&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;ioutil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Out&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Out&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%#v\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FileServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jsonHandleFunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_1"&gt;動作している様子&lt;/h2&gt;
&lt;p&gt;POSTしている様子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -v -H &lt;span class="s2"&gt;&amp;quot;Accept: application/json&amp;quot;&lt;/span&gt; -H &lt;span class="s2"&gt;&amp;quot;Content-type: application/json&amp;quot;&lt;/span&gt; -X POST -d &lt;span class="s1"&gt;&amp;#39;{&amp;quot;In&amp;quot;: &amp;quot;ｲｨｲｨｨｨﾝｯ&amp;quot;}&amp;#39;&lt;/span&gt; http://localhost:8080/json
&lt;span class="c1"&gt;# curlの表示(長いので省略)&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Out&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;返ってくる&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;%
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Serverの様子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go run server.go
main.Input&lt;span class="o"&gt;{&lt;/span&gt;In:&lt;span class="s2"&gt;&amp;quot;ｲｨｲｨｨｨﾝｯ&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;staticディレクトリを掘ると、そこのファイルがルートで見れるようにしているので、そこからJSON APIに向けてPOSTして良しなにする感じのSPAを作る予定。&lt;/p&gt;
&lt;h1 id="_2"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;調べるのと理解に時間がかかった(2時間くらい)、発明された車輪を使用するほうがいいかもしれないと何度も思った。&lt;/p&gt;
&lt;h1 id="_3"&gt;参考資料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/taizo/items/bf1ec35a65ad5f608d45" title="Go言語でhttpサーバーを立ち上げてHello Worldをする - Qiita"&gt;Go言語でhttpサーバーを立ち上げてHello Worldをする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/jpshadowapps/items/463b2623209479adcd88" title="Go net/httpパッケージの概要とHTTPクライアント実装例 - Qiita"&gt;Go net/httpパッケージの概要とHTTPクライアント実装例 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/oahiroaki/items/ff21d9adfb843161d1d8" title="golangでのjsonのデコード - Qiita"&gt;golangでのjsonのデコード - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.alexedwards.net/blog/serving-static-sites-with-go" title="Serving Static Sites with Go"&gt;Serving Static Sites with Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://otiai10.hatenablog.com/entry/2014/10/06/195442" title="【Go言語】net/httpパッケージことはじめ - DRYな備忘録"&gt;【Go言語】&lt;code&gt;net/http&lt;/code&gt;パッケージことはじめ - DRYな備忘録&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://takuya71.hatenablog.com/entry/2012/11/10/143415" title="curl を使って JSONデータをPOSTする - [Takuya71]の日記"&gt;curl を使って JSONデータをPOSTする - [Takuya71]の日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/suin/items/18baee403603100eff0e" title="Go言語: 標準パッケージのみでJSON APIクライアントを作りたい - Qiita"&gt;Go言語: 標準パッケージのみでJSON APIクライアントを作りたい - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/rerofumi/items/66be3c55405e03dbdcf0" title="Go言語でシンプルな JSON API サーバー - Qiita"&gt;Go言語でシンプルな JSON API サーバー - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Asakatsu"></category><category term="Go"></category></entry><entry><title>Haskellをはじめたい</title><link href="https://muunyblue.github.io/749a8e6c231831ef7756db230b4359c8.html" rel="alternate"></link><published>2015-10-01T01:13:00+09:00</published><updated>2015-10-01T01:13:00+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-10-01:749a8e6c231831ef7756db230b4359c8.html</id><summary type="html">&lt;p&gt;朝活#1&lt;/p&gt;
&lt;h1 id="_1"&gt;積読&lt;/h1&gt;
&lt;p&gt;おもしろそうだなーと思ってつい本を買う&lt;/p&gt;
&lt;p&gt;目次を読む&lt;/p&gt;
&lt;p&gt;へぇー&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;何かが起こる&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本棚にしまう&lt;/p&gt;
&lt;p&gt;&lt;img alt="関数プログラミング 珠玉のアルゴリズムデザイン" src="https://i.gyazo.com/38375b27061721266f1dee6f856a83f0.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.amazon.co.jp/%E9%96%A2%E6%95%B0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E7%8F%A0%E7%8E%89%E3%81%AE%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3-Richard-bird/dp/4274050645" title="Amazon.co.jp： 関数プログラミング 珠玉のアルゴリズムデザイン: Richard bird, 山下 伸夫: 本"&gt;Amazon.co.jp： 関数プログラミング 珠玉のアルゴリズムデザイン: Richard bird, 山下 伸夫: 本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この本の場合、Haskellが読めなくて本棚にinされた。&lt;/p&gt;
&lt;h1 id="haskell"&gt;Haskellに入門したい&lt;/h1&gt;
&lt;p&gt;この本を読みたいのでHaskellを書けるようになりたい。&lt;/p&gt;
&lt;p&gt;"Haskell 入門"でGoogle検索すると、上のほうに「怖くないHaskell」が出てきてこわい。関数プログラミングには怖いイメージあるの良くないことだと思う。&lt;/p&gt;
&lt;p&gt;実行したいので処理系を調べると、GHCというのがデファクトぽい。 &lt;/p&gt;
&lt;h1 id="ghc"&gt;GHCにふれる&lt;/h1&gt;
&lt;p&gt;Mac OS X環境では、brew経由でインストールできるようだ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install ghc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自分のMacには何故かHaskellがインストールされていた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ghc --version
The Glorious Glasgow Haskell Compilation System, version &lt;span class="m"&gt;7&lt;/span&gt;.8.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これは、2014年のバージョンみたいだ。&lt;/p&gt;
&lt;p&gt;以前も始めようとしていた痕跡があった。&lt;/p&gt;
&lt;p&gt;律儀にパッケージマネージャのcabalもインストールされていた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cabal --version
cabal-install version &lt;span class="m"&gt;1&lt;/span&gt;.20.0.3
using version &lt;span class="m"&gt;1&lt;/span&gt;.20.0.2 of the Cabal library 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;どういうコマンドでインストールされていたのかわからないのでこわい。&lt;/p&gt;
&lt;h1 id="haskell_1"&gt;Haskellを書いてみる&lt;/h1&gt;
&lt;p&gt;ひとまずこのバージョンのHaskellで書いてみる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello Haskell!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;はじめてのHaskellはこのコードで、vim-quickrunで実行されたので実行コマンドを知らなくても実行された、quickrunとても便利。&lt;/p&gt;
&lt;p&gt;少し調べてFizzBuzz関数を書くと下のようになりました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;fizzbuzz&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Fizz&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Buzz&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;fizzbuzz&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;"|"で書いているのはガードと呼ばれるものみたいです。&lt;/p&gt;
&lt;p&gt;なんとなく書いている気になれた。&lt;/p&gt;
&lt;h2 id="_2"&gt;参考記事&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/arowM/items/9ebfb7cafecd99290663" title="こわくないHaskell入門（初級） - Qiita"&gt;こわくないHaskell入門（初級） - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://haskell.g.hatena.ne.jp/lnznt/20141124/1416794826" title="Haskell で 初めての FizzBuzz - lnzntのHaskell日記 - haskell"&gt;Haskell で 初めての FizzBuzz - lnzntのHaskell日記 - haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/7shi/items/145f1234f8ec2af923ef" title="Haskell 超入門 - Qiita"&gt;Haskell 超入門 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_3"&gt;結果として&lt;/h1&gt;
&lt;p&gt;Haskellのスペルが曖昧になる程度のﾊｽｹｪﾙ力しかないので、まず文法を覚えようと思った。&lt;/p&gt;
&lt;p&gt;すごいH本などを読むといいのだと思うけど、あの手の分厚い本を頑張って読むのは自分には合ってないことがわかっているので、辞書代わりに使うのがちょうどいいと思っている。&lt;/p&gt;
&lt;p&gt;文法をひとさらいしたら先の本をよみながらHaskellを勉強していく予定。&lt;/p&gt;</summary><category term="Asakatsu"></category><category term="Haskell"></category></entry><entry><title>一人アサカツ！しよう</title><link href="https://muunyblue.github.io/d0f88bfbf93f5078ff06490082883764.html" rel="alternate"></link><published>2015-09-30T20:44:16+09:00</published><updated>2015-09-30T20:44:16+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-09-30:d0f88bfbf93f5078ff06490082883764.html</id><summary type="html">&lt;p&gt;一人朝活。&lt;/p&gt;
&lt;h1 id="_1"&gt;経緯&lt;/h1&gt;
&lt;p&gt;最近朝9:00くらいに出社するようになったのだけど、出社してから一時間くらい進捗してないことに気づいた。&lt;/p&gt;
&lt;p&gt;仕事しても進捗がないので出社してから一時間くらい朝活をしてみようと思ったのです。&lt;/p&gt;
&lt;h1 id="_2"&gt;自分ルール&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;出社後1時間くらい(長くても11時くらいまで)だけ&lt;/li&gt;
&lt;li&gt;内容をブログにpost&lt;/li&gt;
&lt;li&gt;毎日じゃなくてもいい(進捗する日もある、進捗する気配のない日にする)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プログラミングするときは、書き捨てていくもののためにGitHubのオーガニゼーションを作ったのでそこにコミットすることにしよう。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Kakisute" title="Kakisute"&gt;Kakisute&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;個人的に時間を限定してなんかするっていうとブログを更新することは苦手だったので挑戦的な試みである。&lt;/p&gt;
&lt;p&gt;インターネット上に情報を公開するという行為にまだあまり慣れていないのでそれになれていく目的もあるかもしれない。&lt;/p&gt;
&lt;p&gt;今日から始めてみたい。3日坊主にならないように頑張ろう。&lt;/p&gt;</summary><category term="Asakatsu"></category></entry><entry><title>lexとyaccで計算機</title><link href="https://muunyblue.github.io/aad64398a969ec3186800d412fa7ab31.html" rel="alternate"></link><published>2015-09-29T00:27:49+09:00</published><updated>2015-09-29T00:27:49+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-09-29:aad64398a969ec3186800d412fa7ab31.html</id><summary type="html">&lt;p&gt;&lt;a href="http://blog.muuny-blue.info/f5cfbc876972bd0d031c8abc37344c28.html" title="プログラミング言語を作る前知識"&gt;前の記事(プログラミング言語を作る前知識)&lt;/a&gt;でプログラミング言語少し作れる気がしてきたので、lexとyaccに軽く触れてみた。&lt;/p&gt;
&lt;p&gt;実際はflexとbisonを使っている。&lt;/p&gt;
&lt;h1 id="lex"&gt;lexの書き方&lt;/h1&gt;
&lt;p&gt;lexのファイルには3つのブロックがあって、%%で区切って記述します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt; &lt;/span&gt;&lt;span class="nb"&gt;-------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;| 定義部&lt;/span&gt;
&lt;span class="c"&gt;| オプションやincludeや変数宣言、マクロなどを記述します。&lt;/span&gt;
&lt;span class="c"&gt;| includeや変数宣言は%{&lt;/span&gt;&lt;span class="nt"&gt;...&lt;/span&gt;&lt;span class="c"&gt;%}で囲って書きます。&lt;/span&gt;
&lt;span class="c"&gt;| yaccと組み合わせて使う場合、生成されるCソースを&lt;/span&gt;
&lt;span class="c"&gt;| インクルードすることがあるので、ここに記載します。 &lt;/span&gt;
&lt;span class="c"&gt;| オプションは%ではじめます。&lt;/span&gt;
&lt;span class="c"&gt;| %noyywrap&lt;/span&gt;
&lt;span class="c"&gt;| これは入力が1ファイルであることを示していて、よく使われます。&lt;/span&gt;
&lt;span class="c"&gt;| マクロは、「マクロ名  正規表現」で書きます。&lt;/span&gt;
&lt;span class="c"&gt; &lt;/span&gt;&lt;span class="nb"&gt;-------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;%%&lt;/span&gt;
&lt;span class="c"&gt; &lt;/span&gt;&lt;span class="nb"&gt;-------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;| ルール部&lt;/span&gt;
&lt;span class="c"&gt;| 「正規表現  対応するCコード」という記述方法でルールを書きます。&lt;/span&gt;
&lt;span class="c"&gt;| &lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt;&lt;span class="c"&gt;や*などは正規表現の特殊文字なので、文字として使いたい場合は&lt;/span&gt;
&lt;span class="c"&gt;| \でエスケープしたり、&amp;quot;&amp;quot;で囲んで明示的に文字列として書きます。&lt;/span&gt;
&lt;span class="c"&gt;| 定義部で宣言したマクロは{}で囲うことで使えます。&lt;/span&gt;
&lt;span class="c"&gt; &lt;/span&gt;&lt;span class="nb"&gt;-------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;%%&lt;/span&gt;
&lt;span class="c"&gt; &lt;/span&gt;&lt;span class="nb"&gt;-------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;| ユーザーサブルーチン部&lt;/span&gt;
&lt;span class="c"&gt;| C言語のmain関数などを書きます。&lt;/span&gt;
&lt;span class="c"&gt;| yaccと組み合わせて使う場合は、main関数はyacc側に書くため&lt;/span&gt;
&lt;span class="c"&gt;| この部分はあまり書かないかもしれません。&lt;/span&gt;
&lt;span class="c"&gt; &lt;/span&gt;&lt;span class="nb"&gt;-------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;lexで使える正規表現情報です。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cis.k.hosei.ac.jp/~nakata/lectureCompiler/YaccLex/2.html" title="Lex(flex)の使い方（簡略版）"&gt;Lex(flex)の使い方（簡略版）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;lexのファイルは*.lという名前で作成し、lex(flex)コマンドでCソースを生成します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// lexの場合
$ lex sample.l
// flexの場合
$ flex sample.l
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;lex.yy.cというファイルが出力されていればok。&lt;/p&gt;
&lt;h1 id="yacc"&gt;yaccの書き方&lt;/h1&gt;
&lt;p&gt;基本構造はlexと同じです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt; &lt;/span&gt;&lt;span class="nb"&gt;-------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;| 定義部&lt;/span&gt;
&lt;span class="c"&gt;| includeや%union&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; %token&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; %typeなどを定義します。&lt;/span&gt;
&lt;span class="c"&gt;| includeはlexと同様に%{&lt;/span&gt;&lt;span class="nt"&gt;...&lt;/span&gt;&lt;span class="c"&gt;%}で記述します。&lt;/span&gt;
&lt;span class="c"&gt;| %unionは、型定義に使います。&lt;/span&gt;
&lt;span class="c"&gt;| %tokenは、単にトークンを定義します。&lt;/span&gt;
&lt;span class="c"&gt;| %typeは、ルール部で使用する変数名を定義します。&lt;/span&gt;
&lt;span class="c"&gt;| &lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;で囲んでuniconの変数名を参照して記述することもできます。&lt;/span&gt;
&lt;span class="c"&gt; &lt;/span&gt;&lt;span class="nb"&gt;-------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;%%&lt;/span&gt;
&lt;span class="c"&gt; &lt;/span&gt;&lt;span class="nb"&gt;-------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;| ルール部&lt;/span&gt;
&lt;span class="c"&gt;| ルール定義のブロックは以下のよな構成になります。&lt;/span&gt;
&lt;span class="c"&gt;| 変換結果: 構成要素1 構成要素2 &lt;/span&gt;&lt;span class="nt"&gt;...&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;|         | (他の構成内容)&lt;/span&gt;
&lt;span class="c"&gt;|         { (マッチした際に実行されるCコード) }&lt;/span&gt;
&lt;span class="c"&gt;|         ;&lt;/span&gt;
&lt;span class="c"&gt;| ;は省略可能で、{}は構成内容につきそれぞれ定義できます。&lt;/span&gt;
&lt;span class="c"&gt; &lt;/span&gt;&lt;span class="nb"&gt;-------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;%%&lt;/span&gt;
&lt;span class="c"&gt; &lt;/span&gt;&lt;span class="nb"&gt;-------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;span class="c"&gt;| ユーザーサブルーチン部&lt;/span&gt;
&lt;span class="c"&gt;| C言語のmain関数などを書きます。&lt;/span&gt;
&lt;span class="c"&gt;| 実際に入力を解析したりするのに使います。&lt;/span&gt;
&lt;span class="c"&gt;| 構文解析関数はyyparseです。&lt;/span&gt;
&lt;span class="c"&gt;| yyparse関数を使う際、yacc単体で利用するときは&lt;/span&gt;
&lt;span class="c"&gt;| 字句解析器としてyylex関数の実装が必要になります。&lt;/span&gt;
&lt;span class="c"&gt; &lt;/span&gt;&lt;span class="nb"&gt;-------------------------------------------------------&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;yaccファイルは、*.yという名前で作成し、yacc(bison)コマンドでCソースを生成します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// yaccの場合
$ yacc -d sample.y
// bisonの場合
$ bison -d sample.y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sample.tab.hとsample.tab.cというファイルが出力されていればok。&lt;/p&gt;
&lt;h1 id="lexyacc"&gt;lexとyaccを組み合わせて使う&lt;/h1&gt;
&lt;p&gt;yyparseが、yylexを必要としているように、lexとyaccは組み合わせ使うと便利です。&lt;/p&gt;
&lt;h2 id="_1"&gt;大域変数の利用パターン(変数)&lt;/h2&gt;
&lt;p&gt;intやdoubleなどの変数を扱う場合に、lexとyaccの間で大域変数を使用して、lexの正規表現にマッチした変数を、yaccのunionと紐付けておくことができます。&lt;/p&gt;
&lt;p&gt;yaccでuniconで定義した変数は、lexで、&lt;strong&gt;yylval.変数名&lt;/strong&gt;で参照できます。&lt;/p&gt;
&lt;p&gt;double型の足し算をするだけの単純な例です。&lt;/p&gt;
&lt;p&gt;lexファイル(sample.l)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;%{&lt;/span&gt;
&lt;span class="cm"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;#include &amp;quot;sample.tab.h&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt;%}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c"&gt;%%&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+\&lt;/span&gt;&lt;span class="p"&gt;.[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;yylval&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;double_value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yytext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DOUBLE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ADD&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c"&gt;%%&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;yaccファイル(sample.y)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;%union&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;double_value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;%token&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;double_value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DOUBLE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;%type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;double_value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;%left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ADD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;input&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;line&lt;/span&gt;  &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CR&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;gt; %f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;expr&lt;/span&gt;  &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ADD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DOUBLE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yyerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;yyparse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;double_valをいうyaccで定義した型を、lexファイルでyylvalを介して参照しています。&lt;/p&gt;
&lt;p&gt;yaccファイルでは、%tokenを使ってDOUBLEとunionの変数を紐付けることで、自動的に型をつけるように指定しています。&lt;/p&gt;
&lt;h1 id="_2"&gt;簡単な計算機を作る&lt;/h1&gt;
&lt;p&gt;計算機なので計算順序を正しく定義してあげるのが大事だと思います。計算順序を決めるのに、yaccの%left、%rightが役に立ちそうです。&lt;/p&gt;
&lt;p&gt;%leftは左結合規則を定義、%rightは右結合規則を定義できます。&lt;/p&gt;
&lt;p&gt;身近なところだと、足し算などは左結合、代入などは右結合です。&lt;/p&gt;
&lt;p&gt;%left,%rightは定義した順番(上から下)に優先順位がつきます。&lt;/p&gt;
&lt;p&gt;"+-*/%^()"と数字(小数点)をlexで定義します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;%option&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;noyywrap&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;cal.tab.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0-9&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0-9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;yylval&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yytext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VALUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0-9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;.[&lt;/span&gt;&lt;span class="mi"&gt;0-9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;yylval&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;atof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yytext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VALUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ADD&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SUB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MUL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DIV&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;%&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;REM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;^&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;POW&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;yaccで構文規則を書いていきます、今から作る計算機は"^"だけ右結合です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;%union&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;%token&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VALUE&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;
&lt;span class="nf"&gt;%token&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ADD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SUB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MUL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DIV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;REM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;POW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RP&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;%type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;%left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ADD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SUB&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;%left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MUL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DIV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;REM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;%left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NEG&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;POS&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;%right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;POW&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;input&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;line&lt;/span&gt;  &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CR&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;gt; %f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yyerrok&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yyclearin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;expr&lt;/span&gt;  &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ADD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;%prec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;POS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SUB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;%prec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NEG&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;$2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ADD&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SUB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MUL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DIV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;REM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fmod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;POW&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RP&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;$2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;factor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VALUE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yyerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;yytext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;--&amp;gt; %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;yytext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;yyparse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;コンパイルして実行します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ flex cal.l
$ bison -d cal.y
$ gcc cal.tab.c lex.yy.c -lm -o cal
$ ./cal
&lt;span class="m"&gt;2&lt;/span&gt;+4*4
&amp;gt;&amp;gt; &lt;span class="m"&gt;18&lt;/span&gt;.000000
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;+4&lt;span class="o"&gt;)&lt;/span&gt;*4
&amp;gt;&amp;gt; &lt;span class="m"&gt;24&lt;/span&gt;.000000
&lt;span class="m"&gt;60&lt;/span&gt;/5*2
&amp;gt;&amp;gt; &lt;span class="m"&gt;24&lt;/span&gt;.000000
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;-2*3&lt;span class="o"&gt;)&lt;/span&gt;^3
&amp;gt;&amp;gt; &lt;span class="m"&gt;27&lt;/span&gt;.000000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;おぉ、ちゃんと動いてる風だ。&lt;/p&gt;
&lt;h4 id="_3"&gt;計算機の例が書いてあって参考にした記事&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kmaebashi.com/programmer/devlang/yacclex.html" title="プログラミング言語を作る/yaccとlex"&gt;プログラミング言語を作る/yaccとlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/hake/20110207/p1" title="bison &amp;amp; flexメモ　その５ - はけの徒然日記"&gt;bison &amp;amp; flexメモ　その５ - はけの徒然日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www7b.biglobe.ne.jp/~robe/pf/pf012.html" title="プログラマの友 第十ニ報：bison を使ってみる"&gt;プログラマの友 第十ニ報：bison を使ってみる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ja.wikipedia.org/wiki/Yacc" title="Yacc - Wikipedia"&gt;Yacc - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.man.ac.uk/~pjj/cs212/ho/node4.html" title="YACC"&gt;YACC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_4"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;lexとyaccの記法について、わかってくれば計算機作れた。&lt;/p&gt;
&lt;p&gt;実際に言語を作るときは、yaccで即時評価するのでなく、ASTを作成することになるので、ややこしくなってくる。。&lt;/p&gt;
&lt;h1 id="_5"&gt;参考記事&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kmaebashi.com/programmer/devlang/yacclex.html" title="プログラミング言語を作る/yaccとlex"&gt;プログラミング言語を作る/yaccとlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hpcs.cs.tsukuba.ac.jp/~msato/lecture-note/comp-lecture/note7.html" title="プログラミング言語処理"&gt;プログラミング言語処理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://itref.fc2web.com/c/yacc.html" title="yacc/lex"&gt;yacc/lex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://epaperpress.com/lexandyacc/intro.html" title="Lex &amp;amp; Yacc | Overview"&gt;Lex &amp;amp; Yacc | Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cis.k.hosei.ac.jp/~nakata/lectureCompiler/YaccLex/5.html" title="Yaccの使い方"&gt;Yaccの使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ja.wikipedia.org/wiki/Yacc" title="Yacc - Wikipedia"&gt;Yacc - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cs.man.ac.uk/~pjj/cs212/ho/node4.html" title="YACC"&gt;YACC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://i.loveruby.net/ja/rhg/book/yacc.html" title="第9章 速習&amp;lt;code&amp;gt;yacc&amp;lt;/code&amp;gt;"&gt;第9章 速習&lt;code&gt;yacc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cis.k.hosei.ac.jp/~nakata/lectureCompiler/YaccLex/"&gt;http://cis.k.hosei.ac.jp/~nakata/lectureCompiler/YaccLex/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hpcs.cs.tsukuba.ac.jp/~msato/lecture-note/comp-lecture/note5.html" title="プログラミング言語処理"&gt;プログラミング言語処理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www7b.biglobe.ne.jp/~robe/pf/pf012.html" title="プログラマの友 第十ニ報：bison を使ってみる"&gt;プログラマの友 第十ニ報：bison を使ってみる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/lecture/os/lang104.html" title="Lecture Notes"&gt;Lecture Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ProgrammingLanguage"></category></entry><entry><title>プログラミング言語を作る前知識</title><link href="https://muunyblue.github.io/f5cfbc876972bd0d031c8abc37344c28.html" rel="alternate"></link><published>2015-09-28T00:12:42+09:00</published><updated>2015-09-28T00:12:42+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-09-28:f5cfbc876972bd0d031c8abc37344c28.html</id><summary type="html">&lt;p&gt;まったく何の知識もない状態で、プログラミング言語を作ることになったのでネット上をあさって前知識をまとめてみました。&lt;/p&gt;
&lt;p&gt;歴史から始まり最近のプログラミング言語の作り方、C言語で作る場合どうするのかまで書いてあります。&lt;/p&gt;
&lt;p&gt;(大体Wikipediaをまとめただけである)&lt;/p&gt;
&lt;h1 id="_1"&gt;むかしむかし&lt;/h1&gt;
&lt;p&gt;1940年に今でいうところのコンピュータが作られ、機械語→アセンブリ言語→アセンブリ言語のマクロというように発展しました。(低水準言語)&lt;/p&gt;
&lt;p&gt;低水準言語に対して&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低水準言語は人間には難しい&lt;/li&gt;
&lt;li&gt;アーキテクチャの異なるマシンで動かしたい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という思いがあり、コンパイラ(高水準言語を機械語に変換する)の開発がなされた。&lt;/p&gt;
&lt;p&gt;1952年のA-0 Systemが最初のコンパイラとされるが、一般的認知度的には、1957年のFORTRANが最初のコンパイラと呼ばれることが多い。&lt;/p&gt;
&lt;p&gt;その後、1960年、複数のアーキテクチャ上でコンパイルが可能できるCOBOLができた。&lt;/p&gt;
&lt;p&gt;これらは、アセンブリ言語で書かれている。この先の多くのコンパイラは、アセンブリでコンパイラを作らず、&lt;a href="https://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%AB%E3%83%95%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0" title="セルフホスティング - Wikipedia"&gt;セルフホスティング&lt;/a&gt;して作られる、セルフホスティングでの問題点は、ブートストラップ問題といって、「鶏が先か、卵が先か」的な問題を解決している言語である。&lt;/p&gt;
&lt;p&gt;Pascalの初期のコンパイラはFORTRANで書かれていたりするらしい。&lt;/p&gt;
&lt;p&gt;ブートストラップ問題でLISPは興味深い話を持っている。&lt;/p&gt;
&lt;p&gt;LISPが出来た初期は、LISPはコンパイルされていたが、スティーブ・ラッセルがevalを実装したことによりLISPインタプリタが実現され、インタプリタ上でLISPコンパイラが作られた。&lt;/p&gt;
&lt;p&gt;LISPのインタプリタが世界初のインタプリタであるようだ。&lt;/p&gt;
&lt;p&gt;1950年代に、FORTRAN, COBOL, LISPの3つの高水準言語が開発され、1950年末にALGOLが登場しのちの言語に影響を与える。&lt;/p&gt;
&lt;p&gt;1960年代から1970年代末ごろまでに、現在使われている主な言語パラダイムが開発された。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APL, PL/I, Simula, C, Prolog, ML&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今後出てくる言語は、いづれかの系統であるものが大半である。&lt;/p&gt;
&lt;h1 id="_2"&gt;プログラミング言語の処理系&lt;/h1&gt;
&lt;p&gt;プログラミング言語の処理系には、コンパイラとインタプリタがある。&lt;/p&gt;
&lt;p&gt;コンパイラは、コードを解釈して機械語を吐く。&lt;/p&gt;
&lt;p&gt;インタプリタは、コードを逐次解釈しながら実行する。&lt;/p&gt;
&lt;p&gt;インタプリタでも、JITなどコンパイルを実行時に行うものや、Javaのように中間表現をコンパイラで生成してインタプリタで実行するものもあるので、コンパイラとインタプリタの垣根をはっきりさせることもなくなってきている感がある。&lt;/p&gt;
&lt;h1 id="_3"&gt;プログラミング言語の設計&lt;/h1&gt;
&lt;p&gt;大雑把に言うと、ソースコードから抽象構文木を作成してコード(機械語)やデータを得るという流れになる。&lt;/p&gt;
&lt;p&gt;コンパイルは機械語、インタプリタはデータ(機械語かもしれない)を生成するという分類ができそう。&lt;/p&gt;
&lt;h3 id="_4"&gt;コンパイラの場合&lt;/h3&gt;
&lt;p&gt;コンパイラ設計手法についてPQCCで使われ、割と一般的な分類となっている。&lt;/p&gt;
&lt;p&gt;大きくフロントエンドとバックエンドに分かれていて&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;フロントエンド : 行再構築、字句解析、プリプロセッサ、構文解析、意味解析など&lt;/li&gt;
&lt;li&gt;バックエンド : 解析、最適化、コード生成など&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;となっている。&lt;/p&gt;
&lt;p&gt;フロントエンドで吐かれた一般的なデータ構造である中間表現(抽象構文木やシンボルテーブル)を、バックエンドが解析、実行可能なコードを生成するという流れである。&lt;/p&gt;
&lt;h3 id="_5"&gt;インタプリタの場合&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;バイトコードインタプリタ&lt;/li&gt;
&lt;li&gt;抽象構文木(AST)インタプリタ&lt;/li&gt;
&lt;li&gt;実行時コンパイル(JIT)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(コンパイルする気満々である)&lt;/p&gt;
&lt;p&gt;これらは組み合わせて使われたりすることが多いようだ、ASTにしてからJIT(Javascriptなど)、ASTにしてからバイトコード生成(Javaや.Net Framework)など。&lt;/p&gt;
&lt;p&gt;Emacs Lispのように、LISPを高度に圧縮して最適化したコードを生成して、バイトコードインタプリタ(C言語で作られている)に読ませるようなことをしているものもある。&lt;/p&gt;
&lt;p&gt;抽象構文木を作るタイプの話しかしていませんが、世の中のプログラミング言語が全てそうではないです。&lt;/p&gt;
&lt;h1 id="_6"&gt;プログラミング言語をつくるには？&lt;/h1&gt;
&lt;p&gt;今までの流れ的に、プログラミング言語を作るには大雑把に言って&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字句解析&lt;/li&gt;
&lt;li&gt;構文解析&lt;/li&gt;
&lt;li&gt;解析結果の評価&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という流れで作れそうです。&lt;/p&gt;
&lt;p&gt;字句解析と構文解析は必要。&lt;/p&gt;
&lt;p&gt;解析結果の評価の部分は、速度や機械語でないといけないという理由がない限り、ASTを解析して実行するインタプリタ、つまりその言語のVMを作るということになりそうです。&lt;/p&gt;
&lt;p&gt;思い描いた文法を字句解析・構文解析でASTにして、ASTをVMで実行するというのがベースでプログラミング言語を作っていくことになりそう。&lt;/p&gt;
&lt;p&gt;字句解析・構文解析の部分をParserと一般的には呼ぶそうです。&lt;/p&gt;
&lt;h1 id="c"&gt;C言語でプログラミング言語を作るとき&lt;/h1&gt;
&lt;p&gt;全て手作りで設計してもいいと思いますが、字句解析と構文解析に関して、C言語には有名なツールがあります。&lt;/p&gt;
&lt;h2 id="lexflex"&gt;字句解析 lex/flex&lt;/h2&gt;
&lt;p&gt;flexはlexのGNU実装です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ja.wikipedia.org/wiki/Lex" title="Lex - Wikipedia"&gt;Lex - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Flex_lexical_analyser" title="Flex lexical analyser - Wikipedia, the free encyclopedia"&gt;Flex lexical analyser - Wikipedia, the free encyclopedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="yaccbison"&gt;構文解析 yacc/bison&lt;/h2&gt;
&lt;p&gt;bisonはyaccのGNU実装です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ja.wikipedia.org/wiki/Yacc" title="Yacc - Wikipedia"&gt;Yacc - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ja.wikipedia.org/wiki/Bison" title="Bison - Wikipedia"&gt;Bison - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lexとyaccはセットで扱われることがほとんどです。&lt;/p&gt;
&lt;p&gt;yaccはC言語以外にも実装があり、 OCaml, ML, Ada, Pascal, Java, Python, Ruby, Go, Common Lispなどで使えます。&lt;/p&gt;
&lt;h1 id="_7"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;ほとんどWikipediaの情報ですが、プログラミング言語作りにとりかかれそうな気がしてきました。&lt;/p&gt;
&lt;h1 id="_8"&gt;参考資料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9" title="コンパイラ - Wikipedia"&gt;コンパイラ - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E#.E6.AD.B4.E5.8F.B2" title="プログラミング言語 - Wikipedia"&gt;プログラミング言語 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%97%E3%83%AA%E3%82%BF" title="インタプリタ - Wikipedia"&gt;インタプリタ - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ja.wikipedia.org/wiki/LISP" title="LISP - Wikipedia"&gt;LISP - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ja.wikipedia.org/wiki/Eval" title="eval - Wikipedia"&gt;eval - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ja.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E6%A7%8B%E6%96%87%E6%9C%A8" title="抽象構文木 - Wikipedia"&gt;抽象構文木 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ja.wikipedia.org/wiki/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E8%A8%80%E8%AA%9E" title="スクリプト言語 - Wikipedia"&gt;スクリプト言語 - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="ProgrammingLanguage"></category></entry><entry><title>Youtubeの動画URLを取得するSwiftコードを書いた</title><link href="https://muunyblue.github.io/0a7d83f084ec258aefd128569dda03d7.html" rel="alternate"></link><published>2015-09-25T01:42:03+09:00</published><updated>2015-09-25T01:42:03+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-09-25:0a7d83f084ec258aefd128569dda03d7.html</id><summary type="html">&lt;p&gt;Objective-Cだと以下のプロジェクトで、YoutubeからiOSで再生可能な形式の動画を取得して再生している。その中身の必要そうな部分をSwiftで書き直して使う話。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/hellozimi/HCYoutubeParser" title="hellozimi/HCYoutubeParser"&gt;hellozimi/HCYoutubeParser&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://www.youtube.com/get_video_info?video_id=&amp;lt;video_id&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で取得できるデータから再生可能な動画のURLを引っ張り出すことができるので、video_idさえわかればYoutubeから動画を引っ張ってきてiOSアプリ内で再生できるようだ。&lt;/p&gt;
&lt;p&gt;データがURLのQuery形式になっていて、そのパーサが必要なので作る。&lt;/p&gt;
&lt;p&gt;動画データは、url_encoded_fmt_stream_mapに入っている。&lt;/p&gt;
&lt;h1 id="get"&gt;データの取得(GET)&lt;/h1&gt;
&lt;p&gt;非同期でGETする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://www.youtube.com/get_video_info?video_id=&amp;lt;ID&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;req&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;NSMutableURLRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;NSURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPMethod&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;task&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;NSURLSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedSession&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;dataTaskWithRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;completionHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;NSString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NSUTF8StringEncoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
        &lt;span class="bp"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="bp"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resume&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="get_1"&gt;GETしたレスポンスをパース&lt;/h1&gt;
&lt;p&gt;URLクエリ文字列をパースしてDictionaryに入れる。パースしたあとのデータはstringByRemovingPercentEncodingでデコードする必要があるので注意。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Dictionary&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key_val&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;amp;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;key_val_array&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;=&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;key&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key_val_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;val&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key_val_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;stringByRemovingPercentEncoding&lt;/span&gt;
    &lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parameters&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;GETのコールバック内にこのコードを仕込めば完成。&lt;/p&gt;
&lt;h1 id="_1"&gt;得られるデータ内の必要そうなパラメータ&lt;/h1&gt;
&lt;p&gt;thumbnail_url, length_seconds, iurl, title, iurlmq, url_encoded_fmt_stream_map, iurlmaxres, iv_module(swfのリンクになってる、iOSで再生できるかは確認してない), vid, iurlsd&lt;/p&gt;
&lt;p&gt;あとは、url_encoded_fmt_stream_mapのURLをAVPlayerなりに入れれば再生できます。&lt;/p&gt;</summary><category term="Swift"></category></entry><entry><title>出産後あって良かったものリスト</title><link href="https://muunyblue.github.io/f69543a0f1b1c844dbd3eeee30ea0404.html" rel="alternate"></link><published>2015-09-23T05:50:37+09:00</published><updated>2015-09-23T05:50:37+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-09-23:f69543a0f1b1c844dbd3eeee30ea0404.html</id><summary type="html">&lt;p&gt;この間、子どもが生まれました。&lt;/p&gt;
&lt;img alt="かわいい" src="https://i.gyazo.com/db93c9630d932f1c1887eb3f43675a96.png" style="width: 300px;" /&gt;
&lt;p&gt;かわいいですが、育児は大変です。&lt;/p&gt;
&lt;p&gt;夫目線ですが出産後あってよかった物リストをまとめてみました。(現在一ヶ月半)&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#section-1" id="toc-entry-1"&gt;らでぃっしゅぼーや&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#section-2" id="toc-entry-2"&gt;スリング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#section-3" id="toc-entry-3"&gt;ウォッシュレット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#section-4" id="toc-entry-4"&gt;スケール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#section-5" id="toc-entry-5"&gt;バランスボール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#section-6" id="toc-entry-6"&gt;酸素系漂白剤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#section-7" id="toc-entry-7"&gt;ハンディクリーナー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#section-8" id="toc-entry-8"&gt;有給&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;らでぃっしゅぼーや&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;宅配野菜です。&lt;/p&gt;
&lt;p&gt;宅配野菜はらでぃっしゅぼーやに限らないので、何でもいいと思いますが宅配野菜は便利です。&lt;/p&gt;
&lt;p&gt;便利な点&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;買い物しなくてもいい(回数が減る)&lt;/li&gt;
&lt;li&gt;割と偏りなくいろんな野菜が食べれる&lt;/li&gt;
&lt;li&gt;献立が勝手に決まる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;割と偏りなくいろんな野菜が食べれるので、母乳育児をするときにいろんな栄養をとれていいんじゃないかと思っています。&lt;/p&gt;
&lt;p&gt;自分で買い物行くとつい同じような野菜ばかり買っているような気がするので個人的に一番いいポイントだと思っています。&lt;/p&gt;
&lt;p&gt;らでぃっしゅぼーやにはいくつかコースがありますが、「ぱれっと」の7種+果物を頼んでいます。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.radishbo-ya.co.jp/shop/app/catalog/contract_commodity?serviceType=1"&gt;契約選択（ぱれっと） | らでぃっしゅぼーや 有機野菜・無添加食材の宅配ネットスーパー&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;野菜と果物はそのとき旬のものが届きます。&lt;/p&gt;
&lt;p&gt;金曜日までに追加の注文も受け付けているので、野菜以外になにかほしい物があったら頼めます。湯葉とか鶏肉とか卵とかも頼んだりしています。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;スリング&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;北極しろくま堂のキュットミーを使っています。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.babywearing.jp/netshop/sling/cuteme/"&gt;キュットミー | 北極しろくま堂オリジナル商品。数十万人のママが愛用。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自分は使っていませんがママが使っていて調子良さそうです。&lt;/p&gt;
&lt;p&gt;密着する感じがいいのか、抱っこ紐より落ち着いている感じがします。&lt;/p&gt;
&lt;p&gt;赤ちゃんを入れるのが少しコツがいるそうですが、両手が空くので便利だそうです。&lt;/p&gt;
&lt;p&gt;このキュットミー色や記事の種類が豊富なのですがこの色です。&lt;/p&gt;
&lt;img alt="キュットミーの色(みるく)" src="http://www.babywearing.jp/netshop/image/CM-10-S330.us4.jpg" style="width: 200px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;ウォッシュレット&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;出産後のママにあると良さそうです。&lt;/p&gt;
&lt;p&gt;出産前に設置していたのですが、かなりのありがたみを感じていました。&lt;/p&gt;
&lt;p&gt;賃貸でも、便座のみを交換できるので問題なかったです。&lt;/p&gt;
&lt;p&gt;ちなみに自分は、新宿のビックロで購入しました。ウォッシュレットのところの店員さんがとても良い方でしっかり検討できました。取り付けサービスもやっているので便利でした。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;スケール&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;母乳で育てる場合、ちゃんと飲んだのかがすごく気になります。&lt;/p&gt;
&lt;p&gt;不安は少しでもないほうがいいのでスケールがあるととても良いと思います。&lt;/p&gt;
&lt;p&gt;スケールはいつまでも必要なわけではないのでレンタルにしました。&lt;/p&gt;
&lt;p&gt;3ヶ月で3700円の5g単位のスケールをレンタルしました。&lt;/p&gt;
&lt;img alt="スケール" src="http://www.ibaby.co.jp/scale/degitalA270.jpg" style="width: 200px;" /&gt;
&lt;p&gt;2g単位のもありましたが、5gで十分測れています。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-5"&gt;バランスボール&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;抱っこしても歩いてないとブーブー言うことがあるので、そういうときにバランスボールが便利です。&lt;/p&gt;
&lt;p&gt;同時にダイエットもできるので一石二鳥です。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-6"&gt;酸素系漂白剤&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;もらった昔の洋服の黄ばみ落としや、排泄物の汚れ落としなどに役に立っています。&lt;/p&gt;
&lt;p&gt;なんとかく洗濯の回数も増えるかと思い、出産前に洗濯機の槽洗浄にも活躍しました。&lt;/p&gt;
&lt;p&gt;過炭酸ナトリウム100%の酸素系漂白剤が良いと言われたので過炭酸ナトリウムを購入しました。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.amazon.co.jp/dp/B00E9P235W/ref=pd_lpo_sbs_dp_ss_2?pf_rd_p=187205609&amp;amp;pf_rd_s=lpo-top-stripe&amp;amp;pf_rd_t=201&amp;amp;pf_rd_i=B000FQNNU8&amp;amp;pf_rd_m=AN1VRQENFRJN5&amp;amp;pf_rd_r=09T3YV9R8TJ16JWPX3VX"&gt;Amazon.co.jp： 過炭酸ナトリウム(酸素系漂白剤) 1kg: ヘルス&amp;amp;ビューティー&lt;/a&gt;&lt;/p&gt;
&lt;img alt="過炭酸ナトリウム" src="http://ecx.images-amazon.com/images/I/51Es2G4C1KL.jpg" style="width: 200px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-7"&gt;ハンディクリーナー&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今後、子どもがいるとさっと掃除機かけたい機会が増えるんじゃないかということで、ハンディクリーナーを買いました。&lt;/p&gt;
&lt;p&gt;コードとか刺さなくていいし、すぐに使えて実際便利です。&lt;/p&gt;
&lt;p&gt;マキタのハンディクリーナー使っています。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.amazon.co.jp/%E3%83%9E%E3%82%AD%E3%82%BF-makita-CL182FDRFW-%E5%85%85%E9%9B%BB%E5%BC%8F%E3%83%8F%E3%83%B3%E3%83%87%E3%82%A3%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%8A%E3%83%BC/dp/B004PDFPEE"&gt;Amazon.co.jp： マキタ 充電式ハンディクリーナー CL182FDRFW: ホーム&amp;amp;キッチン&lt;/a&gt;&lt;/p&gt;
&lt;img alt="マキタのハンディクリーナー" src="http://ecx.images-amazon.com/images/I/31PJk%2BM11bL.jpg" style="width: 200px;" /&gt;
&lt;p&gt;充電時間が短く、使用時間が長めなので良いです。吸引力も割と強いです。結構軽いのでさっと出してさっと掃除機をかけられます。&lt;/p&gt;
&lt;p&gt;マキタのハンディクリーナーは、V(ボルト)数や、ボタン式or自動式などいくつか種類があるのでちゃんと選ぶといいです。&lt;/p&gt;
&lt;p&gt;ダイソンなどと比べるとヘッドがクルクル回るのとかがついていないので、拭き掃除と併用すると良さそうです。実際にそうしています。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-8"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-8"&gt;有給&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;里帰りをしない選択をしたので有給が必須でした。&lt;/p&gt;
&lt;p&gt;ママだけでは出産後すぐに一人でひたすら面倒と見るのには限界があるので、平日の中日などに有給をとるようにしました。&lt;/p&gt;
&lt;p&gt;自分も赤ちゃんかわいいし、会社休めるし、ママも楽ができるのでいいことしかなかったです。&lt;/p&gt;
&lt;p&gt;一ヶ月検診などに付き合いとなるとその時も有給が必要なので計画的に使うと良いです。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="育児"></category></entry><entry><title>埋め込み機能がほしい</title><link href="https://muunyblue.github.io/e38e37a99f7de1f45d169efcdb288dd1.html" rel="alternate"></link><published>2015-11-25T00:26:01+09:00</published><updated>2015-11-25T00:26:01+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-09-21:e38e37a99f7de1f45d169efcdb288dd1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;作りました(2015/11/11)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.muuny-blue.info/5747a0021eb349e9c8d3667cf1a5e9ec.html" title="PelicanとPython-MarkdownでEmbedlyが使える便利なExtensionを作った"&gt;PelicanとPython-MarkdownでEmbedlyが使える便利なExtensionを作った&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Twiterは以下のようになります。&lt;/p&gt;
&lt;p&gt;
&lt;a class="embedly-card" href="https://twitter.com/yymm6666/status/664370449816485889"&gt;embed.ly&lt;/a&gt;
&lt;script async src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;Embedlyを使用しているのであらゆるURLがそれっぽくなります。便利です。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;ブログに埋め込み機能がほしい。&lt;/p&gt;
&lt;p&gt;&lt;img alt="埋め込めている様子" src="https://i.gyazo.com/9bd59a65ff4d7cdb97bd17c948db7c23.png" /&gt;&lt;/p&gt;
&lt;p&gt;こういった機能が、このブログにも欲しい。&lt;/p&gt;
&lt;h1 id="embed"&gt;embed機能&lt;/h1&gt;
&lt;p&gt;つまるところ、はてなブログなどにあるembed機能がほしい。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://help.hatenablog.com/entry/editor/advlink" title="リンクの挿入とコンテンツの埋め込み - はてなブログ ヘルプ"&gt;リンクの挿入とコンテンツの埋め込み - はてなブログ ヘルプ&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"[&lt;URL&gt;:embed]"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;とすると、いい感じに埋め込まれるようにしたい。&lt;/p&gt;
&lt;p&gt;PelicanはMarkdownもreStructuredTextもプラグインがあるので存在するかもしれないし自分で作れるかもしれない。&lt;/p&gt;
&lt;p&gt;reStructuredTextの場合、rawディレクティブを使って".. raw:: html"としてembeddedなHtmlを書けば出来ないこともないがめんどくさい。&lt;/p&gt;
&lt;p&gt;embedディレクティブとかほしい。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.. embed:: &lt;URL&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_1"&gt;埋め込みたいものリスト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;li&gt;Youtube&lt;/li&gt;
&lt;li&gt;ニコニコ動画&lt;/li&gt;
&lt;li&gt;SlideShare&lt;/li&gt;
&lt;li&gt;SpeakerDeck&lt;/li&gt;
&lt;li&gt;hatena blog&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;Amazon&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_2"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;既存のものがあれば使いたいけど、なかったら作ろうと思います。&lt;/p&gt;
&lt;p&gt;あったら誰かおしえてほしい。&lt;/p&gt;
&lt;p&gt;日記でした。&lt;/p&gt;</summary><category term="Blog"></category></entry><entry><title>IDCFクラウドの一番安いのでDokkuを使う</title><link href="https://muunyblue.github.io/9375084629cd055e6b819053bc9714de.html" rel="alternate"></link><published>2015-09-20T00:55:33+09:00</published><updated>2015-09-20T00:55:33+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-09-20:9375084629cd055e6b819053bc9714de.html</id><summary type="html">&lt;p&gt;(Dokku v0.3.26の話)&lt;/p&gt;
&lt;p&gt;Herokuで1日6時間止めたくないし、30分でスリーブしたくないアプリがあるとき、VPS on Dokkuは最高のソリューションかもしれないです。&lt;/p&gt;
&lt;p&gt;プロダクションには無理がありそうですが、社内とか個人用途には良さそうですね、nginxとかのセットアップをやってくれますし、Herokuのbuildpackを使えるので便利便利です。&lt;/p&gt;
&lt;p&gt;VPSにはIDCFクラウドの一番安いのを使います。Dokkuを入れる前に、&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.muuny-blue.info/50982fb2f2cfa186d335310461dfa2be.html" title="IDCFクラウド借りました"&gt;IDCFクラウド借りました&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;にあるようなセットアップが済んでいるものとします。&lt;/p&gt;
&lt;h1 id="dokku"&gt;Dokkuのインストール&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget https://raw.github.com/progrium/dokku/v0.3.26/bootstrap.sh
$ sudo &lt;span class="nv"&gt;DOKKU_TAG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;v0.3.26 bash bootstrap.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;続いてサーバにログインしている状態で、ホスト名の設定。(root権限で実行)&lt;/p&gt;
&lt;p&gt;VHOSTとHOSTNAMEに、持っているDNSの名前を設定する。(サブドメインでも良い)&lt;/p&gt;
&lt;p&gt;(仮に、foo.barを設定したとする。)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# echo &amp;quot;foo.bar&amp;quot; &amp;gt; /home/dokku/VHOST
# echo &amp;quot;foo.bar&amp;quot; &amp;gt; /home/dokku/HOSTNAME
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;("http://foo.bar"にアクセスしてもdokkuの初期設定画面が出てきたので、そちらで設定できるみたい)&lt;/p&gt;
&lt;p&gt;次に、git pushできるようにするために、SSHの公開鍵を設定する。公開鍵のある場所で以下のコマンドを実行する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(ローカル) $ cat ~/.ssh/id_rsa.pub | ssh root@&amp;lt;your_ip&amp;gt; &amp;quot;sudo sshcommand acl-add dokku &amp;lt;name&amp;gt;&amp;quot;
(サーバ内) $ cat ~/.ssh/id_rsa.pub | sudo sshcommand acl-add dokku &amp;lt;name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dokkuの下準備はこれだけ、次にドメインの設定する。&lt;/p&gt;
&lt;h1 id="com"&gt;ドメインの設定(お名前.com)&lt;/h1&gt;
&lt;p&gt;Dokkuはnginxを使ってサブドメインにデプロイしてくれるので、ワイルドカードを設定してみる。&lt;/p&gt;
&lt;p&gt;お名前.comでは、サブドメインにワイルドカードが使えないので、*.&lt;domain&gt;とするしかないみたいです。&lt;/p&gt;
&lt;p&gt;しょうがないので、DNSレコード設定で以下のようにAレコードを設定する。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;A record&lt;/th&gt;
&lt;th align="center"&gt;IP&lt;/th&gt;
&lt;th align="right"&gt;TTL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;foo.bar&lt;/td&gt;
&lt;td align="center"&gt;&lt;IDFCのIP&gt;&lt;/td&gt;
&lt;td align="right"&gt;3600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;*.foo.bar&lt;/td&gt;
&lt;td align="center"&gt;&lt;IDFCのIP&gt;&lt;/td&gt;
&lt;td align="right"&gt;3600&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これで、例えば"dokku@foo.bar:sample"にpushしたとき、"http://sample.foo.bar"にデプロイされる。&lt;/p&gt;
&lt;h1 id="dokku_1"&gt;Dokkuにサンプルアプリをデプロイ&lt;/h1&gt;
&lt;p&gt;Pythonのサンプルをデプロイしてみる。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/heroku/python-sample" title="heroku/python-sample"&gt;heroku/python-sample&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ローカル環境にgit cloneして、remoteにdokkuを追加。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/heroku/python-sample.git&lt;/span&gt;
&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dokku&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dokku&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dokku&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Counting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Delta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;compression&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;threads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Compressing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Writing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.81&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;KiB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Total&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reused&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Cleaning&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Building&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;herokuish&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Unable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;gliderlabs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nl"&gt;herokuish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;locally&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;latest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pulling&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gliderlabs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;herokuish&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;835&lt;/span&gt;&lt;span class="nl"&gt;c565d00e2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pulling&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;c5c659229e15&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pulling&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;中略&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;359e311&lt;/span&gt;&lt;span class="nl"&gt;e765f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pull&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;359e311&lt;/span&gt;&lt;span class="nl"&gt;e765f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Already&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Digest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;aaa5dd65a7f90a47f2bb1266375b27d4f273ff94495527949536c9e944a871a&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Downloaded&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;newer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gliderlabs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nl"&gt;herokuish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Adding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BUILD_ENV&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;detected&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Installing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="mf"&gt;-2.7.10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Installing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Collecting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Downloading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="mf"&gt;-0.9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;481&lt;/span&gt;&lt;span class="n"&gt;kB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Collecting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Jinja2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;2.6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Downloading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Jinja2&lt;/span&gt;&lt;span class="mf"&gt;-2.6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;389&lt;/span&gt;&lt;span class="n"&gt;kB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Collecting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Werkzeug&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;0.8.3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Downloading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Werkzeug&lt;/span&gt;&lt;span class="mf"&gt;-0.8.3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Installing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;collected&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Werkzeug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Jinja2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Werkzeug&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Jinja2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Successfully&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;installed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="mf"&gt;-0.9&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Jinja2&lt;/span&gt;&lt;span class="mf"&gt;-2.6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Werkzeug&lt;/span&gt;&lt;span class="mf"&gt;-0.8.3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;You&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;7.0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;however&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;7.1.2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nl"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;You&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;should&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;consider&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;upgrading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;via&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;upgrade&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Discovering&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Procfile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;declares&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Releasing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Deploying&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DOKKU_SCALE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Defaulting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;single&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DOKKU_SCALE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generated&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;flight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;checks&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;For&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;efficient&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;downtime&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deployments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CHECKS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;See&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//progrium.viewdocs.io/dokku/checks-examples.md for examples&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;CHECKS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;simple&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Waiting&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;successful&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;=====&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//0.0.0.0:5000/&lt;/span&gt;
&lt;span class="o"&gt;=====&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Creating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dokku&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;VHOST&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Configuring&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;muuny&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Creating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-----&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Running&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;Reloading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;=====&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;deployed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//python-sample.foo.bar&lt;/span&gt;

&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dokku&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;初回はDockerのイメージとかを色々落としてくるので時間がかかるが、いい感じにデプロイされている様子を見れる。&lt;/p&gt;
&lt;p&gt;Aレコードがちゃんと設定されていれば、ブラウザでも見れます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hello Dokku" src="https://i.gyazo.com/1ad23dfd5b4eaeef76f14de4cca9e848.png" /&gt;&lt;/p&gt;
&lt;p&gt;Dokkuの様子を、サーバにSSHして確認。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ dokku &lt;span class="nv"&gt;apps&lt;/span&gt;
&lt;span class="o"&gt;=====&lt;/span&gt;&amp;gt; My Apps
python-sample
$ dokku ps python-sample
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.1   &lt;span class="m"&gt;6064&lt;/span&gt;  &lt;span class="m"&gt;1632&lt;/span&gt; ?        Ssl  &lt;span class="m"&gt;00&lt;/span&gt;:11   &lt;span class="m"&gt;0&lt;/span&gt;:00 /start web
root        &lt;span class="m"&gt;10&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.0   &lt;span class="m"&gt;1484&lt;/span&gt;   &lt;span class="m"&gt;920&lt;/span&gt; ?        S    &lt;span class="m"&gt;00&lt;/span&gt;:11   &lt;span class="m"&gt;0&lt;/span&gt;:00 /root/.basher/bash -c main &lt;span class="s1"&gt;&amp;#39;web&amp;#39;&lt;/span&gt;
u3135      &lt;span class="m"&gt;136&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;1&lt;/span&gt;.4 &lt;span class="m"&gt;179520&lt;/span&gt; &lt;span class="m"&gt;14716&lt;/span&gt; ?        S    &lt;span class="m"&gt;00&lt;/span&gt;:11   &lt;span class="m"&gt;0&lt;/span&gt;:00 python app.py
root       &lt;span class="m"&gt;137&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.0   &lt;span class="m"&gt;4440&lt;/span&gt;   &lt;span class="m"&gt;652&lt;/span&gt; ?        Ss+  &lt;span class="m"&gt;00&lt;/span&gt;:21   &lt;span class="m"&gt;0&lt;/span&gt;:00 /bin/sh -c ps auxwww
root       &lt;span class="m"&gt;143&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.1  &lt;span class="m"&gt;15564&lt;/span&gt;  &lt;span class="m"&gt;1156&lt;/span&gt; ?        R+   &lt;span class="m"&gt;00&lt;/span&gt;:21   &lt;span class="m"&gt;0&lt;/span&gt;:00 ps auxwww
$ ls -la /home/dokku &lt;span class="p"&gt;|&lt;/span&gt; grep python-sample
drwxrwxr-x  &lt;span class="m"&gt;8&lt;/span&gt; dokku dokku &lt;span class="m"&gt;4096&lt;/span&gt; XXX XX XX:XX python-sample
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dockerの様子も確認。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo docker ps
CONTAINER ID        IMAGE                        COMMAND             CREATED             STATUS              PORTS               NAMES
a63daf76bcb3        dokku/python-sample:latest   &lt;span class="s2"&gt;&amp;quot;/start web&amp;quot;&lt;/span&gt;        &lt;span class="m"&gt;4&lt;/span&gt; minutes ago       Up &lt;span class="m"&gt;4&lt;/span&gt; minutes                            insane_leakey
$ sudo docker images
REPOSITORY             TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
dokku/python-sample    latest              d8025105f0c0        &lt;span class="m"&gt;4&lt;/span&gt; minutes ago       &lt;span class="m"&gt;1&lt;/span&gt;.421 GB
gliderlabs/herokuish   latest              359e311e765f        &lt;span class="m"&gt;6&lt;/span&gt; weeks ago         &lt;span class="m"&gt;1&lt;/span&gt;.263 GB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;okぽい。&lt;/p&gt;
&lt;p&gt;アプリに対して、操作するときはdokkuコマンドから操作する。詳しくはdokku --help。&lt;/p&gt;
&lt;h1 id="_1"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;IDCFフロンティアの一番安いのにもDokkuちゃんとのせられたし、ちゃんと動いた。個人用途には申し分なさそう。&lt;/p&gt;
&lt;p&gt;メモリ使用量の様子。&lt;/p&gt;
&lt;p&gt;&lt;img alt="メモリ使用量" src="https://i.gyazo.com/36ecfb4e53c09ffbb76c2cd73e2033dd.png" /&gt;&lt;/p&gt;
&lt;p&gt;アプリ1つしかデブロイしてないけど、あまり無茶させなければ大丈夫そうな気配。&lt;/p&gt;
&lt;p&gt;入れたあとにDokkuAlternativeってのがあることを知った、こっちは、メジャーどころのDB連携がデフォルトでついていたりWebコンソールがあるみたい、こっちのほうがなにかとよさそう。&lt;/p&gt;
&lt;p&gt;dokku-altに関しては日本語で丁寧にまとまってる記事があったのでそちらを見るといいかもしれない。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://freedom-man.com/blog/dokku-alternative/" title="Dokku Alternative触ってみる。"&gt;Dokku Alternative触ってみる。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(今のところ不便はないので素のdokkuを運用しいています)&lt;/p&gt;
&lt;h1 id="_2"&gt;参考資料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/progrium/dokku" title="progrium/dokku"&gt;progrium/dokku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://progrium.viewdocs.io/dokku/installation/"&gt;dokku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/nyarla/items/a4ea9dd71625c72e48a1" title="DigitalOceanでUbuntu 12.04 + dokkuを構築した際のメモ - Qiita"&gt;DigitalOceanでUbuntu 12.04 + dokkuを構築した際のメモ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shokai.org/blog/archives/8855" title="橋本商会 » DockerとdokkuをMacにインストールして自分をHeroku化した"&gt;橋本商会 » DockerとdokkuをMacにインストールして自分をHeroku化した&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://knowledge.sakura.ad.jp/tech/2356/" title="DockerでミニHeroku！「Dokku」をさくらのクラウドで試す - さくらのナレッジ"&gt;DockerでミニHeroku！「Dokku」をさくらのクラウドで試す - さくらのナレッジ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://k2nr.me/blog/2014/08/20/dokku.html" title="dokkuのつらいところとつかいどころ"&gt;dokkuのつらいところとつかいどころ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/hokaccha/items/af109d4037fa1d788617" title="docker - Vagrantでdokkuを動かす - Qiita"&gt;docker - Vagrantでdokkuを動かす - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/muran001/items/b05bd7c4c0952c75795a" title="MacのVagrant上にDocker＆Dokku環境入れてローカルmini-Heroku環境構築してみる - Qiita"&gt;MacのVagrant上にDocker＆Dokku環境入れてローカルmini-Heroku環境構築してみる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/ngoldman/7287753" title="Setting up Dokku with DigitalOcean and Namecheap"&gt;Setting up Dokku with DigitalOcean and Namecheap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="IDCF"></category><category term="Dokku"></category></entry><entry><title>IDCFクラウド借りました</title><link href="https://muunyblue.github.io/50982fb2f2cfa186d335310461dfa2be.html" rel="alternate"></link><published>2015-09-19T00:44:17+09:00</published><updated>2015-09-19T00:44:17+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-09-19:50982fb2f2cfa186d335310461dfa2be.html</id><summary type="html">&lt;h1 id="_1"&gt;経緯&lt;/h1&gt;
&lt;p&gt;今までGehirnを使っていたけど、&lt;a href="https://www.gehirn.jp/gis/rs2plan.html"&gt;Gehirnの料金体制の変更&lt;/a&gt;に伴い、VPSを変更することにしました。&lt;/p&gt;
&lt;p&gt;自分の場合、個人用途なのでアクセスも主に自分くらいしかないようなサービスしか動かさないのでとにかく安いVPSを探して使っています。&lt;/p&gt;
&lt;p&gt;旧Gehirnは300円(税抜) per monthという遠足のお菓子くらいの価格なので選択していましたが、料金体制が40円 per dayになるのでもっと安いのにしたいので乗り換えることにしました。&lt;/p&gt;
&lt;p&gt;とりあえず、安いVPSを探すと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Digital Ocean&lt;/li&gt;
&lt;li&gt;IDCFクラウド&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;が500円くらい。&lt;/p&gt;
&lt;p&gt;DigitalOceanがあるが為替が安定しないので辞めて、IDCFクラウドにしました。&lt;/p&gt;
&lt;p&gt;IDCFクラウドは、2015/7/31までに申し込めば使える3000円クーポンがあったのが決め手。&lt;/p&gt;
&lt;h1 id="_2"&gt;申し込み&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://www.idcf.jp/cloud/?cl=top_cloud" title="IDCFクラウド -使いやすく、パワフル｜IDCフロンティア"&gt;IDCFクラウド -使いやすく、パワフル｜IDCフロンティア&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;「無料で始める」からユーザーの登録をします&lt;/li&gt;
&lt;li&gt;名前、ユーザー名、メールアドレス、パスワードを入力して、電話又はSNS認証をします&lt;/li&gt;
&lt;li&gt;メールが届くので承認して、登録完了です&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;管理コンソールに初めてアクセスすると、基本情報と支払情報の入力をしないといけないのでします。&lt;/p&gt;
&lt;p&gt;初期費用もなくサーバもすぐに立ち上がります。すごい良さ。&lt;/p&gt;
&lt;p&gt;管理画面もわかりやすくて、すごい良さです。&lt;/p&gt;
&lt;p&gt;IDCFクラウド、良いです。&lt;/p&gt;
&lt;h1 id="_3"&gt;サーバを立てる&lt;/h1&gt;
&lt;p&gt;light.S1の追加ストレージなしをUbuntu14.04LTSで立てました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.gyazo.com/def8832573d5be0803aeacde516d1487.png" /&gt;&lt;/p&gt;
&lt;p&gt;このとき、あとでSSHするのでSSH keyも登録しておきます。&lt;/p&gt;
&lt;h1 id="ssh"&gt;SSHの設定&lt;/h1&gt;
&lt;p&gt;サーバを立てましたが、プライベートネットワークで構成されているので、グローバルIPでサーバの必要なポートにアクセスできるように設定します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="IDCFクラウドのイメージ" src="http://i.gyazo.com/e84703268212c03dc9b627c5341f888b.png" /&gt;&lt;/p&gt;
&lt;p&gt;こんな感じのイメージ(イメージなので正しくないかもしれません)なので、FirewallとPort forwardingの設定をします。&lt;/p&gt;
&lt;p&gt;管理コンソールのIPアドレスにある、もらってるIPのところで設定ができます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="FirewallとPort forwardの設定ボタン" src="http://i.gyazo.com/c08a33d300fbe9a840276e77ee32f40e.png" /&gt;&lt;/p&gt;
&lt;p&gt;ポートフォワードでプレイベートポートにSSH(22番ポート)、パブリックポートに22ポートを指定します。&lt;/p&gt;
&lt;p&gt;次にFirewallで、さきほどパブリックポートに指定したポートに対して、ソースCIDRにMy IP、タイプにCustom TCPを設定します。&lt;/p&gt;
&lt;p&gt;(セキュリティ的に、ポートフォワードのパブリックのSSHのポートを変えたほうがいいですが、ここでは、FirewallのソースCIDRでIPを制限することにしています。)&lt;/p&gt;
&lt;p&gt;コメントは両者ともSSHとしました。&lt;/p&gt;
&lt;p&gt;SSHの公開鍵を登録したPCからSSHします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh root@XXX.XXX.XXX.XXX
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ubuntuの場合、ログインできたら以下のようになりました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.gyazo.com/77ab6842dfbb6fca19fa225f17a5500e.png" /&gt;&lt;/p&gt;
&lt;h1 id="swap"&gt;swap領域の設定&lt;/h1&gt;
&lt;p&gt;デフォルトでswap領域は作られていないので作っておきます。(Docker使うのでswapを作っておいたほうが良さそうでした)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-12-04" title="How To Add Swap on Ubuntu 12.04 | DigitalOcean"&gt;How To Add Swap on Ubuntu 12.04 | DigitalOcean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://piro791.blog.so-net.ne.jp/2009-03-05" title="Linuxのswap領域を追加する方法：ぴろにっき：So-netブログ"&gt;Linuxのswap領域を追加する方法：ぴろにっき：So-netブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://server.etutsplus.com/allocate-swap-space/" title="推奨される Swap 領域の目安 - eTuts+ Server Tutorial"&gt;推奨される Swap 領域の目安 - eTuts+ Server Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このあたりを参考にしました。&lt;/p&gt;
&lt;p&gt;RAM1Gなので、上記の記事によると2Gのswapを確保することになるが、あんまり大きくてもディスクを圧迫しかねないので1Gにしておきます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dd if=/dev/zero of=swap用ファイルのパス名 bs=単位 count=サイズ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1Gにするなら、bs=1024 count=1024kで1G、bs=1M count=1024で1G。&lt;/p&gt;
&lt;p&gt;/.swapfileに作る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/.swapfile &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt;
$ sudo mkswap /.swapfile
$ sudo swapon /.swapfile
$ sudo vi /etc/fstab
/.swapfile       none    swap    sw      &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;
$ sudo chown root:root /.swapfile
$ sudo chmod &lt;span class="m"&gt;0600&lt;/span&gt; /.swapfile
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="user"&gt;userの追加&lt;/h1&gt;
&lt;p&gt;rootユーザーしかいないので、セキュリティ的にrootでSSH出来ないようにして、root権限を持つユーザーで操作するように設定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ adduser &lt;span class="nv"&gt;$USER&lt;/span&gt;
$ visudo
&lt;span class="nv"&gt;$USER&lt;/span&gt;    &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;ALL:ALL&lt;span class="o"&gt;)&lt;/span&gt; ALL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sshできるようにして、rootのssh接続をできないようにします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ su &lt;span class="nv"&gt;$USER&lt;/span&gt;
$ mkdir ~/.ssh
$ chmod &lt;span class="m"&gt;0700&lt;/span&gt; ~/.ssh
$ vi ~/.ssh/authorized_keys
&lt;span class="o"&gt;(&lt;/span&gt;接続するPCのSSHの公開鍵を記載&lt;span class="o"&gt;)&lt;/span&gt;
$ chmod &lt;span class="m"&gt;0600&lt;/span&gt; ~/.ssh/authorized_keys
$ sudo vi /etc/ssh/sshd_config
&lt;span class="c1"&gt;#PermitRootLogin without-password&lt;/span&gt;
PermitRootLogin no
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sshd_configは以下の項目も確認。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PubkeyAuthentication yes
PasswordAuthentication no
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="mackerel"&gt;Mackerelを使う&lt;/h1&gt;
&lt;p&gt;IDCFクラウドは、サーバの状態を見たりするUIがなさそうなので、Mackarelで監視してみました。&lt;/p&gt;
&lt;p&gt;IDCFクラウドはMackerel対応していて、OAuthしてMackarel使えるみたいでしたが、同じメールアドレスでMackerelのユーザー持ってたので、もったいないですが既存のユーザーで行いました。&lt;/p&gt;
&lt;p&gt;Ubuntuにしたので、debパッケージでのインストール方法を参考にインストール、追加でサービスの設定等はしていませんが、Mackerelでの監視はさくっとできました。&lt;/p&gt;
&lt;h1 id="_4"&gt;今後&lt;/h1&gt;
&lt;p&gt;Dokkuを動かしたいなぁという感じです。&lt;/p&gt;</summary><category term="IDCF"></category><category term="VPS"></category></entry><entry><title>もくもくブログを作りました</title><link href="https://muunyblue.github.io/1f5f6ad95cc908a20bb7e30ee28a5958.html" rel="alternate"></link><published>2015-09-21T07:39:16+09:00</published><updated>2015-09-21T07:39:16+09:00</updated><author><name>yuya yano</name></author><id>tag:muunyblue.github.io,2015-09-18:1f5f6ad95cc908a20bb7e30ee28a5958.html</id><summary type="html">&lt;p&gt;定期的な更新ができそうなブログができました。&lt;/p&gt;
&lt;h1 id="_1"&gt;自動&lt;/h1&gt;
&lt;p&gt;自動的な様子&lt;/p&gt;
&lt;p&gt;&lt;img alt="自動的な様子" src="https://i.gyazo.com/edf6e18931602c18ffbdedffd0446c05.png" /&gt;&lt;/p&gt;
&lt;p&gt;このブログ自体はPelicanというPythonの静的サイドジェネレータで作られていて、MemoMemoというアプリを通して自動生成されています。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/yymm/MemoMemo" title="yymm/MemoMemo"&gt;MemoMemo&lt;/a&gt;は、かねてからドックフーディングで作っていたWebアプリで、個人的なメモを残すアプリだったのですが、公開指定したメモをPelicanを使ってBlogにできるようにしました。&lt;/p&gt;
&lt;p&gt;このアプリはもともとHerokuで動かしていましたが、&lt;a href="https://www.heroku.com/pricing" title="Heroku | Pricing"&gt;Herokuがちょっと厳しさを提示&lt;/a&gt;してきたので、IDCFクラウドにDokkuをのせてこのアプリを動かしています。&lt;/p&gt;
&lt;p&gt;ブログジェネレートの仕組みはMemoMemo内に実装されていて、GitHubからPelicanの情報をpullして、公開用のメモをgh-pagesにpushする仕組みになっています。&lt;/p&gt;
&lt;h1 id="_2"&gt;材料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://flask.pocoo.org/" title="Welcome | Flask (A Python Microframework)"&gt;Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican" title="getpelican/pelican"&gt;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pages.github.com/" title="GitHub Pages"&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/progrium/dokku" title="progrium/dokku"&gt;dokku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.idcf.jp/cloud/" title="クラウドサービスならIDCFクラウド -使いやすく、パワフル"&gt;IDCFクラウド&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_3"&gt;良さ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;愛着があるドックフーディングアプリからジェネレートされているので最高の気持ちでブログが書ける&lt;/li&gt;
&lt;li&gt;Pelicanの良さ&lt;/li&gt;
&lt;li&gt;reStructuredTextもMarkdownも使える便利&lt;/li&gt;
&lt;li&gt;プラグインの機構があるのでカスタマイズできる&lt;/li&gt;
&lt;li&gt;プラグインによりGFMも使える&lt;/li&gt;
&lt;li&gt;ドキュメントが丁寧&lt;/li&gt;
&lt;li&gt;Dokkuの良さ&lt;/li&gt;
&lt;li&gt;完全にHeroku&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_4"&gt;まとめ&lt;/h1&gt;
&lt;p&gt;とても快適なブログライフが送れる気持ちです。&lt;/p&gt;
&lt;p&gt;ひとまず、PelicanとDokku on IDCFクラウドのこととか書く予定です。&lt;/p&gt;</summary><category term="Blog"></category></entry></feed>